{
  "script_id": "3598",
  "display_name": "Advancer Abbreviation",
  "summary": "create code snippet through vim abbreviation",
  "name": "Advancer-Abbreviation",
  "script_type": "utility",
  "description": "Repository, Tutorial: https://github.com/jiangmiao/advancer-abbreviation\n\nAdvancer Abbreviation\n=====================\nAdvancer Abbreviation is a Vim plugin to create code snippet quickly\n\nUsage\n-----\n    Use Shortcut <C-CR> or <S-CR> to expand the abbreviation or jump to next placeholder.\n\n    <S-CR> : Smart Expand or jump to next placeholder.\n    <C-CR> : Force Expand or jump to next placeholder.\n    <ESC>  : If the line contain placeholder but now it is blank, \n             then delete whole line and leave insert mode.\n\nFeatures\n--------\n*   Support any character except space as abbreviate name.\n*   Quick jump to next placeholder.\n*   Easy to extend.\n\nInstallation\n------------\n    copy plugin/advancer-abbreviate.vim to ~/.vim/plugin\n\nTutorial\n--------\n###Preparation\n    copy ftplugin-examples/* to ~/.vim/ftplugin\n\n    There are 5 examples include c, cpp, javascript, php, ruby\n    The abbreviation supported in example are\n\n        c          : for std main #i #ii\n        cpp        : for std main\n        javascript : for fu\n        ruby       : for def\n        php        : for\n\n    You could test the script with your favourite language.\n\n###example for edit C file\n    <C-CR> = Control+Return\n    |      = Cursor postion\n    $ gvim foo.c\n\n1\n\n    input: #i<C-CR>foo<C-CR>#ii<C-CR>bar<C-CR>\n    output:\n    #include <foo>\n    #include \"bar\"\n    |\n\n2\n\n    input: std<C-CR>\n    output:\n    #include <stdio.h>\n    #include <stdlib.h>\n    #include <string.h>\n\n    |\n\nWrite Your Own Abbreviation\n---------------------------\n    Use Command Abbr\n    Usage: Abbr [name] [code]\n    Example:\n    Abbr for for (/*TODO*/; /*TODO*/; /*TODO*/) {<CR>/*TODO*/<CR>}<CR>/*TODO*/\n    Abbr #ii #include \"/*TODO*/\"<CR>\n\n    Abbreviate format is same as vim abbr. see help :abbr\n    but AdvAbbr has looser limition on name, it support any character as name except space.\n    eg: f.f is invalid name in vim abbr but valid in Advancer Abbreviation.\n    \n    TODO has four different formats\n    /*TODO*/, #TODO#, 'TODO', <!--TODO-->\n    choose them according to which language is using. \n    for example, /*TODO*/ use for c, cpp, 'TODO' use for ruby\n",
  "install_details": "copy plugin/advancer-abbreviate.vim to ~/.vim/plugin",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15722",
      "filename": "advancer-abbreviation-v1.0.2.tar.gz",
      "script_version": "1.0.2",
      "date": "2011-05-25",
      "vim_version": "7.0",
      "author": {
        "user_id": "17938",
        "user_name": "JiangMiao",
        "first_name": "Miao",
        "last_name": "Jiang",
        "email": "jiangfriend@gmail.com",
        "homepage": "http://www.jiangmiao.org"
      },
      "release_notes": "Add Smart Expand and Force Expand\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15712",
      "filename": "advancer-abbreviation-v1.0.1.tar.gz",
      "script_version": "1.0.1",
      "date": "2011-05-24",
      "vim_version": "7.0",
      "author": {
        "user_id": "17938",
        "user_name": "JiangMiao",
        "first_name": "Miao",
        "last_name": "Jiang",
        "email": "jiangfriend@gmail.com",
        "homepage": "http://www.jiangmiao.org"
      },
      "release_notes": "add option g:AbbrShortcutEscape and g:AbbrShortcutExpand\n"
    }
  ]
}
