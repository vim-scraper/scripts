{
  "script_id": "3130",
  "display_name": "CountJump",
  "summary": "Create custom motions and text objects via repeated jumps. ",
  "name": "CountJump",
  "script_type": "utility",
  "description": "DESCRIPTION\nThough it is not difficult to write a custom movement (basically a :map\nthat executes some kind of search or jump) and a custom text-object (an\n:omap that selects a range of text), this is too complex for a novice user\nand often repetitive. \nThis plugin covers the common use case where the movement and boundaries of a\ntext object can be specified via start and end patterns, and offers a single\nfunction to set up related mappings. With it, you can enhance some built-in\nVim mappings to take an optional [count], and quickly define new mappings for\nhelp file sections, diff hunks, embedded macros, and so on... \n\nAs a generalization of the start and end patterns, the movement and boundaries\nof a text object can also be specified via jump functions, i.e. Funcrefs of\nfunctions that position the cursor on the appropriate location and return that\nlocation. This can be used where the jump is difficult to express with a\nsingle regular expression, the jump may need adapting depending on the\ncontext, or other uses. \nThis plugin contains some support for movement and text objects consisting of\ntext regions that can be defined by continuous lines that match a particular\npattern, e.g. comment blocks that all start with /^\\s*#/. \n\nSEE ALSO\nThe following ftplugins use this plugin: \n\ndiff_movement\t  (vimscript #3180): Movement over diff hunks with ]] etc.\nfortunes_movement (vimscript #3181): Movement over email fortunes with ]] etc.\nhelp_movement     (vimscript #3179): Movement over Vim help sections with ]] etc.\nmail_movement     (vimscript #3182): Movement over email quotes with ]] etc.\n\nRELATED WORKS\n- motpat.vim (vimscript #3030) offers similar functions to setup motion\n  mappings, but no text objects (yet). \n- textobj-user (vimscript #2100) has support for user-defined text objects via\n  regular expressions. \n\nUSAGE\nThe plugin defines several functions, which set up the appropriate mappings\nbased on the arguments that you supply. The following is an overview; you'll\nfind the details directly in the implementation files in the\n.vim/autoload/CountJump/ directory. \n\nCountJump#Motion#MakeBracketMotion( mapArgs, keyAfterBracket, inverseKeyAfterBracket, patternToBegin, patternToEnd, isEndPatternToEnd, ... )\n\nThis function sets up mappings starting with [ and ] for movement (with\noptional [count]) relative to the current cursor position, targeting either a\ntext pattern at the beginning ([{keyAfterBracket} mapping) or a text pattern\nat the end (]{inverseKeyAfterBracket} mapping) of whatever you want to treat\nas a text block. \n\nCountJump#Motion#MakeBracketMotionWithJumpFunctions( mapArgs, keyAfterBracket, inverseKeyAfterBracket, JumpToBeginForward, JumpToBeginBackward, JumpToEndForward, JumpToEndBackward, isEndJumpToEnd, ... )\n\nThis function sets up mappings starting with [ and ] for movement (with\noptional [count]) relative to the current cursor position, but rely on four\npassed jump functions instead of text patterns to do the movement. \n\n\nCountJump#TextObject#MakeWithCountSearch( mapArgs, textObjectKey, types, selectionMode, patternToBegin, patternToEnd )\n\nDefines a complete set of mappings for inner and/or outer text objects that\nsupport an optional [count] and are driven by search patterns for the\nbeginning and end of a block. Outer text objects include the matched pattern\ntext, inner ones not. Selection can be characterwise, linewise or blockwise. \n\n\nCountJump#TextObject#MakeWithJumpFunctions( mapArgs, textObjectKey, types, selectionMode, JumpToBegin, JumpToEnd )\n\nThis is a generalization of CountJump#TextObject#MakeWithCountSearch() that\ninvokes custom functions instead of searching for a fixed pattern. This is\nuseful if the check for a match is too complex for a single regular\nexpression, or if you need to adjust the match position depending on the\ncircumstances. \n\n\nOften, a region can be defined as a block of continuous lines that all match a\ncertain pattern. The following functions aid in implementing movements to the\nboundaries of these regions and text objects consisting of the region: \n\nCountJump#Region#JumpToRegionEnd( count, pattern, step )\n\nStarting from the current line, search for the position where the count'th\nregion ends. Use this function to build Funcrefs for forward / backward jumps\nthat can then be passed to CountJump#TextObject#MakeWithJumpFunctions(). \n\nCountJump#Region#JumpToNextRegion( count, pattern, step, isAcrossRegion )\n\nStarting from the current line, search for the position where the count'th\nregion begins/ends. \n\nCountJump#Region#Jump( mode, JumpFunc, ... )\n\nImplement a custom motion by jumping to the <count>th occurrence of the passed\npattern. This function allows to implement jump functions working on text\nregions. These can then be passed to\nCountJump#Motion#MakeBracketMotionWithJumpFunctions(). \n    function! s:JumpToBeginForward( mode )\n\treturn CountJump#Region#Jump(a:mode, function('CountJump#Region#JumpToNextRegion'), '^\\s*#', 1, 0)\n    endfunction\n\nEXAMPLE\nLet's illustrate the usage by developing custom motions and text objects for\nPascal begin..end blocks. \n\nWe want to move around blocks, and override the default section movements for\nit: \n]]\t\t\tGo to [count] next start of a block. \n][\t\t\tGo to [count] next end of a block. \n[[\t\t\tGo to [count] previous start of a block. \n[]\t\t\tGo to [count] previous end of a block. \n\n    call CountJump#Motion#MakeBracketMotion('<buffer>', '', '', '\\c^begin\\n\\zs', '\\c^.*\\nend', 0)\nThe begin pattern positions the cursor on the beginning of the line following\nthe \"begin\" keyword, the end pattern on the beginning of the line\npreceding the \"end\" keyword. \n\n\nWe want to select a block, either including or excluding the lines with the\nbegin..end keywords: \nib\t\t\t\"inner block\" text object, select [count] contents of\n\t\t\ta block. \nab\t\t\t\"a block\" text object, select [count] blocks. \n\n    call CountJump#TextObject#MakeWithCountSearch('<buffer>', 'b', 'ai', 'V', '\\c^begin\\n', '\\c^end.*$')\n\nIf there is a filetype detection for Pascal files, we can simply put the\nabove calls in a ~/.vim/ftplugin/pascal_movement.vim script and are done. ",
  "rating_total": "16",
  "rating_votes": "4",
  "downloads": "59",
  "install_details": "INSTALLATION\nThis script is packaged as a vimball. If you have the \"gunzip\" decompressor\nin your PATH, simply edit the *.vba.gz package in Vim; otherwise, decompress\nthe archive first, e.g. using WinZip. Inside Vim, install by sourcing the\nvimball or via the :UseVimball command.\n    vim CountJump.vba.gz\n    :so %\nTo uninstall, use the :RmVimball command. \n\nDEPENDENCIES\n- Requires Vim 7.0 or higher. ",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13502",
      "filename": "CountJump.vba.gz",
      "script_version": "1.22",
      "date": "2010-08-06",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "- No more motion mappings and text objects for select mode; as the mappings start with a printable character, no select-mode mapping should be defined. "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13462",
      "filename": "CountJump.vba.gz",
      "script_version": "1.21",
      "date": "2010-08-03",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "- FIX: A 2]] jump inside a region (unless last line) jumped like a 1]] jump. The search for next region must not decrease the iteration counter when _not_ searching _across_ the region. \n- FIX: Must not do (characterwise) end position adaptation for linewise text object that does not exclude boundaries. \n- Switched example from email fortunes to Pascal begin..end blocks, as they are conceptually easier. "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13461",
      "filename": "CountJump.vba.gz",
      "script_version": "1.20",
      "date": "2010-08-03",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "- ENH: In CountJump#Motion#MakeBracketMotion(), a:keyAfterBracket and a:inverseKeyAfterBracket can now be empty, the resulting mappings are then omitted. Likewise, any jump function can be empty in CountJump#Motion#MakeBracketMotionWithJumpFunctions().\n- With the added CountJump#Motion#MakeBracketMotionWithJumpFunctions() motions can be defined via jump functions, similar to how text objects can be defined. \n- Added CountJump/Region.vim to move to borders of a region defined by lines matching a pattern. \n- FIX: CountJump#CountJump() with mode \"O\" didn't add original position to jump list. \n- The previous visual selection is kept when the text object could not be selected. (Beforehand, a new selection of the text object's selection type was created.) \n- The adjustment movements after the jumps to the text object boundaries now do not cause beeps if that movement cannot be done (e.g. a 'j' at the end of the buffer). "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13359",
      "filename": "CountJump.vba.gz",
      "script_version": "1.10",
      "date": "2010-07-20",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "- Changed behavior if there aren't [count] matches: Instead of jumping to the last available match (and ringing the bell), the cursor stays at the original position, like with the old vi-compatible motions. \n- ENH: Only adding to jump list if there actually is a match. This is like the built-in Vim motions work. \n- FIX: For a linewise text object, the end cursor column is not important; do not compare with the original cursor column in this case. "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13233",
      "filename": "CountJump.vba.gz",
      "script_version": "1.00",
      "date": "2010-06-22",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "Initial upload"
    }
  ]
}
