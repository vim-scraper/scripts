{
  "script_id": "1808",
  "name": "Vimplate Enhanced",
  "summary": "Vimplate template system for vim 7.0 (supports C/C++/Cpp, Perl, make, LaTeX)",
  "script_type": "utility",
  "description": "*** Introduction and Explanation ***\n\nI have made substantial updates to the package layout and installation procedure of Stotz's most recent version of vimplate (v0.2.3).  I implemented several fixes so that it would actually be compatible with windows.  I have reworked the installation procedure and it should now be much easier to follow.\n\nThis version of Vimplate should be MUCH easier to install! (on all operating systems, but especially windows).\n\nIt is a really neat plugin and I am very pleased to have it working on my laptop.  I hope this will be helpful for at least a few of you out there.\n\n\n--------------------------------------------------------------------------------\nChangelog\n--------------------------------------------------------------------------------\n0.2.4, released by JET on 2007-02-25\n  Fixed a number of typos and added additional details in the installation instructions to improve the clarity.\n\n  Added prompts during the -createconfig phase of the setup so that the user will not need to do as much editing of the .vimplaterc file by hand.\n\n  Added a createconf batch file to simplify things for windows.\n\n  Changed how error conditions are handled and displayed in the perl script so that an appropriate amount of information about the problem will be shown.\n--------------------------------------------------------------------------------\n\n\n\n1. Description\n2. Usage\n3. Subroutines\n4. Example\n5. Documentation\n6. Depends\n7. Installation\n\n\n1. Description                                        *vimplate-description*\n\nVimplate provides an extensible and powerful template processing system.\nIt is based on Perl and Template-Toolkit.\nYou can create templates for program code, makefiles, letters, html pages,\nlatex etc. As example vimplate contains templates for C++, LaTeX, Perl\nand Makefile.\nWith vimplate you can write templates which interact with the user.\nFor themes are the functions choice() and input().\nYou can choose different locale for the function date() and locale().\nYou can write your own perl code directly in the templates.\n\nIf you find this useful and want to let the original author of this package know, email him at <stotz@gmx.ch>.\n\nIf you write a new template and  would like me to add it to the vimplate package please send an email with the text [VIMPLATE] in the subject line to: < outtatime@gmail.com >.\n\n\n2. Usage                                                    *vimplate-usage*\n\nUsage:\n  :Vimplate <template> [options]\n    choice <template> whit <TAB> (command line completion is supported).\n    With <TAB> all templates are listed.\n    [options]\n      -user|u=<username>\n        Use the information form user <username> while parsing templates.\n      -dir|d=<templatedir>\n        Search templatefiles in <templatedir>.\n\n\n3. Subroutines                                         *vimplate-subroutines*\n\n  locale()                  for locale please see: man locale\n  [% loc=locale() %]        get the current locale\n                              and write it to the variable loc\n  [% locale('C') %]         set global the current locale to C\n  [% locale('de_DE') %]     set global the current locale to de_DE\n  date()                    for date please see: man date\n  [% date('%c') %]          print the current date\n                              with the current locale setting\n  [% date('de_DE', '%c') %] print the current date with the locale de_DE\n  input()\n  [% var=input() %]         read input from user\n                              and write it to the variable var\n  choice()\n  [% day=choice('day:', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa') %]\n                            let the user choice between different values\n                            and write it to the variable day\n\n  please try :Vimplate Test\n\n\n4. Example                                                *vimplate-example*\n\na LaTeX Template:\n  http://www.napali.ch/vimplate/example/LaTeX.tt.html\nthe generated LaTeX File:\n  http://www.napali.ch/vimplate/example/Example.tex.html\na Makefile Template for LaTeX:\n  http://www.napali.ch/vimplate/example/Makefile-LaTeX.tt.html\nthe generated Makefile:\n  http://www.napali.ch/vimplate/example/Makefile.html\nc++ Templates:\n  http://www.napali.ch/vimplate/example/hpp-default.tt.html\n  http://www.napali.ch/vimplate/example/cpp-default.tt.html\nthe generated class:\n  http://www.napali.ch/vimplate/example/Example.hpp.html\n  http://www.napali.ch/vimplate/example/Example.cpp.html\nthe generated class with doxygen:\n  http://www.napali.ch/vimplate/example/ExampleDoxy.hpp.html\n  http://www.napali.ch/vimplate/example/ExampleDoxy.cpp.html\na perl Template:\n  http://www.napali.ch/vimplate/example/perl.tt.html\nthe genereated program:\n  http://www.napali.ch/vimplate/example/Example.pl.html\nthe genereated program with Log4Perl:\n  http://www.napali.ch/vimplate/example/ExampleLog.pl.html\n\nExample:\n  the template letter.tt:\n    ________________________________________________________\n    [%\n       sex=choice('sex: ', 'female', 'male')\n       name=input('name: ')\n       location=input('your location: ')\n    -%]\n                       [% ucfirst(location) %], [% date('C', '%b %d, %Y') %]\n\n    Dear [% IF sex=='female'; 'Ms'; ELSE; 'Mr'; END %] [% ucfirst(name) %]\n\n    ...\n\n    Sincerely\n\n    [% user.firstname %] [% user.lastname %]\n    ________________________________________________________\n\n  run vim:\n    :Vimplate letter\n    sex:\n      0) female\n      1) male\n    0\n    name: Meier\n    your location: Olten\n\n  your input was:\n    :Vimplate letter<CR>0<CR>Meier<CR>Olten<CR>\n\n  this will produce this letter:\n    ________________________________________________________\n                                      Olten, Jul 11, 2005\n\n    Dear Ms Meier\n\n    ...\n\n    Sincerely\n\n    Urs Stotz\n    ________________________________________________________\n\nExample:\n  the template hpp-default.tt:\n    ________________________________________________________\n    [% classname=input('Class name: ')\n       doxygen=choice('with Doxygen comments: ', 'no', 'yes')\n    -%]\n    #ifndef [% uc(classname) %]_HPP\n    #define [% uc(classname) %]_HPP\n\n    [% IF doxygen=='yes' -%]\n    /**\n     * @brief [% classname %] ... short description ...\n     * @author [% user.firstname %] [% user.lastname %] <[% user.mail %]>\n     * @date [% date('%Y-%m-%d') %]\n     * ... description ...\n     */\n\n    [% END -%]\n    class [% classname %]\n    {\n      public:\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Default constructor\n         */\n    [% END -%]\n        [% classname %]();\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Copy constructor\n         * @param other reference on object to copy\n         */\n    [% END -%]\n        [% classname %](const [% classname %]& other);\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Assignment operator\n         * @param other reference on object to copy\n         * @return reference on initialisated object\n         */\n    [% END -%]\n        [% classname %]& operator=(const [% classname %]& other);\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Destructor\n         */\n    [% END -%]\n        virtual ~[% classname %]();\n\n      private:\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Base initialisation should be called\n         * at beginning of each constructor\n         */\n    [% END -%]\n        void init();\n    [% IF doxygen=='yes' -%]\n\n    /**\n     * Method to copy each member (deep copy)\n     * @param other reference on object to copy\n     */\n    [% END -%]\n        void init(const [% classname %]& other);\n    };\n\n    #endif /* #ifndef [% uc(classname) %]_HPP */\n    ________________________________________________________\n\n  run vim:\n    :Vimplate hpp-default\n    Class name: Parent\n    with Doxygen comments:\n      0) no\n      1) yes\n    1\n\n  your input was:\n    :Vimplate hpp-default<CR>Parent<CR>1<CR>\n\n  this will produce this c++ include file:\n    ________________________________________________________\n    #ifndef PARENT_HPP\n    #define PARENT_HPP\n\n    /**\n     * @brief Parent ... short description ...\n     * @author Urs Stotz <stotz@gmx.ch>\n     * @date 2005-07-18\n     * ... description ...\n     */\n\n    class Parent\n    {\n      public:\n\n        /**\n         * Default constructor\n         */\n        Parent();\n\n        /**\n         * Copy constructor\n         * @param other reference on object to copy\n         */\n        Parent(const Parent& other);\n\n        /**\n         * Assignment operator\n         * @param other reference on object to copy\n         * @return reference on initialisated object\n         */\n        Parent& operator=(const Parent& other);\n\n        /**\n         * Destructor\n         */\n        virtual ~Parent();\n\n      private:\n\n        /**\n         * Base initialisation should be called\n         * at beginning of each constructor\n         */\n        void init();\n\n        /**\n         * Method to copy each member (deep copy)\n         * @param other reference on object to copy\n         */\n        void init(const Parent& other);\n    };\n\n    #endif /* #ifndef PARENT_HPP */\n    ________________________________________________________\n\n\n5. Documentation                                    *vimplate-documentation*\n\nDocumentation:\n  - http://napali.ch/vimplate\n  - http://www.template-toolkit.org/docs.html\n  - http://perldoc.perl.org/perl.html\n\nTodo:\n  - better exception handling\n  - write more templates\n\nLicense:\n  This program is free software; you can redistribute it and/or modify it\n  under the terms of the GNU General Public License, version 2, as published\n  by the Free Software Foundation.\n\n  This program is distributed in the hope that it will be useful, but\n  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n  for more details.\n\n  A copy of the GNU GPL is available as /usr/share/common-licenses/GPL-2\n  on Debian systems, or on the World Wide Web at\n  http://www.gnu.org/copyleft/gpl.html\n  You can also obtain it by writing to the Free Software Foundation, Inc.,\n  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA\n\nCopyright:\n  Copyright (c) 2005, Urs Stotz <stotz@gmx.ch>\n\nVersion:\n  vimplate 0.2.4",
  "install_details": "6. Depends:                                               *vimplate-depends*\n\n  Perl\n    http://www.perl.org\n    Windows users:\n      http://www.activestate.com/Products/ActivePerl\n  Template-Toolkit\n    http://search.cpan.org/~abw/Template-Toolkit-2.14\n    or apt-get install libtemplate-perl\n    or perl -MCPAN -e\"install Template\"\n    Windows users:\n      ppm install\n        http://openinteract.sourceforge.net/ppmpackages/AppConfig.ppd\n      ppm install\n        http://openinteract.sourceforge.net/ppmpackages/Template-Toolkit.ppd\n\nSuggests:\n  TT2 syntax:\n    http://www.vim.org/scripts/script.php?script_id=830\n\n\n7. Installation                                      *vimplate-installation*\n\nInstallation steps:\n------------------------\n  1. change to your $HOME/.vim directory\n       (on windows: set the variable HOME to \"C:\\Documents and Settings\\<Insert Your User Here>\").\n\n  2. Move vimplate.zip into your $HOME/.vim folder and extract vimplate.zip there (on windows this folder is '%HOME%\\vimfiles').\n\n  3. edit your $HOME/.vimrc (or %HOME%\\.vimrc on windows) and set the variable Vimplate to the filepath to vimplate.pl\n\n        On *nix, this should be the relative path to the vimplate.pl file.  For example:\n          let Vimplate = \"~/.vim/vimplate.pl\"\n\n        On windows, you have to use the full path.  If it has spaces in it you need to put escaped quotation marks around the entire value or it will not work.  For example, if my user name in Windows is \"Villanous Victor\", I would add:\n          let Vimplate = \"\\\"C:/Documents and Settings/Villanous Victor/vimfiles/vimplate.cmd\\\"\"\n             - or -\n          let Vimplate = \"\\\"C:\\\\Documents and Settings\\\\Villanous Victor\\\\vimfiles\\\\vimplate.cmd\\\"\"\n          (take note of the double slashing)\n\n  6. Run the appropriate command for your operating system to create the $HOME/.vimplaterc (or %HOME%/.vimplaterc on windows) configuration file.\n\n        On *nix, run `$HOME/.vim/vimplate.pl -createconfig` to create your configuration file.\n\n        On windows you can simple execute the file '%HOME%/vimfiles/vimplate_createconfig.cmd' to initiate the configuration.\n\n  7. edit your $HOME/.vimplaterc\n       (on windows: %HOMEPATH%/.vimplaterc)\n\n  8. Fire up vim and perform the appropriate helptag update command for your OS:\n\n        *nix: :helptags ~/.vim/doc\n\n        windows: :helptags ~/vimfiles/doc\n\n  9. Happy Vimplating! Please direct your questions and complaints to < outtatime@gmail.com > and I will do my best to respond in a timely manner.\n",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=6791",
      "filename": "vimplate-0.2.4.zip",
      "script_version": "0.2.4",
      "date": "2007-02-25",
      "vim_version": "7.0",
      "author": {
        "user_id": "11852",
        "user_name": "Vimpire",
        "first_name": "Jai",
        "last_name": "Tkker",
        "email": "-",
        "homepage": "http://bf2e.com/"
      },
      "release_notes": "Initial upload"
    }
  ]
}