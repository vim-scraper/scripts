{
  "script_id": "889",
  "display_name": "EvalSelection.vim",
  "summary": "evaluate selected code (vim, bash, ruby, python, perl, (mz)scheme, tcl, R, SPSS)",
  "name": "EvalSelection.vim",
  "script_type": "utility",
  "description": "Evaluate source code selected in a visual region. The result can be displayed \nin an interaction log, appended to the text, replace the text, or saved in the \n@e register. This is useful for performing small text manipulation tasks or \ncalculations that aren't worth the trouble of creating a new file or switching \nto a different program, but which are too big for being handled in the command \nline.\n\nThe key bindings follow this scheme:\n\n    <Leader>e{LANGUAGE}{MODE} :: work on the visual region\n    <Leader>E{LANGUAGE}{MODE} :: work on the contents of the e-register\n    <Leader>x{MODE}           :: work on the visual region (derives LANGUAGE \n                                 from the buffer's 'filetype')\n\nLANGUAGE being one of:\n\n    v :: vim (comments at the end of line after vim code could cause problems)\n    r :: ruby (requires compiled-in ruby support)\n    s :: sh (using system())\n    e :: calculator, evaluate formula (using either ruby, python, perl, tcl, \n         or vim)\n\nI haven't actually tested the following three bindings because I use \nneither of them. Anyway, as I happen to use a Vim with +tcl, +python and \n+perl support compiled in, I added them to the standard bindings:\n\n    y :: python (requires compiled-in python support)\n    p :: perl (requires compiled-in perl support)\n    t :: tcl (requires compiled-in tcl support)\n    z :: mzscheme (requires compiled-in mzscheme support)\n\nIf ruby-support is compiled in, the following languages are available too \n(but see |EvalSelection-Interaction| below):\n    \n    c :: scheme\n        set g:evalSelectionSchemeInterpreter to \"Gauche\" or \"Chicken\"\n    l :: lisp\n        set g:evalSelectionLispInterpreter to \"CLisp\"\n    o :: ocaml\n        set g:evalSelectionOCamlInterpreter to \"OCaml\" or \"OCamlClean\"\n    R :: R\n        set g:evalSelectionRInterpreter \"R\", \"RClean\", or \"RDCOM\"\n    S :: SPSS\n        limited support (no return values), the (one-way) communication with \n        SPSS is done via OLE automation\n\nMODE being one of:\n\n    x :: just evaluate and put the result in the e-register\n    e :: the same as x\n    p :: echo/print the result on the command line\n    a :: append the result to visual region\n    r :: replace visual region with the result\n    l :: insert the result in a temporary interaction log\n\n\nCommands:\n\n    EvalSelectionCmdLine LANG :: Simulate a command line for LANG; due to the \n    primitive handling of input/output, no input commands (like read, get kind \n    of stuff) can be used; all output is redirected to the log. Exit with ^D + \n    Enter, i.e. enter the ^D character.\n\n    EvalSelectionSetup{LANG}  :: Set up interaction with external interpreter \n    (but see below)\n\n    EvalSelectionQuit INTERPRETER :: Quit interaction with an \n    external interpreter\n",
  "install_details": "Requires multvals.vim (vimscript #171), +ruby (for interaction with an interpreter)\n\nIf you have +ruby support compiled in and if you want to talk to an external interpreter, make sure that g:evalSelectionRubyDir points to the directory where EvalSelection.rb resides. Default values are:\n\n    Win32: $VIM.\"/vimfiles/ruby/\"\n    Else:  \"~/.vim/ruby/\"\n\n\nAlso available via git\nhttp://github.com/tomtom/vimtlib/tree/master\n",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7221",
      "filename": "EvalSelection.vba.gz",
      "script_version": "0.16",
      "date": "2007-06-08",
      "vim_version": "7.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "- MzScheme support (thanks to Mark Smithfield)\n- Catch errors on EvalSelectionQuit (you'll have to manually kill zombie \nprocesses)\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7111",
      "filename": "EvalSelection.vba.gz",
      "script_version": "0.15",
      "date": "2007-05-14",
      "vim_version": "7.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "- Escape backslashes in EvalSelectionTalk()\n- SPSS: Insert a space before variable names (like SPSS itself)\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=4362",
      "filename": "EvalSelection.zip",
      "script_version": "0.14",
      "date": "2005-06-14",
      "vim_version": "6.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "Fixed some menu-related problems; <LocalLeader>r shortkey for SPSS  andR (work similarly to ctrl-r in the spss editor); display a more usefulerror message when communication via OLE goes wrong; possibility to savethe interaction log; post setup & tear down hooks for externalinterpreters"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3873",
      "filename": "EvalSelection.zip",
      "script_version": "0.13",
      "date": "2005-02-16",
      "vim_version": "6.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "R: set working directory and load .Rdata if available, word completion, catch errors, build objects menu; SPSS: show data window, build menu; g:evalSelectionLogCommands defaults to 1; revamped log"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3861",
      "filename": "EvalSelection.zip",
      "script_version": "0.10",
      "date": "2005-02-13",
      "vim_version": "6.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "capture interaction with R via R(D)COM; \"RDCOM\" uses a 2nd instance of gvim as a pager (it doesn't start RCmdr any more); \"RDCOM Commander\" uses RCmdr; \"RDCOM Clean\" and \"RDCOM Commander Clean\" modes; take care of R functions with void results (like data, help.search ...)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3857",
      "filename": "EvalSelection.zip",
      "script_version": "0.9",
      "date": "2005-02-12",
      "vim_version": "6.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "support for interaction with R and SPSS via win32 COM/OLE; calculator shortcuts"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2997",
      "filename": "EvalSelection.zip",
      "script_version": "0.8",
      "date": "2004-05-06",
      "vim_version": "6.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "improved interaction with external interpreters (still not fully usable but it's getting better); reunified EvalSelection.vim and EvalSelectionRuby.vim"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2990",
      "filename": "EvalSelection.zip",
      "script_version": "0.7",
      "date": "2004-05-03",
      "vim_version": "6.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "Small improvements with external interpreters (e.g., multi-line commands in R); moved code depending on +ruby to EvalSelectionRuby.vim (thanks to Grant  Bowman for pointing out this problem); saved all files in unix  format; added python, perl, and tcl (but I can't tell if they work)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2819",
      "filename": "EvalSelection.vim",
      "script_version": "0.6",
      "date": "2004-03-09",
      "vim_version": "6.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "Use of redir; EvalSelectionCmdLine (CLI-like interaction); interaction with external interpreter (lisp, scheme, R, ocaml; experimental & requires +ruby support); separated logs; removed bc support"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2700",
      "filename": "EvalSelection.vim",
      "script_version": "0.382",
      "date": "2004-01-31",
      "vim_version": "6.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "l-Mode for logging"
    }
  ]
}
