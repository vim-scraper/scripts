{
  "script_id": "1494",
  "display_name": "Efficient python folding",
  "summary": "Fold python code nicely and toggle with one keystroke",
  "name": "Efficient-python-folding",
  "script_type": "ftplugin",
  "description": "Folding goes like this:\n\n1. Only top level class or function definitions are folded (no nesting)\n2. Folding is done one line after the class or function definition, so\n    for example the line 'class foo( bar )' is right above the fold\n3. Fold text is the first line of the corresponding docstring (if any)\n    together with the number of folded lines\n4. Toggle all folds on/off with the key F\n5. Toggle the fold under the cursor on/off with the key f\n6. In some rare cases folding can break down which can be fixed by :call ReFold()\n    The reason for this break down is not known sometimes it happens when jumping\n    between different files using tags.\n\nIn addition the script binds the key <Shift-e> (hint: _e_xecute) to saving the file and executing it in the interpreter assuming that /usr/bin/env exists otherwise you need to change this key mapping slightly. The keys 'gd' (hint: _g_o _d_efinition) are also bound to look for the definition of a function under the cursor similarly to the same key binding for C.\n\nInspired by vimscript #515, actually the way the number of lines are displayed is stolen from there :). A related script is vimscript #781 and a tip on toggling a fold is vimtip #108.\n\nThe content of the script is this, in case you find it more convenient to copy/paste it than downloading:\n\n\" Only do this when not done yet for this buffer\nif exists(\"b:did_ftplugin\")\nfinish\nendif\nlet b:did_ftplugin = 1\n\nmap <buffer> <S-e> :w<CR>:!/usr/bin/env python % <CR>\nmap <buffer> gd /def <C-R><C-W><CR> \n\nset foldmethod=expr\nset foldexpr=PythonFoldExpr(v:lnum)\nset foldtext=PythonFoldText()\n\nmap <buffer> f za\nmap <buffer> F :call ToggleFold()<CR>\nlet b:folded = 1\n\nfunction! ToggleFold()\n    if( b:folded == 0 )\n        exec \"normal! zM\"\n        let b:folded = 1\n    else\n        exec \"normal! zR\"\n        let b:folded = 0\n    endif\nendfunction\n\nfunction! PythonFoldText()\n    let size = 1 + v:foldend - v:foldstart\n    if size < 10\n        let size = \" \" . size\n    endif\n    if size < 100\n        let size = \" \" . size\n    endif\n    if size < 1000\n        let size = \" \" . size\n    endif\n    \n    if match(getline(v:foldstart), '\"\"\"') >= 0\n        let text = substitute(getline(v:foldstart), '\"\"\"', '', 'g' ) . ' '\n    elseif match(getline(v:foldstart), \"'''\") >= 0\n        let text = substitute(getline(v:foldstart), \"'''\", '', 'g' ) . ' '\n    else\n        let text = getline(v:foldstart)\n    endif\n    \n    return size . ' lines:'. text . ' '\nendfunction\n\nfunction! PythonFoldExpr(lnum)\n    if indent( nextnonblank(a:lnum) ) == 0\n        return 0\n    endif\n    \n    if getline(a:lnum-1) =~ '^\\(class\\|def\\)\\s'\n        return 1\n    endif\n        \n    if getline(a:lnum) =~ '^\\s*$'\n        return \"=\"\n    endif\n    \n    if indent(a:lnum) == 0\n        return 0\n    endif\n\n    return '='\nendfunction\n\n\" In case folding breaks down\nfunction! ReFold()\n    set foldmethod=expr\n    set foldexpr=0\n    set foldnestmax=1\n    set foldmethod=expr\n    set foldexpr=PythonFoldExpr(v:lnum)\n    set foldtext=PythonFoldText()\n    echo \nendfunction\n\n",
  "rating_total": "84",
  "rating_votes": "35",
  "downloads": "2867",
  "install_details": "Drop the file in your .vim/ftplugin/ directory (in case you already have a file there called python_editing.vim, don't forget to change the name).",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=5492",
      "filename": "python_editing.vim",
      "script_version": "1.1",
      "date": "2006-03-28",
      "vim_version": "6.0",
      "author": {
        "user_id": "9623",
        "user_name": "nogradi",
        "first_name": "Daniel",
        "last_name": "Nogradi",
        "email": "nogradi at gmail.com",
        "homepage": ""
      },
      "release_notes": "Recognizes both double quoted (\"\"\") and single quoted (''') docstrings.\nAdded a function to fix folding if it breaks down for some reason."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=5424",
      "filename": "python_editing.vim",
      "script_version": "1.0",
      "date": "2006-03-13",
      "vim_version": "6.0",
      "author": {
        "user_id": "9623",
        "user_name": "nogradi",
        "first_name": "Daniel",
        "last_name": "Nogradi",
        "email": "nogradi at gmail.com",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
