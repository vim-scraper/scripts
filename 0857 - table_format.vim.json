{
  "script_id": "857",
  "display_name": "table_format.vim",
  "summary": "Formatting utility to arrange text into neat columns",
  "name": "table_format.vim",
  "script_type": "utility",
  "description": "The plugin script table_format.vim is a text formatting tool.  It\narranges words or groups of words on consecutive lines into a neatly\nformatted table.\n\nThere are two keyboard shortcuts defined: \\t and \\T.  Each work\nslightly differently.\n\n- \\t (lowercase 't') is referred to as a mode 0 table command.  This\n  means that words separated by a single space are arranged into\n  columns padded with one or more spaces.\n\n- \\T (uppercase 'T') is referred to as a mode 1 table command.  Here\n  fields consist of groups of words separated by one space.  The field\n  boundaries are sequences of two or more spaces.  After formatting\n  into a table, the padding between fields (groups of words) is three\n  of more spaces.\n\n- The \\t and \\T (specifically <Leader>t and <Leader>T) mappings exist\n  for normal and visual mode.  In normal mode the range to be made\n  into a table is from the current line (cursor position) until the\n  next paragraph break (ie blank line).\n\n- For visual mode table formatting works for both linewise visual and\n  blockwise visual modes.  First highlight the text in visual mode\n  with 'V' then movement (linewise visual) or '<c-v>' or '<c-q> then\n  movement (blockwise visual) and then type <Leader>t or <Leader>T (ie\n  \\t or \\T)\n\n- The \\t and \\T mappings utilize the vim mapleader variable.  For\n  example, if mapleader=',', then the mappings in table_format.vim are\n  ,t and ,T\n\n- The one-space/one-padding for mode 0 and two-space/three-padding for\n  mode 1 are defaults and can be overridden.\n\n- The internal table formatting functions can be called directly:\n\n    :[range]call Table(space_split, space_padding, max_field_length,\n        col_start, col_end)\n\n  All of the parameters are optional.\n\n    space_split\n        - The number of consecutive spaces that indicate a column\n          boundary\n        - default: 1\n\n    space_padding\n        - The minimum number of spaces that are placed in between\n          fields after formatting to make a column boundary.\n        - default: 1\n\n    max_field_length\n        - The maximum length of a field (word or group of words).  A\n          value of 0 (the default) means that a field can be any\n          length\n        - default: 0\n\n    col_start\n        - The beginning column position for formatting.  A value of 0\n          (the default) means to start at the beginning of the line.\n        - default: 0\n\n    col_end\n        - The end column position for formatting.  A value of 0 (the\n          default) means to format through the end of the line.\n        - default: 0\n\n    There is an alternate version of the above function where the\n    range can be passed in directly:\n\n    :call TableRange(firstline, lastline, space_split, space_padding,\n        max_field_length, col_start, col_end)\n",
  "rating_total": "31",
  "rating_votes": "10",
  "downloads": "1185",
  "install_details": "To install place table_format.vim into your vim plugin directory.\n",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2594",
      "filename": "table_format.vim",
      "script_version": "1.0",
      "date": "2003-12-14",
      "vim_version": "6.0",
      "author": {
        "user_id": "4019",
        "user_name": "mgraz",
        "first_name": "Michael",
        "last_name": "Graz",
        "email": "mgraz.vim at plan10.com",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
