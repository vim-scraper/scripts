{
  "script_id": "3561",
  "display_name": "Table Helper",
  "summary": "Utility to help in the creation of tables of data",
  "name": "Table-Helper",
  "script_type": "utility",
  "description": "Version 1.0:\n\nInitial version.\n\nThis plugin helps with aligning text in columns, making the creation of tables easier. The process is simple:\n\n1. Manually lay out one line of the table (the header, for example) and execute the command Gettabstopsfromcurrentline (there is a hotkey, in case you do this\noften) to have it parse the line and save the column definitions (per buffer).\n\n2. Go to any other lines that are supposed to be in the table and either hit the hotkey on them one by one or visually select a range and hit the hotkey and\nthey will all get realigned to match the header row.\n\nCaveat: these example may look horribly aligned if viewed with a proportional font.\n\nFor example, given these three rows of text:\n\nFirst name            Last name               Age\n------  -----  -----\nJohn   Smith   28\nJane             Doe          32\n\nIf the first line is the one parsed for the columns, hitting the hotkey on the remaining lines yields:\n\nFirst name            Last name               Age\n------                -----                   -----\nJohn                  Smith                   28\nJane                  Doe                     32\n\nIf you parse the last line instead you get this:\n\nFirst name       Last name    Age\n------           -----        -----\nJohn             Smith        28\nJane             Doe          32\n\nIf you have the repeat.vim autoload plugin installed, the reformatting is repeatable on other lines.\n\nRequirements: the column text has to be separated by at least 2 spaces, both for the header line and for each line that is to be reformatted. For example:\n\nFirst name  Last name  Age\n\nDefines three columns, as does:\n\nFirst name          Last name            Age\n\nOptions:\n\ng:TableHelper_truncateLongEntries (default 0): occasionally, you might have an entry in a table that is too long (say, you allocated 10 spaces for a column in\nthe header but the text is actually 12 characters). This option determines how that is handled:\n\n- If 1, the entry gets truncated to fit. You will lose data, but the table will still line up (small price to pay!)\n\n- If 0, the entry is put in as is and allowed to comprise as many columns as needed. The rest of the text is simply aligned to the next column. You will\n  retain all your data, but will lose formatting.\n\nIn practice, you should probably leave this value at 0. If you see misalignments, adjust your header row, recalculate the column stops, visually select your\ntable and hit the hotkey and the whole thing will be realigned. If you start truncating fields, your only recourse will be the undo (u) key. (I only put this\noption in at all because it was fairly easy to implement the truncation!)\n\ng:TableHelper_columnMargin (default 2): how much space must there be between the end of one column's text and the start of the next before it's considered too\nlong a column. Typically, you have to have some space between adjacent columns (or else, how can you tell where one column ends and the next begins). For\nexample, if your header row and first row of data look like this:\n\nFName    LName  Age\nJonathan  Smythe  28\n\nDuring reformat, the first column will be considered too long because there wouldn't be 2 spaces between Jonathan and Smythe (assuming\ng:TableHelper_columnMargin is set to 2--you can set it higher to get more space between columns). Thus, if you have truncation enabled\n(g:TableHelper_truncateLongEntries is 1), you'll get this:\n\nFName    LName  Age\nJonatha  Smyth  28\n\nAs it happens, the last name was too long, also. If you don't have truncation enabled, you get this:\n\nFName    LName  Age\nJonathan        Smythe  28\n\n\"Smythe\" simply gets pushed under the next available column and then, since the number of header columns runs out, subsequent columns of text are simply\nplaced as is, separated by g:TableHelper_columnMargin spaces.\n\nThis plugin requires at least two spaces between columns to be able to recognize them as distinct columns, so a value less than 2, while supported, will\nseriously jeopardize any attempts to reformat the table as all the text will run together (try setting it to 0...). If someone complains, I can force 2 as the\nminimum.\n\nIf you have my getVar.vim, then you can set these options on a per window, buffer or tab basis, also. (otherwise, only on a global basis).\n\nCommands:\n\nGettabstopsfromcurrentline: parses the current line for columns; probably best to call this from your header line, though you could also call it from the\nlongest line in your table (and then use the alignment hotkey to have the header conform to this, also).\n\nRetabline: Reformats the specified lines (visually selected or the current line) so they conform the previously specified header line.\n\nShowtabstops: Displays the list of tab stops currently defined, if any.\n\nMappings:\n\n<Plug>TableHelper_Gettabstopsfromcurrentline: executes Gettabstopsfromcurrentline (defaults to <leader><c-t>)\n\n<Plug>TableHelper_Retabline: executes Retabline (defaults to <c-t>). May be called again after changing the truncation or column margin options to change the\nalignment of already formatted lines.\n\nThe default hotkeys may be overridden in your vimrc.\n\nTip: if you call Gettabstopsfromcurrentline on an empty line, you get no column definitions; then, when you try to reformat a line, it just ends up having the\ncolumns of text displayed in their entirety, separated by g:TableHelper_columnMargin spaces. For example, if g:TableHelper_columnMargin is 5, this line\n\nJonathan                    Smythe  28\n\nbecomes\n\nJonathan     Smythe     28\n\nThis might be useful for first laying out the longest line in the table, calling Gettabstopsfromcurrentline on it and then reformatting the entire table based\non those column markers:\n\nFName        LName      Age\n-----        -----      ---\nJonathan     Smythe     28\nJon          Smith      32\n\nVersion 2.0:\n\nWhen calling Gettabstopsfromcurrentline, the last column size is set to the larger of the value of g:TableHelper_lastColumnSize or the length of the text in\nthe last column being measured. The very last column of text isn't truncated (unless lines with more columns than measured show up), but this value is used\nwhen generating separator lines.\n\nAdded some commands:\n\nAligntable: given a range of lines (visually selected, for example), will automatically figure out the optimum layout. Takes optional arguments: the column\nalignments (see Setcolumnalignments) and the amount by which the table should be indented. (If not specified, all alignments take the defaults as specified\nfor Setcolumnalignments and the indent becomes the indentation of the first line in the range).\n\nTo specify just an indent, pass in 'l' for the first argument (that's the default and all values get left-aligned anyway).\n\nAs an example, the following table\n\nFirst name            Last name               Age\n------  -----  -----\nJohn   Smith   28\nJane             Doe          32\n\ncan be selected visually and Aligntable executed to get (with a default column margin value of 2):\n\nFirst name  Last name  Age\n------      -----      -----\nJohn        Smith      28\nJane        Doe        32\n\nExecuting with a column margin of 10, on the other hand, gives:\n\nFirst name          Last name          Age\n------              -----              -----\nJohn                Smith              28\nJane                Doe                32\n\nThe column positions used are stored (clobbering any previous calls to Gettabstopsfromcurrentline) so new lines may be added to this table and reformatted\nquickly using the standard reformatting hotkey.\n\nAddseparatorline: adds a separator line just below the current cursor line. If the tab stops are from this line\n\nFirst name          Last name          Age\n\nthen executing \"Addseparatorline\" with the cursor on the line itself gives\n\nAddseparatorline\n------------------  -----------------  ----------\n\nThe space between separators is determined by g:TableHelper_columnMargin.\n\nThe command takes these arguments, all optional (with default values):\n\nAddseparatorline [continuous=0] [separator characters=g:TableHelper_separatorCharacters]\n\nThe first argument is whether to generate a continuous line (defaults to 0) or one with breaks at the column margins:\n\nAddseparatorline 0 -=\n-=-=-=-=-=-=-=-=-=  -=-=-=-=-=-=-=-=-  -=-=-=-=-=\n\nAddseparatorline 1 -=+\n-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-\n\nAnd the second determines the separators to use for this line.\n\nAddseparatorline 1 :-\n:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:\n\nSetcolumnalignments: Takes a string consisting of an arbitrary number of 'l' (left), 'c' (center) and 'r' (right); for example, 'llrlc'. When reformatting a\nline or calling Aligntable, this value is taken into consideration for how to align the value in a particular column. Thus, 'llrlc' means that the first\ntwo columns will be left-aligned, the third will be right-aligned, and then left and, finally, the last column will be centered in the allocated space.\n\nIf the table contains more columns than specified in the alignment, the remaining columns are all left-aligned ('l'). Column values that are too long (doesn't\nhappen when Aligntable is called unless the lines are added after the fact) end up being left-aligned (or truncated, in which case they fill up the entire\ncolumn and alignment doesn't enter into it).\n\nThe alignments are stored on a per-buffer basis (just like the table column stops).\n\nNew options:\n\ng:TableHelper_lastColumnSize (default 10): used for adding separator lines; specifies the minimum length for the last column\n\ng:TableHelper_separatorCharacters (default '-'): the character string that the separator comprises; gets repeated and truncated as necessary and starts over\nevery time there is a column break (repeats continuously if no break is chosen)\n",
  "install_details": "Pop it into your plugin directory and set up the mappings and options if the defaults don't work for you.",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15521",
      "filename": "TableHelper.vim",
      "script_version": "2.0",
      "date": "2011-04-25",
      "vim_version": "7.0",
      "author": {
        "user_id": "64",
        "user_name": "hemlock8",
        "first_name": "Salman",
        "last_name": "Halim",
        "email": "salmanhalim@gmail.com",
        "homepage": ""
      },
      "release_notes": "New commands: Aligntable, Addseparatorline and Setcolumnalignments"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15513",
      "filename": "TableHelper.vim",
      "script_version": "1.0",
      "date": "2011-04-24",
      "vim_version": "7.0",
      "author": {
        "user_id": "64",
        "user_name": "hemlock8",
        "first_name": "Salman",
        "last_name": "Halim",
        "email": "salmanhalim@gmail.com",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
