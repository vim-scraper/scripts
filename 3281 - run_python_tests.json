{
  "script_id": "3281",
  "display_name": "run_python_tests",
  "summary": "Run Python unit tests asynchronously",
  "name": "run_python_tests",
  "script_type": "ftplugin",
  "description": "Run Python Tests\n\n    http://bitbucket.org/tartley/vim_run_python_tests\n\n    Vim scripts to run Python unit tests.\n\n    Only currently tested on Vim 7.2 on Windows XP.\n    \n\nDESCRIPTION\n    \n    Provides key bindings to:\n\n    <Leader>a : toggles between the Python file in the current buffer and its unit tests.\n    F4 : Toggle the quickfix window open or closed.\n    F5 : Run the Python file in the current buffer\n           (i.e. run \"python dir\\subdir\\file.py\".)\n    F6 : Find & run the unit tests of the Python file in the current buffer\n           (i.e. find the unittest module as described below, then run \n           \"python -m unittest package.subpackage.module\"\n    F7 : Run the single test method under the cursor \n            (i.e. find the name of the test method the cursor is in, find its test class name, then run\n            \"python -m unittest --verbose package.subpackage.module.class.method\")\n\n    For F5, F6, & F7, you will want to check what Vim's current directory is. This will affect the path or sequence of packages used to reference your test module. Set the current directory in Vim using the :cd command. It should be set to the same directory that you'd have to be in to execute your tests from the command-line, which is generally your project root.\n\n    All running of files or tests is done asynchronously, so you can continue using Vim while it runs. When complete, the output is read into Vim's quickfix window.\n    \n    Alternatively, pressing Shift-F5, -F6, or -F7 will run the respective command in a new text terminal, which will remain open to display the results, and will automatically re-run the command whenever it detects changes to any file in or below the current directory.\n\n    When looking for the test module that corresponds to the current file, we search in the same dir, and in a bunch of likely-named subdirectories (e.g. 'test', 'tests', 'unittest', 'unittests') for a file of an likely-sounding test name. e.g. when 'widget.py' is the current buffer, we search for 'testwidget.py', 'test_widget.py', 'widget_tests.py', etc.\n\n\nTROUBLESHOOTING\n\n    Q) When I try to run tests, I see a traceback from unittest, such as: \"ImportError: No module named X\", or \"ValueError: Attempted relative import beyond toplevel package\"\n    A) Are you sure Vim's current working directory is correct?\n\n\nPYTHON TRACEBACKS IN THE VIM QUICKFIX WINDOW\n\n    The default value of Vim's errorformat variable for working with Python only shows one entry from each traceback, which seems unhelpful to me. To fix this, you can create a file ~/.vim/compiler/pyunit, which contains just:\n\n        CompilerSet efm=\\%A\\ \\ File\\ \\\"%f\\\"\\\\,\\ line\\ %l\\\\,\\ %m,%C\\ %m,%Z\n\n    Now when you run the ':compiler pyunit' command (as run_python_tests does whenever you press F5, F6, or F7), Vim's quickfix window will display all the entries in each traceback.\n\n\nTODO\n\n    * Make it all work on Linux\n    * Instead of printing out status messages, can we prepend them to the output in the quickfix window?\n\n\nTHANKS\n\n    Pretty much all of this is stolen from various existing scripts at vim.org, or from my awesome colleagues at Resolver Systems.\n\n\nCONTACT\n\n    I know nothing about Vim scripting, so I'd love to hear about it if you have problems with this script, or ideas on how it could be better.\n\n    Jonathan Hartley, tartley@tartley.com\n",
  "rating_total": "4",
  "rating_votes": "1",
  "downloads": "14",
  "install_details": "    Unzip into your ~/.vim folder. It should provide:\n\n    ~/.vim\n        |-ftplugin\n           |-python\n              |-run_python_tests.vim\n              |-run_python_tests\n                 |-a bunch of files in here, including:\n                 |-README.txt\n\nIt defines some vimscript and Python functions, and then binds some keys to them.\n",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=14067",
      "filename": "run_python_tests_0.1.zip",
      "script_version": "0.1",
      "date": "2010-10-17",
      "vim_version": "7.2",
      "author": {
        "user_id": "14716",
        "user_name": "tartley",
        "first_name": "jonathan",
        "last_name": "hartley",
        "email": "tartley at tartley.com",
        "homepage": "http://tartley.com"
      },
      "release_notes": "Initial upload"
    }
  ]
}
