{
  "script_id": "2330",
  "name": "log.vim",
  "summary": "logging library",
  "script_type": "utility",
  "description": "Usage:\n  \" in .vimrc\n  call log#init('ALL', ['/dev/stdout', '~/.vim/log.txt'])\n\n  \" in script\n  let s:log = log#getLogger(expand('<sfile>:t'))\n\n  function s:func()\n    call s:log.trace('start of func()')\n    if s:log.isDebugEnabled()\n      call s:log.debug('debug information')\n    endif\n    call s:log.trace('end of func()')\n  endfunction\n\n  \" If you want to distribute your script without log.vim, use :silent! or\n  \" exists().\n  silent! let s:log = log#getLogger(expand('<sfile>:t'))\n  function s:func()\n    silent! call s:log.info('aaa')\n    if exists('s:log')\n      call s:log.info('bbb')\n    endif\n  endfunction\n\nReference:\n\n  function log#init(level, targets [, format [, filter]])\n  @param level [String]\n    Log level.  One of 'ALL|TRACE|DEBUG|INFO|WARN|ERROR|FATAL|NONE'.\n    For example, when level is 'WARN', output of log.warn(), log.error() and\n    log.fatal() will appear in log.\n  @param targets [mixed]\n    Output target.  Filename or Function or Dictionary or List of these\n    values.\n    Filename:\n      Log is appended to the file.\n    Function:\n      function Log(str)\n        echo a:str\n      endfunction\n    Dictionary:\n      let Log = {}\n      function Log.__call__(str)\n        echohl Error\n        echo a:str\n        echohl None\n      endfunction\n  @param format [String]\n    Log format.  {expr} is replaced by eval(expr).  For example, {getpid()}\n    is useful to detect session.  Following special variables are available.\n    {level}   log level like DEBUG, INFO, etc...\n    {name}    log name specified by log#getLogger(name)\n    {msg}     log message\n    If this is 0, '', [] or {} (empty(format) is true), default is used.\n    default:  [{level}][{strftime(\"%Y-%m-%d %H:%M:%S\")}][{name}] {msg}\n  @param filter [mixed]\n    Pattern (String) or Function or Dictionary to filter log session.\n    Filter is applied to name that specified by log#getLogger(name).  If\n    result is false, logging session do not output any text.\n    Pattern (String):\n      name =~ Pattern\n    Function:\n      function Filter(name)\n        return a:name == 'mylib'\n      endfunction\n    Dictionary:\n      let Filter = {}\n      let Filter.filter = ['alib', 'blib', 'clib']\n      function Filter.__call__(name)\n        return index(self.filter, a:name) != -1\n      endfunction\n  @return void\n\n  function log#getLogger(name)\n  @param name [String] Log name\n  @return Logger object",
  "rating_total": "8",
  "rating_votes": "2",
  "downloads": "186",
  "install_details": "Put this file in autoload directory in your 'runtimepath'.",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=9075",
      "filename": "log.vim",
      "script_version": "1.0",
      "date": "2008-08-05",
      "vim_version": "7.0",
      "author": {
        "user_id": "11226",
        "user_name": "yukihiro",
        "first_name": "Yukihiro",
        "last_name": "Nakadaira",
        "email": "yukihiro.nakadaira at gmail.com",
        "homepage": "http://yukihiro.nakadaira.googlepages.com/"
      },
      "release_notes": "Initial upload"
    }
  ]
}