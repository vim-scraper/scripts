{
  "script_id": "1106",
  "name": "java_src_link.vim",
  "summary": "effective searching of src files for children, impls, tests, return values, args",
  "script_type": "ftplugin",
  "description": "\"   Filetype plugin for java that allows you to jump to\n\"   another java src file by searching your configured\n\"   src path for the class name under the cursor.\n\"\n\"   For a given class name, supports finding children of it, implementations\n\"   of it, methods that return it, methods that take it as an argument, test\n\"   cases for it, or all references of it.\n\"\n\" Platform:\n\"   This plugin uses the system find and grep commands extensively,\n\"   so if you are having issues, it's probably due to incompatibility\n\"   with one of those.  You can take a look at s:find_cmd, s:content_grep,\n\"   and s:*_regex variables to see if they can be modified to suit your\n\"   system.\n\"\n\"   If you find that you do have to modify any of these, feel free to\n\"   send me your changes, and I will see if they are compatable or make\n\"   alternate configurations available for users to choose from.\n\"\n\"   All my testing was done with\n\"     GNU find version 4.1.20\n\"     GNU grep version 2.5.1\n\"\n\"   Linux:\n\"     All testing has been done on linux so various flavors of linux\n\"     should be supported (as well as other *nix systems).\n\"\n\"   Windows:\n\"     Works in conjunction with cygwin_utils.vim plugin.\n\"     Make sure to read the Description comments in cygwin_utils.vim for\n\"     configuration instructions and other notes.\n\"\n\"     Note: I've found that the 'find' command runs considerably\n\"     slower on Windows enviroments.  So if you have serveral\n\"     paths in you g:JavaSrcPaths variable, then searching may\n\"     be a bit slow.\n\"\n\" Usage:\n\"   When editing a java file the following commands are created\n\"    :FindSrc\n\"    :FindImpl\n\"    :FindChildren\n\"    :ContextualFindSrc\n\"    :FindTest\n\"    :FindArgument\n\"    :FindReturned\n\"    :FindReferenced\n\"\n\"   FindSrc: will search for the src file for the class name under the\n\"   cursor and execute the configured g:JavaSrcCmd on it (unless\n\"   g:JavaSrcUseGrep is set to 1), which could do any number of\n\"   things such as edit, argadd, split, etc.\n\"\n\"   FindImpl: behaves just like FindSrc, except instead of searching for\n\"   the class name under the cursor, it searches for classes that\n\"   implement that class.\n\"\n\"   FindChildren: behaves just like FindSrc, except instead of searching\n\"   for the class name under the cursor, it searches for classes that\n\"   extend that class.\n\"\n\"   ContextualFindSrc: is a convenience command that decides which of the\n\"   above commands to execute (FindSrc, FindImpl, or FindChildren) based\n\"   on your position in the file.\n\"   - If you are on the class declaration line (public class Foo), then\n\"     it will execute FindChildren.\n\"   - If you are on the interface declaration line (public interface Foo),\n\"     then it will execute FindImpl.\n\"   - Any where else in the file, FindSrc will be executed.\n\"\n\"   FindTest: behaves like FindSrc, except instead of searching\n\"   for the class name under the cursor, it searches for the test\n\"   case src file for the class.\n\"     This command assumes that test case src files follow the junit\n\"     naming conventions of \"<classname>Test.java\" where the <classname>\n\"     is the name of the class under the cursor.\n\"\n\"   FindArgument: behaves like FindSrc, except instead of searching\n\"   for the class name under the cursor, it searches for all src files\n\"   that have a method that takes as an argument, that class.\n\"\n\"   FindReturned: behaves like FindSrc, except instead of searching\n\"   for the class name under the cursor, it searches for all src files\n\"   that have a method that returns that class.\n\"\n\"   FindReferenced: behaves like FindSrc, except instead of searching\n\"   for the class name under the cursor, it searches for all src files\n\"   that reference that class.\n\"\n\"   Note: All of the above commands (with the exception of ContextualFindSrc)\n\"   can also be invoked with an argument.\n\"     Ex.\n\"       FindSrc org.bar.Foo\n\"   This will invoke the command so it searches for the class name provided\n\"   rather than the one under the cursor.  You may use fully qualified\n\"   (org.bar.Foo) or un-qualified (Foo) class names.\n\"\n\"   Note: All of these find commands will attempt to filter out\n\"   results that reference a different class that has the same\n\"   class name as the one to search for.  It does this by attempting\n\"   to locate the package name of the class to search for.\n\"\n\"     For example: If you have two classes with the name Foo\n\"     one in com.bar.Foo and the other in com.bar.baz.Foo, and you\n\"     start a search for the class Foo, then this plugin will attempt\n\"     to determine which Foo you are searching for.\n\"\n\"     If you are editing one of the Foo classes, and you initiated the\n\"     search with the cursor on the class declaration (public class Foo),\n\"     then the package (package com.bar;)  declaration of the file will\n\"     be used to narrow the results to the correct Foo class.\n\"\n\"     If you are in another file (say Bar.java) and you start a search\n\"     for Foo, then the plugin will look to see if you used the fully\n\"     qualified class name (com.bar.Foo) or if you imported the class\n\"     (import com.bar.Foo;).  If you did either then the package name\n\"     will be grabbed from there.  If you have done neither, then the\n\"     plugin will return results for all Foo occurances regardless\n\"     of package name.\n\"\n\"     So the moral of the story is, that if you want accurate results\n\"     you should get in the habit of importing each class seperately\n\"     and avoiding the * imports (import com.bar.*;).  This is a good\n\"     habit anyways, that makes your code easier to read, navigate, and\n\"     understand by others.\n\"\n\" Configuration:\n\"   The following describes the global variables you can set in\n\"   your vimrc to change the behavior of this plugin.\n\"\n\"     g:JavaSrcPaths\n\"       No default.  Use this variable to set a comma seperated list\n\"       of the paths you wish to have searched. Each path should be\n\"       the parent directory of where your package structure begins.\n\"       So for /a/path/src/java/org/acme/, assumming packages begin\n\"       as org, you would use /a/path/src/java as the path to search.\n\"\n\"       Ex.  let g:JavaSrcPaths=\n\"              \\ \"/a/path/src/java,\" .\n\"              \\ \"/another/path/src/java\"\n\"\n\"     g:JavaSrcTestPaths\n\"       No default. Same as g:JavaSrcPaths but used by FindTest to\n\"       locate unit testing src files.\n\"\n\"     g:JavaSrcShowResults\n\"       Defaults to 0.  When set to 1, the Find commands will open\n\"       a small preview window when multiple results have been found.\n\"       In that window you can hit <enter> on the file you wish\n\"       to open or use 'A' to load all results into the arg list.\n\"\n\"       Ex. let g:JavaSrcShowResults=1\n\"\n\"     g:JavaSrcUseGrep\n\"       Defaults to 1.  When set to 1, the Find commands will use vim's\n\"       :grep command to grep the results so that results can be\n\"       navigated through using the quickfix command :cnext :cprev\n\"       :copen, etc.\n\"       Note: When g:JavaSrcShowResults is set, then grep is not used\n\"             regardless of whether g:JavaSrcUseGrep is set or not.\n\"\n\"       Ex. let g:JavaSrcUseGrep=1\n\"\n\"       Use\n\"         :help quickfix.txt\n\"       to get more info on how grep and the quickfix paradigm works.\n\"\n\"     Note: When both g:JavaSrcShowResults and g:JavaSrcUseGrep are set\n\"           to 0, then the g:JavaSrcCmd is executed on all files found\n\"           with no preview or quickfix window.\n\"\n\"     g:JavaSrcCwindow\n\"       Defaults to 1.  Used to determine whether or not to execute\n\"       :cwindow to open the grep results after searching.  If set\n\"       to 1, the window will be opened after every Find command.\n\"       If set to 0, the window will remain closed and you can open\n\"       it manually.\n\"       Note:  Only used when g:JavaSrcUseGrep is set to 1 and\n\"              g:JavaSrcShowResults is set to 0.\n\"\n\"       Ex. let g:JavaSrcCwindow=1\n\"\n\"     g:JavaSrcCmd\n\"       Defaults to \"split <file>\".  Use this variable to set the\n\"       command you wish to be invoked when using :Find* commands.\n\"       The \"<file>\" will be replace with the file to open.\n\"       Note: When g:JavaSrcShowResults is set to 0 and\n\"             g:JavaSrcUseGrep is set to 1, this variable is not\n\"             used.  Instead the quickfix commands are used.\n\"\n\"       Ex. let g:JavaSrcCmd=\"topleft split <file>\"\n\"       Ex. let g:JavaSrcCmd=\"argedit <file>\"\n\"       Ex. let g:JavaSrcCmd=\"call g:MyOpenFile(<file>)\"\n\"\n\" Command Mapping:\n\"   You may find it easier to map a command to something more convenient.\n\"   For example, here is my mapping that allows me to simply hit\n\"   <enter> on a class name to have it search for results based on the\n\"   context (as described above).\n\"\n\"     autocmd FileType java map <silent> <buffer> <cr> :ContextualFindSrc<cr>\n\"\n\" Limitations:\n\"   - FindChildren and FindImpl are limited to examining class names\n\"     that follow \"extends\" | \"implements\" on the same line.  So src files\n\"     that put each class on it's own line or wrap long extends / implements\n\"     statements may not be found.\n\"     This is a limitation of grep, which is used to find the files.\n\"     This could be solved by further examining the contents of src files\n\"     but would have a big impact on performance.\n\"   - FindReturned only searches for methods with \"public\" | \"private\" |\n\"     \"protected\" so as not to grab too many files.  Also the scope identifier\n\"     must appear on the same line as the class name.\n\"     As with the limitation on FindChildren and FileImpl, this is due to\n\"     grep examining the files one line at a time, which prevents examining\n\"     other lines to determine any sort of context.\n\"\n\" Todo:\n\"   - Extend beyond class based searching and add method and field based\n\"     searches (fields should be easy, methods could be hard to get reliable\n\"     results).\n",
  "rating_total": "4",
  "rating_votes": "1",
  "downloads": "659",
  "install_details": "Put java_src_link.vim into your ftplugin directory.\n\nWindows users will need cygwin_utils.vim (vimscript #1150)",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3685",
      "filename": "java_src_link.vim",
      "script_version": "0.4",
      "date": "2004-12-05",
      "vim_version": "6.0",
      "author": {
        "user_id": "6016",
        "user_name": "ervandew",
        "first_name": "Eric",
        "last_name": "Van Dewoestine",
        "email": "ervandew at gmail.com",
        "homepage": ""
      },
      "release_notes": "- Now supported on Windows platform."
    }
  ]
}
