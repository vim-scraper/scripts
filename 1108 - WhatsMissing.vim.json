{
  "script_id": "1108",
  "display_name": "WhatsMissing.vim",
  "summary": "Shows what is missing between 2 buffers",
  "name": "WhatsMissing.vim",
  "script_type": "utility",
  "description": "This plugin contains functions/commands that will cycle through one \nbuffer (the source) and compare the its contents against the contents of\nanother buffer (the target).\n\nNOTE:  This is not a poor man's 'diff', since the source and target must be \n              similar in appearance.  See example below for a better understanding.\n                                                                              \nDepending on the options specified and command chosen, it will open a split\nwindow (the result) and display either the entries that are:\n   - missing from the target buffer\n   or\n   - contained in both buffers\n   \nThe plugin has created a menu, Plugin->WhatMissing.  There are two entries: \n    WhatsMissing\n    WhatsNotMissing\n\nThese menu items are also available in visual mode.  These menu items simply call the commands: \n    :WhatsMissing\n    :WhatsNotMissing\n\nThe behavior of whatsmissing.vim are governed by several options. Options can be specified using the WMSetOption command.  As mentioned above, the <Tab> button can be used for both option name and option value completion.\n                                                                            \nYou can check the value of a specific option by: \n    :WMGetOption option_name\n \nHere are the various options: \n   mode  \n       - Values: \"word\" or \"line\".  \n       - WhatsMissing will move through the source buffer one |word| at a\n         time, and checks this value against the target buffer.  It will \n         also automatically escape the following characters: \n               '\\\\/.*$^~[]'\n         If the \"line\" mode is chosen the comparison between the source \n         and target buffer is performed a line at a time. \n                                                                            \n   ignore_case \n       - Values: \"0\" or \"1\".  \n       - The \"default\" for WhatsMissing is to use the |'ignorecase'| option\n         of the target buffer.  Otherwise the user is allowed to override\n         it. \n                                                                            \n   ignore_whitespace\n       - Values: \"0\" or \"1\".  \n       - If in \"line\" mode, you can choose to ignore leading and trailing\n         whitespace for the comparison. \n\n\nExample\n------------\nConsider the case where you are maintaining a Vim syntax file.  It has entries like this:\n*************\nsyn keyword sqlFunction\tcount sum avg min max debug_eng isnull\nsyn keyword sqlFunction\tgreater lesser argn string ymd todate\nsyn keyword sqlFunction sp_addalias\nsyn keyword sqlFunction sp_addauditrecord\nsyn keyword sqlKeyword\treplicate rereceive resend reset\nsyn keyword sqlKeyword\tresolve resource respect\nsyn keyword sqlKeyword\trestrict result retain\nsyn keyword sqlStatement allocate alter backup begin call case\nsyn keyword sqlStatement checkpoint clear close commit configure connect\nsyn keyword sqlStatement create deallocate declare delete describe\nsyn keyword sqlType\tchar long varchar text\nsyn keyword sqlType\tbigint decimal double float int integer numeric \n*************\n\nIn order to create the syntax file in the first place you had to find the above words from somewhere.  In this case, I simply used grep against the source code to find various API method names, keywords, functions and so on.\n\nSo in the end after running grep repeatedly and massaging the output, I end up with a file like this:\n**************\nabs\nabsolute\naction\nactiv\nexpanded\nexperience_estimate\nexplanation\nexplicit\nexpress\nexprtype\nremainder\nremote\nremove\nrename\nreorganize\nreplicate \nrereceive \nresend \nreset\nvalue\nvalues\nvarbinary\nvarchar\nvarexists\n**************\n\nAt this point you want to update your Vim syntax file to include all the new method names, keywords, functions and so on that are missing from the existing syntax file.\n\nYou cannot run Diff against this, since the lines are completely different, you need to compare the words.\n\nAfter running :WhatsMissing, you end up with a split buffer showing:\n***************\n(19 of 24) items missing from: syntax.vim\n----------\nabs\nabsolute\naction\nactiv\nexpanded\nexperience_estimate\nexplanation\nexplicit\nexpress\nexprtype\nremainder\nremote\nremove\nrename\nreorganize\nvalue\nvalues\nvarbinary\nvarexists\n----------\nWMOptions:\nmode=word ignore_case=  ignore_whitespace=0\n***************",
  "rating_total": "1",
  "rating_votes": "1",
  "downloads": "490",
  "install_details": "You can use this script as a plugin by copying it to your plugin directory. \nSee |add-global-plugin| for instructions.\n\nYou can also |:source| it from your |.vimrc|.\n                                                                             \nTo install this help file |add-local-help| inside Vim.\n\t:help add-local-help\n       :helptags $VIM/vimfiles/doc (Windows)\n       :helptags $VIM/.vim/doc     (Unix)\n",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3557",
      "filename": "WhatsMissing.zip",
      "script_version": "1.0",
      "date": "2004-10-17",
      "vim_version": "6.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "Documentation and GetLastestVimScripts support"
    }
  ]
}
