{
  "script_id": "2830",
  "display_name": "csv.vim",
  "summary": "A Filetype plugin for csv files.",
  "name": "csv.vim",
  "script_type": "ftplugin",
  "description": "This is a filetype plugin for CSV files. It was heavily influenced by the Vim\nWiki Tip667 (http://vim.wikia.com/wiki/VimTip667), though it works\ndifferently.\n\nSee a Screencast of the plugin here: http://www.256bit.org/~chrisbra/csv.gif\n\nPlease vote for the plugin, if you like it!\n\nThis is a filetype plugin for CSV files. It was heavily influenced by\nthe Vim Wiki Tip667 (http://vim.wikia.com/wiki/VimTip667), though it\nworks differently. For instructions on installing this file, type\n:help add-local-help |add-local-help| inside Vim.\n\n                                                           *csv-toc*\n1. Installation.................................|csv-installation|\n2. CSV Commands.................................|csv-commands|\n    2.1 WhatColumn..............................|WhatColumn_CSV|\n    2.2 NrColumns...............................|NrColumns_CSV|\n    2.3 SearchInColumn..........................|SearchInColumn_CSV|\n    2.4 HiColumn................................|HiColumn_CSV|\n    2.5 ArrangeColumn...........................|ArrangeColumn_CSV|\n    2.6 DeleteColumn............................|DeleteColumn_CSV|\n    2.7 InitCSV.................................|InitCSV|\n    2.8 Header..................................|Header_CSV|\n    2.9 Sort....................................|Sort_CSV|\n    2.10 CopyColumn.............................|Copy_CSV|\n    2.11 Normal mode commands...................|csv-motion|\n3. CSV Filetype configuration...................|csv-configuration|\n    3.1 Delimiter...............................|csv-delimiter|\n    3.2 Column..................................|csv-column|\n    3.3 HiGroup.................................|csv-higroup|\n    3.4 Strict Columns..........................|csv-strict|\n    3.5 Multibyte Chars.........................|csv-mbyte|\n    3.6 Concealing..............................|csv-conceal|\n    3.7 Newlines................................|csv-newline|\n4. CSV Tips and Tricks..........................|csv-tips|\n    4.1 Statusline..............................|csv-stl|\n    4.2 Slow ArrangeCol.........................|csv-slow|\n5. CSV Changelog................................|csv-changelog|\n\n==============================================================================\n1. Installation\t\t\t\t\t\t*csv-installation*\n\nIn order to have vim automatically detect csv files, you need to have\n|ftplugins| enabled (e.g. by having this line in your |.vimrc| file: >\n\n   :filetype plugin on\n\n<\nThe plugin already sets up some logic, to detect CSV files. By default,\nthe plugin recognizes *.csv and *.dat files as csv filetype. In order that the\ncsv filetype plugin is loaded correctly, vim needs to be enabled to load\n|filetype-plugins|. This can be ensured, by putting a line like this into your\n|.vimrc|: >\n    :filetype plugin on\n<\n(see also |filetype-plugin-on|).\n\nIn case this did not work, you need to setup vim like this:\n\nTo have Vim automatically detect csv files, you need to do the following.\n\n   1) Create your user runtime directory if you do not have one yet. This \n      directory needs to be in your 'runtime' path. In Unix this would\n      typically the ~/.vim directory, while in Windows this is usually your\n      ~/vimfiles directory. Use :echo expand(\"~\") to find out, what Vim thinks\n      your user directory is. \n      To create this directory, you can do: >\n\n      :!mkdir ~/.vim \n<\n      for Unix and >\n\n      :!mkdir ~/vimfiles \n<\n      for Windows.\n\n   2) In that directory you create a file that will detect csv files. >\n\n    if exists(\"did_load_csvfiletype\")\n      finish\n    endif\n    let did_load_csvfiletype=1\n\n    augroup filetypedetect\n      au! BufRead,BufNewFile *.csv,*.dat\tsetfiletype csv\n    augroup END\n<\n      You save this file as \"filetype.vim\" in your user runtime diretory: >\n\n        :w ~/.vim/filetype.vim\n<\n   3) To be able to use your new filetype.vim detection, you need to restart\n      Vim. Vim will then  load the csv filetype plugin for all files whose\n      names end with .csv.\n\n==============================================================================\n2. Commands\t\t\t\t\t\t\t*csv-commands*\n\nThe CSV ftplugin provides several Commands:\n\n2.1 WhatColumn                                                *WhatColumn_CSV*\n--------------\n\nIf you would like to know, on which column the cursor is, use >\n    :WhatColumn\n<\n\n2.2 NrColumns                                                 *NrColumns_CSV*\n--------------\n\n:NrColumns outputs the maximum number of columns available. It does this by\ntesting the first 10 lines for the number of columns. This usually should be\nenough.\n\n2.3 SearchInColumn                                          *SearchInColumn_CSV*\n------------------\n\nUse :SearchInColumn to search for a pattern within a specific column. The\nusage is: >\n    :SearchInColumn [<nr>] /{pat}/\n<\n\nSo if you would like to search in Column 1 for the word foobar, you enter >\n\n    :SearchInColumn 1 /foobar/\n\nInstead of / as delimiter, you can use any other delimiter you like. If you\ndon't enter a column, the current column will be used.\n\n2.4 HiColumn                                                    *HiColumn_CSV*\n------------\n\n:HiColumn <nr> can be used to highlight Column <nr>. Currently the plugin uses\nthe WildMenu Highlight Group. If you would like to change this, you need to\ndefine the variable |g:csv_hiGroup|.\nIf you do not specify a <nr>, HiColumn will hilight the column on which the\ncursor is. Use >\n    :HiColumn!\nto remove any highlighting.\n\n2.5 ArrangeColumn                                          *ArrangeColumn_CSV*\n-----------------\n\nIf you would like all columns to be visually arranged, you can use the >\n    :ArrangeColumn\n\ncommand. Beware, that this will change your file and depending\non the size of your file may slow down Vim significantly. This is highly\nexperimental.\n:ArrangeCommand will try to vertically align all columns by their maximum\ncolumn size. Note, this can be very slow on large files or many columns (see\n|csv-slow| on how to increase performance for this command).\nTo prevent you from accidently changing your csv file, the buffer will be set\n'readonly' afterwards.\n\n2.6 DeleteColumn                                           *DeleteColumn_CSV*\n----------------\n\nThe command :DeleteColumn can be used to delete a specific column. >\n\n    :DeleteColumn 2\n\nwill delete column 2.\n\n2.7 InitCSV\t\t\t\t\t\t\t*InitCSV*\n-----------\n\nReinitialize the Plugin. Use this, if you have changed the configuration\nof the plugin (see |csv-configuration| ).\n\n2.8 Header\t\t\t\t\t\t\t *Header_CSV*\n----------\n\nThis command splits the csv-buffer and adds a window, that holds a small\nfraction of the csv file. This is useful, if the first line contains\nsome kind of a heading and you want always to display it. This works\nsimilar to fixing a certain line at the top. As optional argument, you\ncan give the number of columns from the top, that shall be displayed. By\ndefault, 1 is used. Use the '!' to close this window. So this >\n\n    :Header 3\n\nopens at the top a split window, that holds the first 3 lines, is fixed\nand horizontally 'scrollbind'ed to the csv window and highlighted using the\nCSVHeaderLine highlighting.\nTo close the header window, use >\n\n    :Header!\n\nNote, this won't work with linebreaks in the column.\n\n\t\t\t\t\t\t\t *VHeader_CSV*\n\nIf you want a vertical header line, use :VHeader. This works similar to the\n|Header_CSV| command, except that it will open a vertical split window with\nthe first column always visible. It will always open the first column in the\nnew split window. Use the '!' to close the window.\nNote, this won't work with linebreaks in the column.\n\n\t\t\t\t*VHeaderToggle_CSV* *HeaderToggle_CSV*\n\nUse the :HeaderToggle and :VHeaderToggle command to toggle displaying the\nhorizontal or vertical header line.\n\n\n2.9 Sort\t\t\t\t\t\t\t*Sort_CSV*\n--------\n\nThis command can be used to sort the csv file on a certain column. If no range\nis given, is sorts the whole file. Specify the column number to sort on as\nargument. Use the '!' attribute to reverse the sort order.\nFor example, the following command sorts line 1 til 10 on the 3 column >\n\n    :1,10Sort 3\n\nWhile this command >\n\n    :1,10Sort! 3\n\nreverses the order based on column 3.\n\n2.10 Copy Column        \t\t\t\t\t *Copy_CSV*\n----------------\n\nIf you need to copy a specific column, you can use the command :Column >\n\n    :[N]Column [a]\n\nCopy column N into register a. If you don't specify N, the column of the\ncurrent cursor position is used. If no register is given, the default register\n|quotequote| is used. \n\n\n2.11 Normal mode commands\t\t\t\t\t *csv-motion*\n-------------------------\n\nThe csv filetype plugin redefines the following keys as:\n\n<C-Right> or L or W\tMove [count] field forwards\n\n<C-Left> or E or H\tMove [count] field backwards\n\n<Up> or K\t\tMove [count] lines upwards within the same column\n\n<Down> or J\t\tMove [count] lines downwards within the same column\n\n\n==============================================================================\n3. CSV Configuration\t\t\t\t\t *csv-configuration*\n\nThe CSV plugin tries to automatically detect the field delimiter for your\nfile, cause although often the file is called CSV (comma separated values), a\nsemicolon is actually used. The column separator is stored in the buffer-local\nvariable b:delimiter. This delimiter is heavily used, because you need\nit to define a column. Almost all commands use this variable therefore.\n\n3.1 Delimiter\t\t\t\t\t\t\t*csv-delimiter*\n-------------\n\nSo to override the automatic detection of the plugin and define the separator\nmanually, use: >\n\n    :let g:csv_delim=','\n\nto let the comma be the delimiter. This sets the buffer local delimiter\nvariable b:delimiter.\n\nIf you changed the delimiter, you should reinitiliaze the plugin using\n|InitCSV|\n\n3.2 Column\t\t\t\t\t\t\t*csv-column*\n----------\n\nThe definition, of what a column is, is defined as buffer-local variable\nb:col. By default this variable is initialized to: >\n\n    let b:col='\\%(\\%([^' . b:delimiter . ']*\"[^\"]*\"[^' . b:delimiter . ']*'\n    \\. b:delimiter . '\\)\\|\\%([^' . b:delimiter . ']*\\%(' . b:delimiter \n    \\. '\\|$\\)\\)\\)'\n\nThis should take care of quoted delimiters within a column. Those should\nobviously not count as a delimiter. This regular expression is quite\ncomplex and might not always work on some complex cases (e.g. linebreaks\nwithin a field, see RFC4180 for some ugly cases that will probably not work\nwith this plugin).\n\nIf you changed the b:delimiter variable, you need to redefine the b:col\nvariable, cause otherwise it will not reflect the change. To change the\nvariable from the comma to a semicolon, you could call in your CSV-Buffer\nthis command: >\n\n    :let b:col=substitute(b:col, ',', ';', 'g')\n\nCheck with :echo b:col, if the definition is correct afterwards.\n\nYou can also force the plugin to use your own defined regular expression as\ncolumn. That regular expression should include the delimiter for the columns. \nTo define your own regular expression, set the g:csv_col variable: >\n\n    let g:csv_col='[^,]*,'\n\nThis defines a column as a field delimited by the comma (where no comma can be\ncontained inside a field), similar to how |csv-strict| works.\n\nYou should reinitialize the plugin afterwards |InitCSV|\n\n3.3 Hilighting Group                                         *csv-higroup*\n--------------------\n\nBy default the csv ftplugin uses the WildMenu highlighting Group to define how\nthe |HiColumn| command highlights columns. If you would like to define a\ndifferent highlighting group, you need to set this via the g:csv_hiGroup\nvariable. You can e.g. define it in your |.vimrc|: >\n\n    :let g:csv_hiGroup = \"IncSearch\"\n\nYou need to restart Vim, if you have changed this variable or use |InitCSV|\n\nThe |hl-Title| highlighting is used for the Header line that is created by the\n|Header_CSV| command. If you prefer a different highlighting, set the\ng:csv_hiHeader variable to the prefered highlighting: >\n\n    let g:csv_hiHeader = 'Pmenu'\n<\nThis would set the header window to the |hl-Pmenu| highlighting, that is used\nfor the popup menu. To disable the custom highlighting, simply |unlet| the\nvariable: >\n\n    unlet g:csv_hiHeader\n\nYou should reinitialize the plugin afterwards |InitCSV|\n\n3.4 Strict Columns\t\t\t\t\t\t*csv-strict*\n------------------\n\nThe default regular expression to define a column is quite complex\n|csv-column|. This slows down the processing and makes Vim use more memory and\nit could still not fit to your specific use case.\n\nIf you know, that in your data file, the delimiter cannot be contained inside\nthe fields quoted or escaped, you can speed up processing (this is quite\nnoticeable when using the |ArrangeColumn_CSV| command) by setting the\ng:csv_strict_columns variable: >\n\n    let g:csv_strict_columns = 1\n\nThis would define a column as this regex: >\n\n    let b:col = '\\%([^' . b:delimiter . ']*' . b:delimiter . '\\|$\\)'\n\nMuch simpler then the default column definition, isn't it?\nSee also |csv-column| and |csv-delimiter|\n\nYou can disable the effect if you |unlet| the variable: >\n\n    unlet g:csv_strict_columns\n\nYou should reinitialize the plugin afterwards |InitCSV|\n\n3.5 Multibyte Chars\t\t\t\t\t\t*csv-mbyte*\n-------------------\n\nUnfortunately, when using the |ArrangeColumn_CSV| command, multibyte chars\nmake some trouble, because internally Vim uses bytes to specify the width of a\ncolumn. The CSV plugin tries to workaround that, by calculating the byte width\nof each column, before aligning them. This is quite expensive and can slow\ndown processing. If you know, your data file only contains pure ASCII chars\n(or you simply don't care, if some lines a off a little bit), set the\ng:csv_no_multibyte variable: >\n\n    let g:csv_no_multibyte = 1\n\nAnd to force calculating the byte width of each column |unlet| the variable: >\n\n    unlet g:csv_no_multibyte\n\nYou should reinitialize the plugin afterwards |InitCSV|\n\n3.6 Concealing\t\t\t\t\t*csv-syntax*\t*csv-conceal*\n-------------------\n\nThe CSV plugin comes with a function to syntax highlight csv files. Basically\nallt it does is highlight the columns and the header line.\n\nBy default, the delimiter will not be displayed, if Vim supports |conceal| of\nsyntax items and instead draws a vertical line. If you don't want that, simply\nset the g:csv_noconceal variable in your .vimrc >\n    \n    let g:csv_no_conceal = 1\n\nand to disable it, simply unlet the variable >\n\n    unlet g:csv_no_conceal\n\nYou should reinitialize the plugin afterwards |InitCSV|\n\n3.7 Newlines\t\t\t\t\t\t*csv-newline*\n------------\n\nRFC4180 allows newlines in double quoted strings. By default, the csv-plugin\nwon't recognize newlines inside fields. It is however possible to make the\nplugin aware of newlines within quoted strings. To enbale this, set >\n\n    let g:csv_nl = 1\n\nand to disable it again, simply unset the variable >\n\n    unlet g:csv_nl\n\nIt is a good idea to reinitialize the plugin afterwards |InitCSV|\n\nNote, this might not work correctly in all cases. The syntax highlighting\nseems to change on cursor movements. This could possibly be a bug in the\nsyntax highlighting engine of Vim. Also, |WhatColumn_CSV| can't handle\nnewlines inside fields and will most certainly be wrong. \n\n==============================================================================\n4. CSV Tips and Tricks\t\t\t\t\t\t*csv-tips*\n\nHere, there you'll find some small tips and tricks that might help when\nworking with CSV files.\n\n4.1 Statusline\t\t\t\t\t\t\t*csv-stl*\n--------------\nSuppose you want to include the column, on which the cursor is, into your\nstatusline. You can do this, by defining in your .vimrc the 'statusline' like\nthis: >\n\n    function MySTL()\n\tif has(\"statusline\")\n\t    hi User1 term=standout ctermfg=0 ctermbg=11 guifg=Black guibg=Yellow\n\t    let stl = ...\n\t    if exists(\"*CSV_WCol\")\n\t\tlet csv = '%1*%{&ft=~\"csv\" ? CSV_WCol() : \"\"}%*'\n\t    else\n\t\tlet csv = ''\n\t    endif\n\t    return stl.csv\n\tendif\n    endfunc\n    set stl=%!MySTL()\n<\n\nThis will draw in your statusline right aligned the current column and max\ncolumn (like 1/10), if you are inside a CSV file. The column info will be\ndrawn using the User1 highlighting (|hl-User1|), that has been defined in the\nsecond line of the function. In the third line of your function, put your\ndesired 'statusline' settings as |expression|. Note the section starting with\n'if exists(..)' guards against not having loaded the filetype plugin.\n\n\n4.2 Slow ArrangeCol\t\t\t\t\t\t*csv-slow*\n-------------------\n\nProcessing a csv file using |ArrangeColumn_CSV| can be quite slow, because Vim\nneeds to calculate the width for each column and then replace each column by\nitself widened by spaces to the optimal length. Unfortunately, csv files tend\nto be quite big. Remember, for a file with 10,000 lines and 50 columns Vim\nneeds to process each cell, which accumulates to 500,000 substitutions. It\nmight take some time, until Vim is finished.\n\nHere are some performance meassurements on how the various\nconfiguration settings influence the |ArrangeColumn_CSV| command on a file\nwith 34 columns (on a 2.2GHz Core2Duo processor):\n\n    Lines   |   default |   strict¹     |   multibyte²  | strict + multibyte³\n    ------------------------------------------------------------------------\n     1000   |    6.93 s |     5.53 s    |     6.76 s    |   5.66 s\n     5000   |   15.2  s |     8.52 s    |    14.27 s    |   8.56 s\n    10000   |   36.2  s |    24.67 s    |    36.11 s    |  24.26 s\n    50000   |  162,23 s |    93.36 s    |   152.25 s    | 141.18 s\n\n¹ setting the g:csv_strict_columns variable (|csv-strict|)\n² setting the g:csv_no_multibyte variable (|csv-mbyte|)\n³ setting the g:csv_no_multibyte variable and g:csv_strict_columns variable\n\nNote, this was performed on a quite fast processor. If you need to work with\nlarge files, be sure to have enough memory available, cause Vim needs to read\nin the whole file into memory. You can also try the LargeFile plugin available\nat http://www.vim.org/scripts/script.php?script_id=1506 which tunes several\nVim options (like |syn-off|, 'undolimits', 'fdm' and others).",
  "install_details": "Open csv.vim in Vim and source the file: \n\n:so % \n\nThis will install the plugin into your $HOME/.vim/ftplugin directory and the documentation into your $HOME/.vim/doc directory. \n\nSee also the help for installing Vimball-Archives (:h vimball-intro) \n\nTake a look at :h ft_csv.txt for the documenation \n and read :h csv-installation to have vim automatically detect csv-files.",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15219",
      "filename": "csv-0.13.vba",
      "script_version": "13",
      "date": "2011-03-14",
      "vim_version": "7.3",
      "author": {
        "user_id": "17599",
        "user_name": "chrisbra",
        "first_name": "Christian",
        "last_name": "Brabandt",
        "email": "cb@256bit.org",
        "homepage": "http://blog.256bit.org"
      },
      "release_notes": "-documentation update-https://github.com/chrisbra/csv.vim/issues#issue/2 thanks lespea!-https://github.com/chrisbra/csv.vim/issues#issue/3 thanks lespea!-https://github.com/chrisbra/csv.vim/issues#issue/1 thanks lespea!-fix some small annoying bugs-WhatColumn! displays column name(automatically uploaded)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15113",
      "filename": "csv-0.12.vba",
      "script_version": "12",
      "date": "2011-02-24",
      "vim_version": "7.2",
      "author": {
        "user_id": "17599",
        "user_name": "chrisbra",
        "first_name": "Christian",
        "last_name": "Brabandt",
        "email": "cb@256bit.org",
        "homepage": "http://blog.256bit.org"
      },
      "release_notes": "-don't use :noa when switching between windows-make sure, colwidth() doesn't throw an error(automatically uploaded)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15111",
      "filename": "csv-0.11.vba",
      "script_version": "11",
      "date": "2011-02-24",
      "vim_version": "7.2",
      "author": {
        "user_id": "17599",
        "user_name": "chrisbra",
        "first_name": "Christian",
        "last_name": "Brabandt",
        "email": "cb@256bit.org",
        "homepage": "http://blog.256bit.org"
      },
      "release_notes": "-new command :Column-:SearchInColumn did not find anything in the last if no delimiter was given (reported by chroyer)-:VHeader displays the first column as Header similar to how :Header works-:HeaderToggle and VHeaderToggle commands that toggles displaying the header lines/columns(automatically uploaded)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15103",
      "filename": "csv-0.10.vba",
      "script_version": "10",
      "date": "2011-02-23",
      "vim_version": "7.2",
      "author": {
        "user_id": "17599",
        "user_name": "chrisbra",
        "first_name": "Christian",
        "last_name": "Brabandt",
        "email": "cb@256bit.org",
        "homepage": "http://blog.256bit.org"
      },
      "release_notes": "-Only conceal real delimiters-document g:csv_no_conceal variable-document g:csv_nl variable-document conceal feature and syntax highlighting-Normal mode command <Up>/<Down> work like K/J-More robust regular expression engine, that can also handle newlines inside quoted strings.-Slightly adjusted syntax highlighting(automatically uploaded)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15045",
      "filename": "csv-0.9.vba",
      "script_version": "9",
      "date": "2011-02-19",
      "vim_version": "7.2",
      "author": {
        "user_id": "17599",
        "user_name": "chrisbra",
        "first_name": "Christian",
        "last_name": "Brabandt",
        "email": "cb@256bit.org",
        "homepage": "http://blog.256bit.org"
      },
      "release_notes": "-use conceal char depending on encoding-Map normal mode keys also for visual/select and operator pending mode(automatically uploaded)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15037",
      "filename": "csv-0.8.vba",
      "script_version": "8",
      "date": "2011-02-17",
      "vim_version": "7.2",
      "author": {
        "user_id": "17599",
        "user_name": "chrisbra",
        "first_name": "Christian",
        "last_name": "Brabandt",
        "email": "cb@256bit.org",
        "homepage": "http://blog.256bit.org"
      },
      "release_notes": "-Better Error handling-HiColumn! removes highlighting-Enable NrColumns, that was deactivated in v.0.7-a ColorScheme autocommand makes sure, that the syntax highlighting is reapplied, after changing the colorscheme.-small performance improvements for |ArrangeColumn_CSV|-Syntax Highlighting conceales delimiter-A lot more documentation-SearchInColumn now searches in the current column, if no column has been specified(automatically uploaded)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15031",
      "filename": "csv-0.7.vba",
      "script_version": "7",
      "date": "2011-02-16",
      "vim_version": "7.2",
      "author": {
        "user_id": "17599",
        "user_name": "chrisbra",
        "first_name": "Christian",
        "last_name": "Brabandt",
        "email": "cb@256bit.org",
        "homepage": "http://blog.256bit.org"
      },
      "release_notes": "-Make the motion commands 'W' and 'E' work more reliable-Document how to setup filetype plugins-Make |WhatColumn_CSV| work more reliable (report from http://vim.wikia.com/Script:3280)-DeleteColumn deletes current column, if no argument given-|ArrangeColumn_CSV| handles errors better-Code cleanup-Syntax highlighting-'H' and 'L' move forward/backwards between csv fields-'K' and 'J' move upwards/downwards within the same column-|Sort_CSV| to sort on a certain column-|csv-tips| on how to colorize the statusline(automatically uploaded)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15021",
      "filename": "csv-0.6.vba",
      "script_version": "6",
      "date": "2011-02-15",
      "vim_version": "7.2",
      "author": {
        "user_id": "17599",
        "user_name": "chrisbra",
        "first_name": "Christian",
        "last_name": "Brabandt",
        "email": "cb@256bit.org",
        "homepage": "http://blog.256bit.org"
      },
      "release_notes": "-Make |ArrangeColumn| work more reliable (had problems with multibyte chars before)-Add |Header| function-'W' and 'E' move forward/backwards between csv fields(automatically uploaded)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=12877",
      "filename": "csv.vba",
      "script_version": "0.5",
      "date": "2010-04-20",
      "vim_version": "7.0",
      "author": {
        "user_id": "17599",
        "user_name": "chrisbra",
        "first_name": "Christian",
        "last_name": "Brabandt",
        "email": "cb@256bit.org",
        "homepage": "http://blog.256bit.org"
      },
      "release_notes": "enabled GLVS (see :h GLVS),\nput cvs.vim on a public repository available at http://github.com/chrisbra/csv.vim"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=12607",
      "filename": "csv.vba",
      "script_version": "0.4a",
      "date": "2010-03-11",
      "vim_version": "7.0",
      "author": {
        "user_id": "17599",
        "user_name": "chrisbra",
        "first_name": "Christian",
        "last_name": "Brabandt",
        "email": "cb@256bit.org",
        "homepage": "http://blog.256bit.org"
      },
      "release_notes": "fixed documentation"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=12604",
      "filename": "csv.vba",
      "script_version": "0.4",
      "date": "2010-03-11",
      "vim_version": "7.0",
      "author": {
        "user_id": "17599",
        "user_name": "chrisbra",
        "first_name": "Christian",
        "last_name": "Brabandt",
        "email": "cb@256bit.org",
        "homepage": "http://blog.256bit.org"
      },
      "release_notes": "Better error handling\nadded :InitCSV to reinitialize the plugin\n:HiColumn now by default the current column, if no argument is given"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11615",
      "filename": "csv.vba",
      "script_version": "0.3",
      "date": "2009-10-28",
      "vim_version": "7.2",
      "author": {
        "user_id": "17599",
        "user_name": "chrisbra",
        "first_name": "Christian",
        "last_name": "Brabandt",
        "email": "cb@256bit.org",
        "homepage": "http://blog.256bit.org"
      },
      "release_notes": "Initial upload"
    }
  ]
}
