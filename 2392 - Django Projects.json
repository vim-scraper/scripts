{
  "script_id": "2392",
  "name": "Django Projects",
  "summary": "Allows you to use django management commands from within vim",
  "script_type": "utility",
  "description": "Author: Gregor Müllegger <gregor@muellegger.de>\nVersion: 0.1.0\n\nDescription:\n  Use the script to run simple django specific tasks. You can run management\n  commands from in vim.\n\nUsage:\n  When you have specified all your django projects you can now tell the script\n  that you want now to work with one of them. Let's expect you want to work\n  with your 'fancyblog' project.\n  \n  At first you have to initalize this project:\n    :DjangoInit fancyblog\n\n  Now you can use all the cool commands to work with your project. Use\n  `:DjangoManage <command>` to execute a command with your manage.py file.\n\n    :DjangoManage syncdb\n\n  Use the `:DjangoTerminalManage <command>` command to execute a manage.py\n  command in an external terminal to free the vim command line for new\n  commands. This can be used to run django's development server from within\n  vim.\n\nConfiguration:\n  There are a few global variables you can change to fit the script your\n  preferences:\n\n  g:django_terminal_program\n    Set this variable to a terminal programm which shall execute the commands\n    in :DjangoTerminalManage. Default is 'xterm -e'.\n\nShortcuts:\n  There are already shortcuts for every builtin command to prevent you from\n  performing too many keystrokes:\n\n    :DjangoAdminindex\n    :DjangoCleanup\n    :DjangoCompileMessages\n    :DjangoCreateCachetable\n    :DjangoCreateSuperuser\n    :DjangoDBShell\n    :DjangoDiffsettings\n    :DjangoDumpdata\n    :DjangoFlush\n    :DjangoHelp command\n    :DjangoInspectDB\n    :DjangoLoaddata\n    :DjangoMakeMessages\n    :DjangoReset appname\n    :DjangoRunfcgi\n    :DjangoRunserver\n    :DjangoShell\n    :DjangoSql\n    :DjangoSqlall\n    :DjangoSqlclear\n    :DjangoSqlcustom\n    :DjangoSqlflush\n    :DjangoSqlindexes\n    :DjangoSqlinitialdata\n    :DjangoSqlreset\n    :DjangoSqlsequencereset\n    :DjangoStartapp newappname\n    :DjangoSyncdb\n    :DjangoTest [appnames]\n    :DjangoTestserver\n    :DjangoValidate\n\n  You can also use the commands from the django-commands-extension app if you\n  have installed it.\n\n    :DjangoCreateapp\n    :DjangoCreatecommand\n    :DjangoCreatejobs\n    :DjangoDescribeform\n    :DjangoDumpscript\n    :DjangoExportemails\n    :DjangoGenerateSecretKey\n    :DjangoGraphmodels\n    :DjangoPasswd\n    :DjangoPrintUserForSession\n    :DjangoResetDB\n    :DjangoRunjob\n    :DjangoRunjobs\n    :DjangoRunprofile\n    :DjangoRunscript\n    :DjangoRunserverPlus\n    :DjangoSetfakepasswords\n    :DjangoShellPlus\n    :DjangoShowurls\n    :DjangoSqldiff",
  "install_details": "Requirements:\n  The script will only work on a unix-like system.\n\nInstallation:\n  Put this file (django_projects.vim) in your plugin directory and tell the\n  script what django projects you are working on.\n  \n  To install a single django project use the g:DjangoInstall() function. Put a\n  lines similar to the following in your vimrc file:\n\n    call g:DjangoInstall('myproject', '/home/username/projects/myproject/', 'settings', 'manage.py', ['/usr/local/pythonlibs', 'apps/'], '.')\n\n  The arguments mean the following things:\n    1. argument (name): This is the projects name. It is used with the DjangoInit\n    command to tell the script on which project you work on.\n\n    2. argument (project root): This should be an absolute path to your \n    project. It is used to complete relative paths in the `manage_file`,\n    `paths` and `cd` argument. This argument must end with a slash.\n\n    3. argument (settings module): Specify here the name of your settings\n    module. This value is used to set the $DJANGO_SETTINGS_MODULE variable.\n\n    4. argument (manage.py file): Specify here the path of your manage.py\n    file. The project root path is prepended to this argument if a relative\n    path is given (e.g. the argument does not start with '/')\n\n    5. argument (python paths): This argument must be a list of strings. The\n    script will add these paths to your sys.path variable. If a path is\n    relative, the project root argument will be prepended.\n\n    6. argument (cd): Specify a directory in which the script will jump while\n    calling g:DjangoInit('myproject'). If not specified (e.g. it is an empty\n    string) no cd is performed.\n\n  Note: Maybe you need to include the source of this file into your .vimrc\n  (if the plugin is loaded after your g:DjangoInstall() calls). The simplest\n  way to do this is to put this line right before your g:DjangoInstall\n  calls:\n\n    source ~/.vim/plugin/django_projects.vim",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=9318",
      "filename": "django_projects.vim",
      "script_version": "0.1.0",
      "date": "2008-10-07",
      "vim_version": "6.0",
      "author": {
        "user_id": "15260",
        "user_name": "gregor muellegger",
        "first_name": "Gregor",
        "last_name": "Müllegger",
        "email": "gregor at muellegger.de",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}