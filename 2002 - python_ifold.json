{
  "script_id": "2002",
  "display_name": "python_ifold",
  "summary": "Improved version of python_fold. Uses folding expression for python code.",
  "name": "python_ifold",
  "script_type": "utility",
  "description": "Folds are created for:\n\n- 'class' and 'def' definitions.\n- Blocks between {{{, }}} markers (but not yet {{{n, etc.)\n\n\nFlavors:\n\n- A (python_ifold.a.vim) - ideal for legacy systems.\n- B (python_ifold.b.vim) -  with all options set by default.\n- C (python_ifold.c.vim) -  same as flavor B, but uses extra Vim settings for user comfort.\n\n\nImprovements over python_fold:\n\n- Fixes the wild (i.e. bogus) folding bug \n- Shows class and function signatures\n- Now, as in the original, flavor B will omit any misplaced comment mark\n- Flavor A boosts performance on outdated systems, something of great importance when there are lots of nested folds over large code pages\n\n\nCaveats:\n\n- The fold level for each fold is equal to the indentation divided by the value of the 'shiftwidth' option, so make sure that 'shiftwidth' is set to the right value for your code. For best results set 'shiftwidth' , 'softtabstop'  and 'tabstop' to the same value, and use 'expandtab' and 'autoindent' (all included in flavor C).\n\nExample:\nset tabstop=4\nset softtabstop=4\nset shiftwidth=4\nset expandtab\nset autoindent\nset foldcolumn=1  \" Optional\n\n- Class and function folds show a counter of number of lines (and the first line below the signature) that are within the fold when it's closed. Read the change history to learn more about this.\n\n- Press F key whenever you want to disable temporarily the folding, press F again to re-enable it (won't fold the block of code where the cursor is, though).\n\n- If g:ifold_mode is set to a value greater than 0, will make extra parsing to your code to avoid including blank lines at the end of each fold and wont unfold your code if any comment marks are misplaced. This behavior is set by default in flavor B. But be warned , though. This option requires more power from your system (hence the two versions: 'A' for lower-end systems and 'B' for powerful-enough systems), so if you lack of requirements you shouldn't use it. \n\n- The docstring is not shown at all.\n\n- If you choose flavor A or if you set the global g:ifold_mode to 0, bare in mind that any comment mark between the beginning of a line and the first expression's character (of a sentence) WILL interfere with the whole folding process, that is, only if these marks do not respect the indentation sequence.",
  "install_details": "Download the archive and extract the flavor that suits your needs. Then, either source that file whenever you want to use the folding, or save it in your ftplugin directory (for example, ~/.vim/ftplugin) and it should load every time you edit python code.\n",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8583",
      "filename": "python_ifold-2.9.zip",
      "script_version": "2.9",
      "date": "2008-04-20",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "- Code refactoring and small fixes. \n- There's a new experimental engine for testing purposes. I did a regression from version 2.8.4 to 2.8.3.6 to the code, moving the enhancement you usually found in 2.8.4 to the experimental engine. It'll stay in this state until I fix some minor bugs. If you wish to continue using the \"signature\" enhancement, you need to put this in your vimrc:\nlet g:ifold_mode=2\n- The globals g:ifold_support_markers, g:ifold_show_text, and g:ifold_accuracy were deleted and their respective functionality was replaced with the global g:ifold_mode when its value is 1 ore greater."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8578",
      "filename": "python_ifold-2.8.4.zip",
      "script_version": "2.8.4",
      "date": "2008-04-18",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "Now it will show the entire signatures of class and function definitions, even if spanned for several lines."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8576",
      "filename": "python_ifold-2.8.3.6.zip",
      "script_version": "2.8.3.6",
      "date": "2008-04-18",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "minor bugfix: Fixed a small bug introduced in the previous release."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8514",
      "filename": "python_ifold-2.8.3.5.zip",
      "script_version": "2.8.3.5",
      "date": "2008-04-01",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "New python_ifold flavor: After receiving many requests via email, I decided to put all the vimrc recommended settings inside the plugin. In a nutshell, it loads these settings whenever the user opens a python file:\n\nset tabstop=4\nset softtabstop=4\nset shiftwidth=4\nset expandtab\nset autoindent\nset foldcolumn=1\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8427",
      "filename": "python_ifold-2.8.3.4.zip",
      "script_version": "2.8.3.4",
      "date": "2008-03-08",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "Fix (applicable only for the 'b' flavor): small fix for bug introduced in version 2.8.3.3.b"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8370",
      "filename": "python_ifold-2.8.3.3.zip",
      "script_version": "2.8.3.3",
      "date": "2008-02-29",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "Only in the b version or if the g:ifold_accuracy global variable is set\nFix: Now the script omits any comment mark that lays between the beginning of the line and the first sentence's character, that is, it wont unfold your code even if you put comment marks without proper indentation."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7988",
      "filename": "python_ifold.vim",
      "script_version": "2.8.3.2.b",
      "date": "2007-11-25",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "python_ifold with all options selected by default"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7986",
      "filename": "python_ifold.vim",
      "script_version": "2.8.3.2.a",
      "date": "2007-11-25",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "python_ifold for legacy systems"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7809",
      "filename": "python_ifold.vim",
      "script_version": "2.8.3.2",
      "date": "2007-10-18",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "Enhancement: Now the script prevents \"folding preemption\", that is, when you try to expand the distance between two fold groups--be them class or function definitions--the engine will prevent from blank lines being eaten up at the bottom of the first fold group; nevertheless, I created a new global (g:ifold_accuracy) so that you can compare the former behavior with the new one.  Also, I decided to make the older engine the default method because it's quicker.\n\nNew global:\ng:ifold_accuracy (0 by default, set it to 1 for experimentation with the new, someway better, behavior)\n\nPut this in your vimrc to try it:\nlet g:fold_accuracy = 1"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7607",
      "filename": "python_ifold.vim",
      "script_version": "2.8.3.1",
      "date": "2007-08-31",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "bugfix: the ugly bug introduced in 2.8.3 is no more :D"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7605",
      "filename": "python_ifold.vim",
      "script_version": "2.8.3",
      "date": "2007-08-31",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "code refactoring and bugfixing:\nbefore this upgrade the script tend to include commented lines within folded block of lines when they where uncommented, pretty annoying."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7601",
      "filename": "python_ifold.vim",
      "script_version": "2.8.2",
      "date": "2007-08-31",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "bugfix: a stupid bug didn't allow the script to segregate line comments from the class or function definition even if this token was found two lines ahead. I really don't know if this was the expected behavior.\n\nExample:\n\nclass A:\n    pass\n\n    #this line was included inside the fold"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7596",
      "filename": "python_ifold.vim",
      "script_version": "2.8.1",
      "date": "2007-08-31",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": " Bugfixes:\n- the script now avoids folding a block of code when there is a class or function definition 2 lines ahead.\n- It is now possible to have one line of separation between classes of the same level of indentation without worrying the script eating that line--although happening in extremely rare cases:\n\nclass A():\n    # will start folding here\n    ...\n    class SubSomething():\n        somethinghere = ''\n        # the script ate the next \n        # blank line before the bugfix\n\nclass B():\n    ..."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7568",
      "filename": "python_ifold.vim",
      "script_version": "2.8",
      "date": "2007-08-27",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "Bugfix: this time, the script won't fold when the immediate line is a class or function definition, like the example below\n\nclass MyClass():\n    def __init__():\n        return something     #no fold will be here\n    class MyInnerClass():\n        #..."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7565",
      "filename": "python_ifold.vim",
      "script_version": "2.7",
      "date": "2007-08-26",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "Feature: Now you can toggle on/off the script with 'f' key (it won't fold the block where the cursor is tough, but can be folded with zC later)."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7564",
      "filename": "python_ifold.vim",
      "script_version": "2.6",
      "date": "2007-08-26",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "Feature: The support markers and the text displayed in the folds are now optional (unset by default), in a desperate attempt to achieve better performance on legacy systems.\nIf you want the opposite behavior then you have to set the globals g:ifold_support_markers and g:ifold_show_text to 1."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7557",
      "filename": "python_ifold.vim",
      "script_version": "2.5",
      "date": "2007-08-25",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "Feature: Added ReFold() function, pretty useful when some or all folds disappear."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7555",
      "filename": "python_ifold.vim",
      "script_version": "2.4",
      "date": "2007-08-25",
      "vim_version": "6.0",
      "author": {
        "user_id": "12634",
        "user_name": "hellhound",
        "first_name": "Jean-Pierre",
        "last_name": "Chauvel",
        "email": "jchauvel at gmail.com",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
