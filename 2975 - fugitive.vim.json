{
  "script_id": "2975",
  "name": "fugitive.vim",
  "summary": "A Git wrapper so awesome, it should be illegal",
  "script_type": "utility",
  "description": "I'm not going to lie to you; fugitive.vim may very well be the best Git wrapper of all time. Check out these features:\n\nView any blob, tree, commit, or tag in the repository with :Gedit (and :Gsplit, :Gvsplit, :Gtabedit, ...). Edit a file in the index and write to it to stage the changes. Use :Gdiff to bring up the staged version of the file side by side with the working tree version and use Vim's diff handling capabilities to stage a subset of the file's changes.\n\nBring up the output of git-status with :Gstatus. Press `-` to add/reset a file's changes, or `p` to add/reset --patch that mofo. And guess what :Gcommit does!\n\n:Gblame brings up an interactive vertical split with git-blame output. Press enter on a line to reblame the file as it stood in that commit, or`o` to open that commit in a split.\n\n :Gmove does a git-mv on a file and simultaneously renames the buffer. :Gremove does a git-rm on a file and simultaneously deletes the buffer.\n\nUse :Ggrep to search the work tree (or any arbitrary commit) with git-grep, skipping over that which is not tracked in the repository. :Glog loads all previous revisions of a file into the quickfix list so you can iterate over them and watch the file evolve!\n\n:Gread is a variant of `git checkout -- filename` that operates on the buffer rather than the filename.  This means you can use `u` to undo it and you never get any warnings about the file changing outside Vim. :Gwrite writes to both the work tree and index versions of a file, making it like git-add when called from a work tree file and like git-checkout when called from the index or a blob in history.\n\nAdd %{fugitive#statusline()} to 'statusline' to get an indicator with the current branch in (surprise!) your statusline.\n\nOh, and of course there's :Git for running any arbitrary command.\n\nLike fugitive.vim? Follow the repository on GitHub: http://github.com/tpope/vim-fugitive",
  "install_details": "Extract in ~/.vim (~\\vimfiles on Windows).\n\nVim 7.2 is recommended as it ships with syntax highlighting for many Git file types.",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=12673",
      "filename": "fugitive.zip",
      "script_version": "1.1",
      "date": "2010-03-21",
      "vim_version": "7.0",
      "author": {
        "user_id": "9012",
        "user_name": "tpope",
        "first_name": "Tim",
        "last_name": "Pope",
        "email": "vimNOSPAM at tpope.org",
        "homepage": "http://tpo.pe/"
      },
      "release_notes": "Much better windows support ('shellslash' no longer required).\nDelete blame buffers when closed.\nPass :Gblame flags along to git-blame.\nFix duplicate \"Signed-off-by\" lines.\nFinish pending commit even if exiting Vim.\nAllow double quotes in :Git and :Ggrep arguments.\n`D` in :Gstatus shows a diff."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=12387",
      "filename": "fugitive.zip",
      "script_version": "1.0",
      "date": "2010-02-15",
      "vim_version": "7.0",
      "author": {
        "user_id": "9012",
        "user_name": "tpope",
        "first_name": "Tim",
        "last_name": "Pope",
        "email": "vimNOSPAM at tpope.org",
        "homepage": "http://tpo.pe/"
      },
      "release_notes": "Initial upload"
    }
  ]
}