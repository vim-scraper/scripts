{
  "script_id": "158",
  "display_name": "foldutil.vim",
  "summary": "Utility for creating folds (using specified match criteria)",
  "name": "foldutil.vim",
  "script_type": "utility",
  "description": "  The plugins provides useful commands for the ease of creating folds using\n  different match-criteria. They support creating folds in three different\n  modes, in the whole buffer, or only in the selected range:\n      - block mode\n        You give a starting and ending pattern for the blocks.\n      - outline mode\n        You give a pattern that determines the start of the block. A new\n        block automatically starts whenever the pattern is found.\n      - non-block mode\n        You give a pattern which determines the set of lines that should be\n        included in the folds. Useful to see only the matching/non-matching\n        lines with or without context.\n                                                                               \n  The first set of commands use pattern matching criteria (using the\n  built-in =~ operator, see help on |expr-=~|).\n  \n    FoldMatching - All arguments are optional. The first argument specifies\n                   the begin pattern and an optional second argument can be\n                   passed to specify an end pattern (for block mode) and\n                   additionally the number of context lines to be shown\n                   (which defaults to 1 if not specified). To specify an\n                   outline mode, a special value of -1 should be specified\n                   as context.\n        Syntax:\n          [range]FoldMatching[!] [pattern] [endPattern] [context]\n\n        Ex:\n          FoldMatching\n            Uses current search pattern and creates folds in non-block mode\n            with the default context of 1.\n          FoldMatching! ^\\s*// 0\n            This potentially folds away all the lines that are not in\n            C++/Java single-line comments such that you can see only those\n            comments.\n          FoldMatching public -1\n            Uses \"public\" as the pattern and creates folds in outline mode.\n          FoldMatching /\\* \\*/ 0\n            Creates folds for all the C++/Java style block comments with no\n            context.\n                                                                               \n    FoldNonMatching - This is just an alias for \"FoldMatching\" with a bang.\n                                                                               \n  The following commands use line number as match criteria\n  \n    FoldShowLines - Pass a comma-separated list of line numbers and an\n                    optional number of context lines to show/hide. All the\n                    rest of the lines (excluding those in context) will be\n                    folded away. You can also create blocks by specifying an\n                    optional list of line numbers as a second argument. You\n                    can give a range too.\n        Syntax:\n          [range]FoldShowLines[!] {lineNumbers} [endLineNumbers] [context]\n  \n        Ex:\n          FoldShowLines 10,50,100 3\n            Creates four folds exposing the lines 10, 50 and 100 with a\n            context of 3 lines.\n          FoldShowLines! 5,15,25 10,20,30 0\n            Creates three folds with 5 to 10, 15 to 20 and 25 to 30 as blocks.\n                                                                               \n    FoldShowMarks - Shows all the lines that have a mark defined in the\n                    current buffer, by folding away all the rest of the\n                    lines. Only the marks from a-z and A-Z are considered\n                    for match criteria.\n        Syntax:\n          [range]FoldShowMarks [context]\n                                                                               \n  The following command takes a highlight group as a match criteria, and\n    uses it to show/hide lines.\n  \n    FoldShowHiGroup - Pass a highlight group name and an optional number of\n                    context lines to be shown. All the rest of the lines\n                    (excluding those in context) will be folded away. You\n                    can also create blocks by specifying an optional end\n                    highligh group as a second argument. You can give a\n                    range too.\n        Syntax:\n          [range]FoldShowHiGroup[!] {HiGroup} [endHiGroup] [context]\n  \n        Ex:\n          FoldShowHiGroup Todo\n            Folds away all the lines except those that have a TODO item\n            mentioned (in Java, this is all the comments containing the\n            words TODO or FIXME, by default) with a context of 1 line.\n          FoldShowHiGroup Special 0\n            In HTML this reveals just the lines containing special characters.\n          FoldShowHiGroup! Comment 0\n            This will fold away all the comment lines in any language.\n  \n  The following is purely for convenience to reduce the number of commands\n  to be executed (you need to create separate folds).\n                                                                               \n    FoldShowRange - All the lines are folded except for the lines in the range\n                    given. Helps to search only in a range of lines, as it is\n                    easy to identify when the cursor goes out of the range.\n                    Also consider removing \"search\" and \"jump\" from\n                    'foldopen' setting.\n        Syntax:\n          [range]FoldShowRange\n  \n        Ex:\n          50,500FoldShowRange\n  \n      The defaults for pattern and context are current search pattern\n        (extracted from / register) and 1 respectively.\n      The outline mode additionally modifies the 'foldtext' such that the\n        starting line shows up as the summary line for the fold (without the\n        usual dashes and number of lines in the prefix). This allows you to\n        view the matched lines more clearly and also follow the same\n        indentation as the original (nice when folding code). You can\n        however set g:foldutilFoldText to any value that is acceptable for\n        'foldtext' and customize this behavior (e.g., to view the number of\n        lines in addition to the matched line, set it to something like:\n            \"getline(v:foldstart).' <'.(v:foldend-v:foldstart+1).' lines>'\").\n                                                                               \n      Ex: \n        - Open a vim script and try: \n            FoldNonMatching \\<function\\> -1\n        - Open a java class and try: \n            FoldNonMatching public\\|private\\|protected -1\n        - Open files with diff/patch output for several files and try:\n            FoldMatching diff -1\n                                                                               \n        Please send me other uses that you found for the \"-1\" context and I\n        will add it to the above list.\n                                                                               \n  Notes:\n  - The plugin provides several ways to specify the fold blocks, but not all\n    of them might make sense to you, especially when used with the *bang*\n    option to invert the match.\n                                                                               \n  - For :FoldMatching command, the pattern is searched using the built-in\n    search() function, so any limitations application to this function apply\n    to the patterns passed to the command as well.\n                                                                               \n  - You can change the default for context by setting g:foldutilDefContext.\n                                                                               \n  - The arguments are separated by spaces, so to include spaces in the\n    patterns, you need to protect them with a back-slash. Specifying a bang\n    makes the match inverse, so it allows you to show matching lines,\n    instead of folding them away.\n                                                                               \n  - You can change the context alone by using :FoldSetContext command or\n    completely end folding and revert the settings modified by the plugin by\n    using the :FoldEndFolding command.\n                                                                               \n  - When the commands are executed, if the current 'foldmethod' is not\n    \"manual\", it is switched to \"manual\" temporarily and restored when the\n    folding is ended using the :FoldEndFolding command. It also remembers\n    other fold related settings (such as the existing folds and\n    'foldminlines') and restores them as much as possible. For help on\n    working with folds, see help on |folding|.\n                                                                               \n  - The plugin by default, first clears the existing folds before creating the\n    new folds. But you can change this by setting g:foldutilClearFolds to 0,\n    in which case the new folds are added to the existing folds, so you can\n    create folds incrementally.\n                                                                               \n  - The plugin provides a function to return a string with Vim commands to\n    recreate the folds in the current window. Executing the string later\n    results in the folds getting recreated as they were before (so you can\n    use it to save the folds). You need to make sure that 'fdm' is either in\n    \"manual\" or \"marker\" mode to be able to execute the return value (though\n    lline is an int, you can pass in the string '$' as a shortcut to mean\n    the last line).\n                                                                               \n      String  FoldCreateFoldsStr(int fline, int lline)\n                                                                               \n  - You can create your own match criteria and extend the functionality of\n    the plugin by using the b:fuSearchFn variable. If you set the name of\n    your search function with custom match criteria to this variable, before\n    calling the :FoldMatching or :FoldNonMatching commands, the plugin uses\n    the custom function instead of one of the standard search functions that\n    comes with the plugin. The prototype of the function is:\n                                                                               \n      int Search(pattern, negate)\n                                                                               \n    The function should behave very much like the built-in search()\n    function, ie., it should search for the next line matching the give\n    pattern (using your custom match criteria), position the cursor at the\n    matched line and return the line number. When the match fails, it\n    should return 0 and shouldn't change the cursor position\n    (see :help search()).\n                                                                               \n    See one of the existing functions, s:SearchForPattern(),\n    s:PositionAtNextLine() and s:PositionAtNextHiGroup() for examples.\n                                                                               \nSummary Of Features:\n  Command Line:\n    FoldMatching (or FoldNonMatching), FoldShowLines, FoldShowMarks,\n    FoldShowHiGroup, FoldShowRange, FoldEndFolding\n                                                                               \n  Functions:\n    FoldCreateFoldsStr\n                                                                               \n  Settings:\n      g:foldutilDefContext, g:foldutilClearFolds, g:foldutilFoldText\n\n\n\nSearch_Key_Words: foldutil foldutils fold util folds Hari Krishna Dara",
  "install_details": "Drop it in your plugin directory.\n\nRequires Vim6.3\nRequires multvals.vim (vimscript #171)\nRequires genutils.vim (vimscript #197)",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=6267",
      "filename": "foldutil.vim",
      "script_version": "3.0",
      "date": "2006-10-10",
      "vim_version": "7.0",
      "author": {
        "user_id": "292",
        "user_name": "haridsv",
        "first_name": "Hari Krishna",
        "last_name": "Dara",
        "email": "hari.vim@gmail.com",
        "homepage": ""
      },
      "release_notes": "- No longer depends on multvals.\n- Works with the new autoload version of genutils.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=4278",
      "filename": "foldutil.vim",
      "script_version": "2.0",
      "date": "2005-05-13",
      "vim_version": "6.0",
      "author": {
        "user_id": "292",
        "user_name": "haridsv",
        "first_name": "Hari Krishna",
        "last_name": "Dara",
        "email": "hari.vim@gmail.com",
        "homepage": ""
      },
      "release_notes": "- Now you can pass separate begin and end patterns to specify the fold\n  blocks.\n- FoldShowMatching has been renamed to FoldMatching.\n- You can also invert the pattern easily by passing a *bang* to the\n  FoldMatching and other commands.\n- There are now multiple ways to specify the match criteria\n  - Search pattern (existing): FoldMatching, FoldNonMatching\n  - Line numbers (existing): FoldShowLines\n  - Vim marks (new): FoldShowMarks\n  - Highlight group names (new): FoldShowHiGroup\n- Easy way to create custom match criteria if the above doesn't suite\n  your needs. This provides a lot of extensibility.\n- The logic has been rewritten for the ease of maintenance and\n  extensibility. The plugin also runs much faster now (makes difference\n  on huge log files).\n\nThere is a new dependency on the genutils.vim plugin.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3586",
      "filename": "foldutil.vim",
      "script_version": "1.7",
      "date": "2004-10-28",
      "vim_version": "6.0",
      "author": {
        "user_id": "292",
        "user_name": "haridsv",
        "first_name": "Hari Krishna",
        "last_name": "Dara",
        "email": "hari.vim@gmail.com",
        "homepage": ""
      },
      "release_notes": "- New FoldShowRange command to fold all lines except the selected range.\n  See doc for usage.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3223",
      "filename": "foldutil.vim",
      "script_version": "1.6",
      "date": "2004-07-13",
      "vim_version": "6.0",
      "author": {
        "user_id": "292",
        "user_name": "haridsv",
        "first_name": "Hari Krishna",
        "last_name": "Dara",
        "email": "hari.vim@gmail.com",
        "homepage": ""
      },
      "release_notes": "- Now requires Vim6.2\n- Now requires multvals.vim\n- The plugin now remembers \"manual\" folds and restores with :FoldEndFolding. Defines a useful global function FoldCreateFoldsStr() for this purpose.\n- A new :FoldSetContext to conveniently change only the context of the current match.\n- Also fixed an error with non-existing w:settStr."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2678",
      "filename": "foldutil.vim",
      "script_version": "1.5",
      "date": "2004-01-26",
      "vim_version": "6.0",
      "author": {
        "user_id": "292",
        "user_name": "haridsv",
        "first_name": "Hari Krishna",
        "last_name": "Dara",
        "email": "hari.vim@gmail.com",
        "homepage": ""
      },
      "release_notes": "A very useful \"-1\" context is now supported. Thanks to John A. Peters for the idea. Read the description for details."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2098",
      "filename": "foldutil.vim",
      "script_version": "1.4",
      "date": "2003-06-18",
      "vim_version": "6.0",
      "author": {
        "user_id": "292",
        "user_name": "haridsv",
        "first_name": "Hari Krishna",
        "last_name": "Dara",
        "email": "hari.vim@gmail.com",
        "homepage": ""
      },
      "release_notes": "Thanks to Tom Regner {tomte at tomsdiner dot org} for the enhancement to work even when foldmethod is not 'manual'. See description for a new command and more information.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2064",
      "filename": "foldutil.vim",
      "script_version": "1.3",
      "date": "2003-06-11",
      "vim_version": "6.0",
      "author": {
        "user_id": "292",
        "user_name": "haridsv",
        "first_name": "Hari Krishna",
        "last_name": "Dara",
        "email": "hari.vim@gmail.com",
        "homepage": ""
      },
      "release_notes": "Fixed a couple of bugs and added a new command \":FoldShowLines\" to fold away all the lines that are not part of the comma separated list of lines specified on the command-line. See description for usage.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=1237",
      "filename": "foldutil.vim",
      "script_version": "1.1",
      "date": "2002-09-23",
      "vim_version": "6.0",
      "author": {
        "user_id": "292",
        "user_name": "haridsv",
        "first_name": "Hari Krishna",
        "last_name": "Dara",
        "email": "hari.vim@gmail.com",
        "homepage": ""
      },
      "release_notes": "Fixed a couple of bugs reported by Gergely Kontra and better error messages (missing search pattern etc.)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=388",
      "filename": "foldutil.vim",
      "script_version": "1.0.0",
      "date": "2001-11-30",
      "vim_version": "6.0",
      "author": {
        "user_id": "292",
        "user_name": "haridsv",
        "first_name": "Hari Krishna",
        "last_name": "Dara",
        "email": "hari.vim@gmail.com",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
