{
  "script_id": "1972",
  "display_name": "Parameter Helpers",
  "summary": "[Programming] Useful functions for handling parameters in function calls",
  "name": "Parameter-Helpers",
  "script_type": "utility",
  "description": "This \"script\" is my initial attempt to ease a typical task that used to frustrate me: changing and moving around parameters in a typical function call.\n\nThe code is written for C/C++ programmers (as well as language that inherit that syntax): change aap( \"noot\", &mies ) to aap( &mies, \"noot\" ) in a single keystroke if you want.\n\nI'm providing this code in the hope it will help some people out. It's not a plug-in. The code works nicely though.\n\nNote that the current code does NOT handle multi-line parameter lists. This is on the TODO list.\n\nFunctions:\nSavePositions and RestorePosiions: save and restore visual and cursor position respectively. Can be called multiple times. Uses script-global variables.\nInsideQuotedString: tries to determine if the cursor is inside a quoted string in a very imprecise way. Only useful to call if something strange is happening (like operator [( not working).\nParamRangeList: the brain stem. Constructs a list of virtual column offsets for the current parameter context.\nCurrentPosition: determine the offset in the list returned by ParamRangeList based on the current cursor position.\nShiftCurrentParam: function to substitute a parameter with another based on a delta in the offset of the list ParamRangeList returned. (e.g. -1 substitutes the CurrentPosition parameter with the one to the left).\n\nExample usage (assuming g:mapleader set):\nexec \"nmap \" .g:mapleader.\"p :call VisualizeParameter(0)<CR>\"\n\" if this is false shifting a parameter at offset 0 to left is an error, trivially analogous case for right shift\n\" if it's true a shift wraps around list boundaries\nlet g:param_shift_round_robin = 1\nexec \"nmap \" .g:mapleader.\"< :call ShiftCurrentParam(-1)<CR>\"\nexec \"nmap \" .g:mapleader.\"> :call ShiftCurrentParam(1)<CR>\"\n\nEverything seems to be sort of robust, I've done some tests, but no guarantees. Typical BSD license conditions apply.\n\nN.",
  "rating_total": "-1",
  "rating_votes": "1",
  "downloads": "225",
  "install_details": "",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7423",
      "filename": "parameter_helpers.vim",
      "script_version": "0.1",
      "date": "2007-07-27",
      "vim_version": "6.0",
      "author": {
        "user_id": "12839",
        "user_name": "nielsadb",
        "first_name": "Niels",
        "last_name": "Aan de Brugh",
        "email": "nielsadb at gmail.com",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
