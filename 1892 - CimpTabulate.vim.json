{
  "script_id": "1892",
  "display_name": "CimpTabulate.vim",
  "summary": "Utility script for case tabulation in C/C++",
  "name": "CimpTabulate.vim",
  "script_type": "utility",
  "description": "This utility script is useful where you have a long list of similar, one-line case statements, and you'd like to format these statements in tabular form.\n\nThe script main function is :[range]call CimpTabulateCase(...) and it takes one optional argument. \n\nCimpTabulateCase() has three modes of tabulation: \n  * tabulation -- each sub-statement following the \"case :\" is aligned to a column\n  * compact -- only the statement immediately following the \"case :\" is aligned to a column\n  * smart tabulation -- as with tabulation, but tries to reduce the number of columns or apply compact for lines which overflow &textwidth\n\nCimpTabulateCase() interprets arguments as follows:\n  * 1 or \"^s\" -- use smart tabulation\n  * 2 or \"^c\" -- use compact tabulation\n  * all other non-empty arguments -- use normal tabulation\n\nIf CimpTabulateCase() it is used without arguments, and on the same range as it was previously used, it will cycle through the three modes of tabulation. Otherwise, it will use normal tabulation.\n\ncimp.vim defines four mappings for CimpTabulateCase():\n\n  :map <Leader>cc :call CimpTabulateCase()<CR>\n  :map <Leader>c0 :call CimpTabulateCase(0)<CR>\n  :map <Leader>c1 :call CimpTabulateCase(1)<CR>\n  :map <Leader>c2 :call CimpTabulateCase(2)<CR>\n\ncimp.vim also defines the following settings:\n\n  g:CimpPadding -- column padding, default = 1\n  g:CimpAlignSpecial -- align statements at the end of each line matching g:CimpAlignSpecialPattern in the last column, default = 1\n  g:CimpAlignSpecialPattern -- pattern for special alignment, default = \"\\^return\\\\|\\^break\"\n\nCimpTabulateCase() is probably best demonstrated using the following example: \n\n1. Add the following case statements to any buffer:\n    case kOneArg:         printf(\"Number: %d\\n\", argc); break;\n    case kTwoArgs:        printf(\"Number: %d\\n\", argc); break;\n    case kFourArgs:       printf(\"Number: %d\\n\", argc); a = b + c; break;\n    case kFifteenArgs:    printf(\"Number of args: %d\\n\"); a = b; break;\n    case TwentyThreeArgs: printf(\"Number of args are way too many: %d\\n\"); break;\n\n2. :se tw=80\n\n3. At the first case statement, try the following normal commands: \n\n  5\\c0 -- normal tabulation\n  5\\c1 -- smart tabulation\n  5\\c2 -- compact tabulation\n  5\\cc -- cycle to normal tabulation\n\nOf course you can also select a range using visual mode, and then\n\n  \\c0\n  gv\\c1\n  gv\\c2\n  gv\\cc\n\nImprovement suggestions and bug submissions are welcome.",
  "rating_total": "6",
  "rating_votes": "3",
  "downloads": "188",
  "install_details": ":so /path/to/cimp.vim",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7086",
      "filename": "cimp.vim",
      "script_version": "1.0",
      "date": "2007-05-09",
      "vim_version": "7.0",
      "author": {
        "user_id": "12375",
        "user_name": "spiiph",
        "first_name": "Henrik",
        "last_name": "Ã–hman",
        "email": "speeph at gmail.com",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
