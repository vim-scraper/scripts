{
  "script_id": "840",
  "name": "text.py",
  "summary": "This is utility to easy access to vim buffer. For pythonic macrowriters",
  "script_type": "utility",
  "description": "This is text.py module for easy association of vim buffer to python language. Module provides Text-calss, which has access vim buffer contents, and has many of string, sequense and file-object methods. You may use slice, may use assignment to slice of buffer, and you can use step argument in this assignment in python 2.3 notation. You can use all of string methods like .upper(), .lower(), .center() etc. You can use many of sequence methods like .append(), .extend(), .reverse() etc. You can use a lot of binary operators like +=, *=; membership test \"in\" etc. Moreover, Text-instance provide some facilities to work with regular expressions including situations when text in buffer is in multibyte encoding. Searching takes place in unicode, but module provides some new match object: \"NoUniMatchObj\". This object has all of original match objects attributes but when you expect to get a string, you get a string not unicode. And when you expect to get address (byte-offset) you get address in encoded string too.\n\nSimple example:\n~~~~~~~~~~~~~~~\nimport text\nt = text.Text()\nfor i in t.re.finditer(my_regexp):    # search my_regexp in buffer\n    try:\n        t.replace_i(i.start(),            # interactive replace fragment of\n                    i.end(),              #   buffer from i.start() to i.end()\n                                          #   where i is an instance of\n                                          #   NoUniMatchObj\n                    [\"replasement one\",   # There are a lot of substitutions,\n                     my_function(i), ...])#   user can choose one of them.\n    except t.exceptions.CancelDialog:\n        pass                            # handler of Cancel button\nt.center(80)                            # centering contents of buffer\nt.apply_to_lines(my_other_function)     # apply my_other_function line by line \n\nAnother powerful example you can see in vimscript#841\n\nThis utility very useful if you need to do python-substitution using confirmation dialogs, for example if you need to choose a lot of various replacements. This is useful too if you work with utf-8 encoding etc.\n\nRussian mirror: http://python.anabar.ru/emin.htm#textpy\n",
  "rating_total": "1",
  "rating_votes": "1",
  "downloads": "332",
  "install_details": "1) Make in your harddrive some directory for python-vim programs (let it name   is /pythonvim/). And put text.py into this directory.\n2) Instract python to use this directory like sourse of modules. One way to   do this is put following string into your .vimrc file:\n:py import sys; sys.path.insert(0, r\"/pythonvim/\")\n   NOTE: in some systems you must put absolute address into sys.path list.\n   NOTE: be careful about slash direction, this is system-depended.\n\nThat is all. Happy vimming.\n\n--------------------------------------------------------------------------------\nCompatibility note:\n\nThis program writen for Python 2.3. But it is already compatible with\nPython 2.2. And for compatibility with Python 2.1 you may do some actions:\nsome code need to be comment and some to uncomment.\n\nFor compatibility with python 2.1 open this program in vim and execute\n  following command:\n:%s/^\\(\\s*\\)\\(.*#<p21c>\\)$/\\1## \\2/|%s/^\\(\\s*\\)##\\s\\+\\(.*#<p21u>\\)$/\\1\\2/|w!\nBe careful, use copy&paste:\n      1) put cursor after the colon and type y$\n      2) Then type : to go into command line and type <C-R>\"\nThis command comment section using 'yield' statement and import generators\n  feature. Then it is uncomment compatibility blocks: raise instraction in\n  finditer() method and import nested_scopes feature.\nFor undoing this changes execute in vim following command:\n:%s/^\\(\\s*\\)\\(.*#<p21u>\\)$/\\1## \\2/|%s/^\\(\\s*\\)##\\s\\+\\(.*#<p21c>\\)$/\\1\\2/|w!\n ",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2571",
      "filename": "text104.zip",
      "script_version": "1.0.4",
      "date": "2003-12-08",
      "vim_version": "6.0",
      "author": {
        "user_id": "3883",
        "user_name": "emin",
        "first_name": "Eugene",
        "last_name": "Minkovskii",
        "email": "emin at mccme.ru",
        "homepage": ""
      },
      "release_notes": "1.0.4 -- Some spell check of documentation. Thanks to all helpers.\n         new raise instractions with some help for developers.\n         Bugfix in re.subn() method."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2540",
      "filename": "text103.zip",
      "script_version": "1.0.3",
      "date": "2003-12-04",
      "vim_version": "6.0",
      "author": {
        "user_id": "3883",
        "user_name": "emin",
        "first_name": "Eugene",
        "last_name": "Minkovskii",
        "email": "emin at mccme.ru",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
