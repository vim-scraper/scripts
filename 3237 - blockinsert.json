{
  "script_id": "3237",
  "display_name": "blockinsert",
  "summary": "Easy Insert/Append to a paragraph of text",
  "name": "blockinsert",
  "script_type": "utility",
  "description": "                   Easy Insert/Append to a paragraph of text\n\nBlockinsert can take a range but if no such is given it will act upon the\ncurrent paragraph.\n\n        First line of code\n            Another line of code\n    Yet another one\n        Last line of code\n\n1.1 Insert\n\n[count] \\i - will transform the above into: (count 3 used)\n\n        ---First line of code\n            ---Another line of code\n    ---Yet another one\n        ---Last line of code\n\n1.2 Append\n\n[count] \\a > will transform the above into: (count 2 used)\n\n        ---First line of code>>\n            ---Another line of code>>\n    ---Yet another one>>\n        ---Last line of code>>\n\n1.3 Delete\n\n[count] \\i or \\a without any text will delete as many characters: (3\\i used)\n\n        First line of code>>\n            Another line of code>>\n    Yet another one>>\n        Last line of code>>\n\n1.4 Act on both ends\n\n[count] \\[] will use both \\i and \\a: (2\\[] * ** used)\n\n        Note: the same [count] will be applied to both operations\n\n        **First line of code>>****\n            **Another line of code>>****\n    **Yet another one>>****\n        **Last line of code>>****\n\n1.5 Act on both ends using the same text\n\n[count] \\[[ will use both \\i and \\a and the same text: (| used)\n\n        |**First line of code>>****|\n            |**Another line of code>>****|\n    |**Yet another one>>****|\n        |**Last line of code>>****|\n\n1.6 Record\n\n\\qi, \\qa and \\q[] will execute rather than write the text in input.\n\nExample with \\qa gUaW:\n\n        |**First line of CODE>>****|\n            |**Another line of CODE>>****|\n    |**Yet another ONE>>****|\n        |**Last line of CODE>>****|\n\n==========================================================\n\nThere is one special case. When selecting text in visual block mode, the\nboundaries of the text acted upon are defined by the limits of the visual area.\n\nExample: (the <bar>s represent our selection)\n\n    Some text here                |stridx(      |       end of this line\n    Some other text...            |strridx(     |       text after a function\n    Let's start a third line       |strlen(      |       ...finish this line\n    End of paragraph            |substitute(|       end indeed.\n\nNow that a selection has been defined, all you need to do is type:\n\\a followed by )\nand your text will become:\n\n    Some text here                 stridx()              end of this line\n    Some other text...             strridx()             text after a function\n    Let's start a third line        strlen()              ...finish this line\n    End of paragraph              substitute()       end indeed.\n\n==========================================================\n\nFor all this to work you MUST define your custom mappings in your vimrc:\n\nvmap <leader>i  <plug>blockinsert-i\nvmap <leader>a  <plug>blockinsert-a\nvmap <leader>qi <plug>blockinsert-qi\nvmap <leader>qa <plug>blockinsert-qa\n\nnmap <leader>i  <plug>blockinsert-i\nnmap <leader>a  <plug>blockinsert-a\nnmap <leader>qi <plug>blockinsert-qi\nnmap <leader>qa <plug>blockinsert-qa\n\nvmap <leader>[]  <plug>blockinsert-b\nvmap <leader>[[  <plug>blockinsert-ub\nvmap <leader>]]  <plug>blockinsert-ub\nvmap <leader>q[] <plug>blockinsert-qb\nvmap <leader>q[[ <plug>blockinsert-uqb\nvmap <leader>q]] <plug>blockinsert-uqb\n\nnmap <leader>[]  <plug>blockinsert-b\nnmap <leader>[[  <plug>blockinsert-ub\nnmap <leader>]]  <plug>blockinsert-ub\nnmap <leader>q[] <plug>blockinsert-qb\nnmap <leader>q[[ <plug>blockinsert-uqb\nnmap <leader>q]] <plug>blockinsert-uqb\n\nNote: You can replace \\i, \\a, \\qi, \\qa, \\[], \\[[, \\]], \\q[], \\q[[, \\q]]\n      with whatever you like.",
  "install_details": "blockinsert.vim --> ~/.vim/plugin\nblockinsert.txt  --> ~/.vim/doc\n\nLatest version at:\nhttps://github.com/kurkale6ka/vim-blockinsert",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13874",
      "filename": "blockinsert.zip",
      "script_version": "4.1",
      "date": "2010-09-20",
      "vim_version": "7.0",
      "author": {
        "user_id": "14686",
        "user_name": "Mitko",
        "first_name": "Dimitar",
        "last_name": "Dimitrov",
        "email": "mitkofr@yahoo.fr",
        "homepage": ""
      },
      "release_notes": "A single line is a valid range now"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13857",
      "filename": "blockinsert.zip",
      "script_version": "4.0",
      "date": "2010-09-18",
      "vim_version": "7.0",
      "author": {
        "user_id": "14686",
        "user_name": "Mitko",
        "first_name": "Dimitar",
        "last_name": "Dimitrov",
        "email": "mitkofr@yahoo.fr",
        "homepage": ""
      },
      "release_notes": "Deletion:\n    made it work correctly in visual block mode\n    repeating it doesn't require to re-enter empty text anymore\n\nImproved interactive messages\n\nAdded support for right to left editing\n\nDefined g:blockinsert_commands and used it to disable blockinsert commands by\ndefault\n\nWhen repeating actions performed on a visual block selection, blank portions of\ntext in the new area will be correctly skipped.\n\nCorrected the virtualedit mess. Still need to disable it though.\nRenamed the commands to begin with Block... & created Block[Q]BothSame.\nUpdated the help file."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13846",
      "filename": "blockinsert.zip",
      "script_version": "3.2",
      "date": "2010-09-17",
      "vim_version": "7.0",
      "author": {
        "user_id": "14686",
        "user_name": "Mitko",
        "first_name": "Dimitar",
        "last_name": "Dimitrov",
        "email": "mitkofr@yahoo.fr",
        "homepage": ""
      },
      "release_notes": "The mappings can now operate on a visual block area defined anywhere.\nThe . (dot) is able to repeat that action now."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13842",
      "filename": "blockinsert.zip",
      "script_version": "3.1",
      "date": "2010-09-16",
      "vim_version": "7.0",
      "author": {
        "user_id": "14686",
        "user_name": "Mitko",
        "first_name": "Dimitar",
        "last_name": "Dimitrov",
        "email": "mitkofr@yahoo.fr",
        "homepage": ""
      },
      "release_notes": "Corrected a small regression which made the use of . (dot) impossible."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13841",
      "filename": "blockinsert.zip",
      "script_version": "3.0",
      "date": "2010-09-16",
      "vim_version": "7.0",
      "author": {
        "user_id": "14686",
        "user_name": "Mitko",
        "first_name": "Dimitar",
        "last_name": "Dimitrov",
        "email": "mitkofr@yahoo.fr",
        "homepage": ""
      },
      "release_notes": "New feature:\n\nAdded the possibility to define the boundaries of the text acted upon by drawing a visual block selection.\n\nExample: (the <bar>s represent our selection)\n\n    Some text here                |stridx(       |       end of this line\n    Some other text...            |strridx(      |       text after a function\n    Let's start a third line       |strlen(       |       ...finish this line\n    End of paragraph             |substitute(|       end indeed.\n\nNow that a selection has been defined, all you need to do is type:\n\\a followed by )\nand your text will become:\n\n    Some text here                 stridx()           end of this line\n    Some other text...             strridx()          text after a function\n    Let's start a third line        strlen()           ...finish this line\n    End of paragraph              substitute()    end indeed.\n\nEnjoy.\n\ntodo: Add the possibility to repeat this action by typing . (dot)\ntodo: Create \\[[, \\]], \\q[[, \\q]] for cases where we want the same text on both ends."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13835",
      "filename": "blockinsert.zip",
      "script_version": "2.1",
      "date": "2010-09-15",
      "vim_version": "7.0",
      "author": {
        "user_id": "14686",
        "user_name": "Mitko",
        "first_name": "Dimitar",
        "last_name": "Dimitrov",
        "email": "mitkofr@yahoo.fr",
        "homepage": ""
      },
      "release_notes": "2 bug fixes:\n\n- If a count was used with \\qi, \\qa or \\q[], it wasn't interpreted correctly.\n- There was also a problem with reseting virtualedit to its original value."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13829",
      "filename": "blockinsert.zip",
      "script_version": "2.0",
      "date": "2010-09-14",
      "vim_version": "7.0",
      "author": {
        "user_id": "14686",
        "user_name": "Mitko",
        "first_name": "Dimitar",
        "last_name": "Dimitrov",
        "email": "mitkofr@yahoo.fr",
        "homepage": ""
      },
      "release_notes": "Improved integration with the 'repeat' plugin.\n\nThe inserted / appended text is now remembered,\nyou don't have to re-enter it when repeating."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13817",
      "filename": "blockinsert.zip",
      "script_version": "1.1",
      "date": "2010-09-13",
      "vim_version": "7.0",
      "author": {
        "user_id": "14686",
        "user_name": "Mitko",
        "first_name": "Dimitar",
        "last_name": "Dimitrov",
        "email": "mitkofr@yahoo.fr",
        "homepage": ""
      },
      "release_notes": "Integrated blockinsert with Tim Pope's repeat plugin.\nIt is now possible to repeat blockinsert mappings by pressing . (dot)\n\nMore info about repeat:\nhttp://www.vim.org/scripts/script.php?script_id=2136\nhttp://github.com/tpope/vim-repeat"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13816",
      "filename": "blockinsert.zip",
      "script_version": "1.0",
      "date": "2010-09-13",
      "vim_version": "7.0",
      "author": {
        "user_id": "14686",
        "user_name": "Mitko",
        "first_name": "Dimitar",
        "last_name": "Dimitrov",
        "email": "mitkofr@yahoo.fr",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
