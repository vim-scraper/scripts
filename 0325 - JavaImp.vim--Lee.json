{
  "script_id": "325",
  "display_name": "JavaImp.vim -- Lee",
  "summary": "Insert and sort Java import statements, view JavaDoc from class name, and more.",
  "name": "JavaImp.vim--Lee",
  "script_type": "utility",
  "description": "This script can generate a Java class name to package mapping file from multiple source paths.  Once you have create the mapping file,  you can use this file to insert import statements in your .java file using a simple key mapping.  It can also sort your imports too!  \n\nJavaImp can also be integrated with JavaDoc, where you can lookup APIs very quickly by just hitting a hot key on a class name.  This script can save the time you spent looking up docs and typing in routine import package names.  Give it a try!",
  "install_details": "REQUIREMENTS:\n  - It's recommended that you have the Unix \"sort\" binary (or the Windows's\n  \"sort\" or cygwin's \"sort\" will do) in your path.   For the jar support you\n  also need to have the\n  \"jar\" binary in your path.\n  - To use JavaDoc viewing, you probably need to have a pager like \"w3m\" or\n  \"lynx\".  You can also use your usual web browser for this.  You do not\n  really need this if you do not use the JavaDoc viewing feature.\n\nUSAGE:\n  Put this file in your ~/.vim/plugin directory.\n\n  You need to set two global variables in your .vimrc in order for this to\n  work:\n\n      let g:JavaImpPaths = \"...\"\n      let g:JavaImpDataDir = \"...\"\n\n  The g:JavaImpPaths is a comma separated list of paths that point to the\n  roots of the 'com' or 'org' etc.\n\n  For example: if you have your Java source files in\n  /project/src/java/com/blah and /project2/javasrc/org/blah...., you'll put\n  this in your .vimrc file:\n\n      let g:JavaImpPaths = \"/project/src/java,/project2/javasrc\"\n\n  If there are too many paths, you can split them into separate lines:\n\n      let g:JavaImpPaths = \"/project/src/java,\" .\n         \\ \"/project2/javasrc,\" .\n         \\ \"/project3/javasrc\"\n\n  Note: Don't forget the ',' to separate the paths.\n\n  If ',' is not convenient for you, set g:JavaImpPathSep to the\n  (single-character) separator you would like to use:\n\n      let g:JavaImpPathSep = ':'\n\n  The g:JavaImpDataDir is a directory that you use to store JavaImp\n  settings and cache files. Default is:\n\n      let g:JavaImpDataDir = $HOME . \"/vim/JavaImp\"\n\n  Note: Since version 2.1, the \"g:JavaImpDataDir\" variable replaces\n  \"g:JavaImpClassList\" and \"g:JavaImpJarCache\".  If \"g:JavaImpClassList\" and\n  \"g:JavaImpJarCache\" are not set, then they default to\n  \"g:JavaImpDataDir/JavaImp.txt\" and \"g:JavaImpDataDir/cache/\" accordingly.\n  The files and directory will be created automatically when you generate\n  the JavaImp.txt file.  It's recommended that you to use the\n  g:JavaImpDataDir variable instead.\n\n  Now you are ready for some actions.  You can now do a:\n\n      :JavaImpGenerate or :JIG\n\n  If you have not created the directory for g:JavaImpDataDir yet, this will\n  create the appropriate paths.  JIG will go through your JavaImpPaths and\n  search for anything that ends with .java, .class, or .jar.  It'll then\n  write the mappings to the JavaImp.txt and/or the cache files.\n  \n  After you've generated your JavaImp.txt file, move your cursor to a class name\n  in a Java file and do a:\n\n      :JavaImp or :JI\n\n  And the magic happens!  You'll realize that you have an extra import\n  statement inserted after the last import statement in the file.  It'll\n  also prompts you with duplicate class names and insert what you have\n  selected.  If the class name is already imported, it'll do nothing.  \n\n  Doing a:\n\n      :JavaImpSilent\n\n  will do a similar thing with less verbosity.  This is useful to be used in\n  another script.\n\n  You can also sort the import statements in the file by doing:\n\n      :JavaImpSort or :JIS\n\n  Source Viewing\n  --------------\n\n  JavaImp will try to find the source file of the class under your cursor\n  by:\n\n      :JavaImpFile or :JIF\n      \n  Doing a :JavaImpFileSplit or :JIFS will open a splitted window on the\n  file.\n\n  JavaDoc Viewing\n  ---------------\n  If you want to use the JavaDoc viewing feature for JavaImp, you should set\n  g:JavaImpDocPaths.  Similar to how you set the g:JavaImpPaths,\n  g:JavaImpDocPaths contains a list of root level directories that contains\n  your java docs.  This, together with a HTML pager (like w3m or lynx on\n  Unix), let you view the JavaDocs very quickly by just hitting :JID on a\n  class name.  For example, you can set:\n\n      let g:JavaImpDocPaths = \"/usr/java/docs/api,\" .\n         \\ \"/project/docs/api\"\n\n  The default pager is set to:\n\n      let g:JavaImpDocViewer = \"w3m\"\n  \n  On windows, you can put iexplore.exe or mozilla.exe in your path and set\n  the g:JavaImpDocViewer to \"iexplore.exe\" or \"mozilla.exe\".  Note that\n  windows' shell and spaces in the path don't mix. Thus, given an absolute\n  path of the HTML viewer to g:JavaImpDocViewer may not work.\n\n  If you have your g:JavaImpDocPaths and g:JavaImpDocViewer set correctly\n  You can then do this with your cursor on a classname:\n\n      :JavaImpDoc or :JID \n\n  JavaImp will find your class accordingly and open the viewer to the\n  class based on the import list that you've generated by :JIG.  You can\n  also set in your java.vim  filetype plugin to get a similar man page\n  behavior by press \"K\":\n\n      nmap <buffer> K :JID<CR>\n\n  Other Settings\n  --------------\n  You can make the following settings in your .vimrc file:\n\n  (Deprecated in 2.1) The g:JavaImpClassList is a file you specify to store\n  the class mappings.  The default is set to:\n  \n      let g:JavaImpClassList = g:JavaImpDataDir . \"/JavaImp.txt\"\n\n  (Deprecated in 2.1, enabled by default and set relative to the\n  g:JavaImpDataDir) It's recommended that you set a directory for the\n  caching result for your jar files.  JavaImp saves the result from each\n  \"jar\" command in this directory. The default is set to:\n\n      let g:JavaImpJarCache = g:JavaImpDataDir . \"/cache\"\n\n  (In in 2.1, g:JavaImpSortBin is set to \"sort\", so this is disabled by\n  default) The sorting algorithm gives preferences to the java.* classes.\n  You can turn this behavior off by putting this in your .vimrc file.\n\n      let g:JavaImpSortJavaFirst = 0\n\n  NOTE: If you do not have a sort binary, set the following to \"\", and\n  JavaImp will use the pure Vim implementation.  However, if\n  JavaImpClassList gets too huge, the sorting might choke. If you\n  are on a unix machine or you have the sort binary in your path, it's\n  recommended that you set (or leave it as default):\n\n      let g:JavaImpSortBin = \"sort\" \n\n  By default, the sort algorithm will insert a blank line among package\n  group with package root for 2 similar levels.  For example, the import of\n  the following:\n\n      import java.util.List;\n      import org.apache.tools.zip.ZipEntry;\n      import javax.mail.search.MessageNumberTerm;\n      import java.util.Vector;\n      import javax.mail.Message;\n      import org.apache.tools.ant.types.ZipFileSet;\n\n  will become:\n\n      import java.util.List;\n      import java.util.Vector;\n\n      import javax.mail.Message;\n      import javax.mail.search.MessageNumberTerm;\n\n      import org.apache.tools.ant.types.ZipFileSet;\n      import org.apache.tools.zip.ZipEntry;\n\n  Note the classes that begins similar package root with two beginning\n  levels of package hierarchy are stuck together.  You can set the\n  g:JavaImpSortPkgSep to change this behavior.  The default\n  g:JavaImpSortPkgSep is set to 2.  Do not set it too high though for you'll\n  insert a blank line after each import.  If you do not want to insert blank\n  lines among the imports, set:\n\n      let g:JavaImpSortPkgSep = 0\n\n  Be warned that g:JavaImpSortRemoveEmpty has no effect if\n  g:JavaImpSortPkgSep is set.\n\n  Extras\n  ------\n  After you have generated the JavaImp.txt file by using :JIG, you can use\n  it as your dictionary for autocompletion.  For example, you can put the\n  following in your java.vim ftplugin (note here g:JavaImpDataDir is set\n  before running this):\n\n  exe \"setlocal dict=\" . g:JavaImpDataDir . \"/JavaImp.txt\"\n  setlocal complete-=k\n  setlocal complete+=k\n  \n  or put this in your .vimrc\n  \n  exe \"set dict=\" . g:JavaImpDataDir . \"/JavaImp.txt\"\n  set complete-=k\n  set complete+=k\n\n  After you have done so, you can open a .java file and use ^P and ^N to\n  autocomplete your Java class names.\n\n  Importing your JDK Classes\n  --------------------------\n  JavaImp also support a file type called \"jmplst\".  A jmplst file\n  essentially contains the output of a \"jar tf\" command.  It is mainly use\n  in the case where you want to import some external classes in JavaImp but\n  you do not have the source directory nor the jar file.  For example, you\n  can import the JDK classes, which can be located in $JAVA_HOME/src.jar\n  (different in different distributions) with your JDK distribution,\n  by using the jmplst file:\n\n  To expose the standard JDK classes to JavaImp:\n\n  1. If you have \"sed\":\n     > jar tf $JAVA_HOME/src.jar | sed -e 's#^src/##' > jdk.jmplst\n\n     If you do not have \"sed\":\n     > jar tf $JAVA_HOME/src.jar > jdk.jmplst\n     > vim jdk.jmplst\n     [Execute the following vim commands:]\n\n     1G0<C-v>Gllld:w\n\n     [ This will select vertically the all the \"src/\" prefixes and delete\n     them, then save the file. Essentially, we want to get rid of the src\n     directory otherwise it'll screw up the import statements. ]\n\n  2. Put the jdk.jmplst in a directory that you've added in your\n     g:JavaImpPaths.  For example, I put my jdk.jmplst in\n     $HOME/vim/JavaImp/jmplst directory, and add $HOME/vim/JavaImp/jmplst to\n     g:JavaImpPaths.\n\n  3. Open vim with the JavaImp.vim loaded and Do a :JIG.  You should see\n     that JavaImp will pick up many more classes.\n\n  4. Try to do a :JI on a \"Vector\" class, for example, to see whether you\n     can add the import statement from the JDK.\n\n\n\n  Enjoy!\n\n",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3094",
      "filename": "JavaImp.vim",
      "script_version": "2.2.3",
      "date": "2004-06-04",
      "vim_version": "6.0",
      "author": {
        "user_id": "275",
        "user_name": "wlee",
        "first_name": "William",
        "last_name": "Lee",
        "email": "wl1012 at yahoo.com",
        "homepage": "http://wlee.net"
      },
      "release_notes": "Fixes a bug where JavaImp ignores files that start with 0."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3000",
      "filename": "JavaImp.vim",
      "script_version": "2.2.2",
      "date": "2004-05-07",
      "vim_version": "6.0",
      "author": {
        "user_id": "275",
        "user_name": "wlee",
        "first_name": "William",
        "last_name": "Lee",
        "email": "wl1012 at yahoo.com",
        "homepage": "http://wlee.net"
      },
      "release_notes": "Do not insert the import if the class you want to insert is in the same package of the current source file.  (Thanks to Adam Hawthorne)\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2431",
      "filename": "JavaImp.vim",
      "script_version": "2.2.1",
      "date": "2003-10-29",
      "vim_version": "6.0",
      "author": {
        "user_id": "275",
        "user_name": "wlee",
        "first_name": "William",
        "last_name": "Lee",
        "email": "wl1012 at yahoo.com",
        "homepage": "http://wlee.net"
      },
      "release_notes": "Minor bug fixes."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=1857",
      "filename": "JavaImp.vim",
      "script_version": "2.2.0",
      "date": "2003-03-26",
      "vim_version": "6.0",
      "author": {
        "user_id": "275",
        "user_name": "wlee",
        "first_name": "William",
        "last_name": "Lee",
        "email": "wl1012 at yahoo.com",
        "homepage": "http://wlee.net"
      },
      "release_notes": "Added the JavaDoc viewing and source viewing capabilities.  You can now view API calls through an HTML viewer or load up a source file from your paths.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=1847",
      "filename": "JavaImp.vim",
      "script_version": "2.1.3",
      "date": "2003-03-24",
      "vim_version": "6.0",
      "author": {
        "user_id": "275",
        "user_name": "wlee",
        "first_name": "William",
        "last_name": "Lee",
        "email": "wl1012 at yahoo.com",
        "homepage": "http://wlee.net"
      },
      "release_notes": "Added an option to override the default JavaImpPaths separator.  Fixes an error when trying to do :JI over an unamed buffer.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=1812",
      "filename": "JavaImp.vim",
      "script_version": "2.1.2",
      "date": "2003-03-14",
      "vim_version": "6.0",
      "author": {
        "user_id": "275",
        "user_name": "wlee",
        "first_name": "William",
        "last_name": "Lee",
        "email": "wl1012 at yahoo.com",
        "homepage": "http://wlee.net"
      },
      "release_notes": "Fixes a critical bug in where a single import match would put in a \"0\" as its name.  Users of 2.1.1 should update to this immediately.  Thanks Matt Paduano for pointing this out.\n"
    }
  ]
}
