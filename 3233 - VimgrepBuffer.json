{
  "script_id": "3233",
  "display_name": "VimgrepBuffer",
  "summary": "Run vimgrep on buffers",
  "name": "VimgrepBuffer",
  "script_type": "utility",
  "description": "This plugin provides easy application of the 'vimgrep' command on buffers\n(as opposed to the filesystem, which is its normal mode of operation).\nIt provides two commands: one to search just the current buffer, and the\nother to search all listed buffers.\nThe QuickFix buffer will be populated with the search results, if any, and\nopened for viewing. The search pattern will also be assigned to the search\nregister, so that matches will be highlighted if 'hlsearch' is on (':set\nhlsearch').\n\nTwo commands are provided, ':G' and ':GG'. The first limits the search to\nthe current buffer, while the second searches all listed buffers.\n\nIf you do not like the cryptic/genericness of these 'short' commands, put:\n\n    let g:vimgrepbuffer_long_command = 1\n\nin your \"~/.vimrc\", and ':VimgrepBuffer' and ':VimgrepBuffers' will be set as\nthe commands instead.\n\nThe pattern specification is *exactly* like that for 'vimgrep'.  This means\nthat if the pattern starts with a non-identifier character or contains any literal whitespace\ncharacters, for correct behavior you will have to enclose the pattern in\ndelimiter characters (e.g. \"/\", \"@\", \"#\"):\n\n   :G /\\s*print \"\\d/\n   :GG /\\s*def\\s\\+\\w\\+(/\n   :G /\\(def\\s\\+\\|class\\s\\+\\)/\n   :GG /\\cisland/\n   :G /the quick brown \\w\\+/\n   :GG /except \\+\\w\\+Error/\n\nIf your pattern starts with an identifier-character you can omit the enclosing\ndelimiters:\n\n   :G def\\s\\+\\w\\+(.*\\*\\*kwargs)\n   :GG except\\s\\+\\w\\+Error\n\nIn this latter case, the pattern will be considered to be\nwhitespace-delimited, and so if your pattern contains any literal whitespace\nyou may get incorrect results. This behavior is exactly like that of\n'vimgrep'.\n\nYou might also be interested in looking at \"grep.vim\" (http://www.vim.org/scripts/script.php?script_id=311) as an alternative for \"grep-on-buffer\" operations, especially if you want to use external grep programs.\n\"grep.vim\" provides a much broader range of functionality and commands, and is typically faster.  However, the grep dialect you will have to use is that of the external grep programs, rather than that of Vim. The main reason I wrote \"VimgrepBuffer\" (and why you might be interested in using it) is to be able to use Vim's grep dialect to express the search patterns. ",
  "rating_total": "8",
  "rating_votes": "2",
  "downloads": "49",
  "install_details": "You can use this script as a plugin by copying it to your plugin directory (e.g., \"~/.vim/plugin\")\nSee |add-global-plugin| for instructions. ",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13787",
      "filename": "vimgrepbuffer.vim",
      "script_version": "1.0.1",
      "date": "2010-09-09",
      "vim_version": "7.0",
      "author": {
        "user_id": "19500",
        "user_name": "jeetsukumaran",
        "first_name": "Jeet",
        "last_name": "Sukumaran",
        "email": "jeetsukumaran at gmail.com",
        "homepage": "http://jeetworks.org"
      },
      "release_notes": "Added examples and clarification of reg-exp behavior to script documentation comments."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13786",
      "filename": "vimgrepbuffer.vim",
      "script_version": "1.0",
      "date": "2010-09-09",
      "vim_version": "7.0",
      "author": {
        "user_id": "19500",
        "user_name": "jeetsukumaran",
        "first_name": "Jeet",
        "last_name": "Sukumaran",
        "email": "jeetsukumaran at gmail.com",
        "homepage": "http://jeetworks.org"
      },
      "release_notes": "Initial upload"
    }
  ]
}
