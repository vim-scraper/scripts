{
  "script_id": "3327",
  "display_name": "PyScratch",
  "summary": "allows processing of Python/Ruby/Perl/Lua commands directly in Vim buffer",
  "name": "PyScratch",
  "script_type": "utility",
  "description": "PyScratch is a simple plugin that lets you use any Vim buffer as a scratchpad for running and viewing the output of Python, Ruby, Perl, and Lua commands.  (Note the name 'PyScratch' is no longer accurate and will probably be changed.)  This plugin can also be found at github:\nhttps://github.com/hsitz/PyScratch\n\nYou can watch a screencast of PyScratch at:\nhttp://vimeo.com/16871727\n--------------------------------------------------\nNOTE:  You can get tab completion of your Python commands by using any of the \navailable methods of completion in Vim.  I've tried the Pydiction \ntab-completion plugin and recommend that anyone using PyScratch install Pydiction \n( http://www.vim.org/scripts/script.php?script_id=850 ) \n---------------------------------------------------\nNOTE2:  Also works with RUBY, PERL, and LUA.\nThe name PyScratch is now misleading, since code has been modified to work\nwith Ruby, Perl, and/or Lua.  The global variable g:script_language can\nbe set to 'python,'ruby','perl', or 'lua', and controls which interpreter\nis used to process '>>>' commands and code blocks.  Support for any\ninterpreter you use must be compiled into your Vim.  Note also that usng Perl \nis a little different from the other languages, because Vim does not\nsupport Perl's 'print' or 'say' commands.  Instead 'VIM::Msg' is used\nto specify printed output.   See :help perl for more.\n-------------------------------------------------- \n\nThe PyScratch plugin consists of a single vimscript file that a Vim user can\ninstall by placing it in their 'plugin' directory.\n\nPyScratch requires a Vim executable compiled with Python support. It has been\ntested with Python26 but version should not matter.\n\nOver last few years several different plugins have been designed to send \ncommands in a Vim buffer out to a shell for processing (typically scripting the \n'Gnu Screen utility), where the output can be viewed.  This works well, but for \nlanguages where Vim has built-in support some people might prefer executing the \ncommands and getting output right in the Vim buffer.  All this takes is \nredirecting the output from a supported language's command to the user's buffer \ninstead of to a message buffer.  This technique is possible only for the \nlanguages where Vim offers compile-in support, which include Python, Perl, \nRuby, Lua, MZScheme (anything else?)  This plugin is specific to Python but it \nshould be relatively easy to extend to other supported languages.\n\nWhen the PyScratch plugin is loaded you can process Python commands and get \nPython output in your Vim buffer in several different ways:\n\n(1)  Prepend a '>>>' user prompt as first characters in a line, then press \n<enter>.  The command will be evaluated and results will be shown beginning in \nthe next line.  Commands that provide no output have the command itself \nmirrored as output as confirmation that they have been processed.  You will \ntypically want to issue Python print commands, and these can be abbreviated \nwith 'p' instead of 'print'.  Some examples:\n\n>>> print 8 + 16\n24\n>>> p 8 + 16\n24\n>>> import sys\n( import sys )\n>>> for i in range(5): print i\n1\n2\n3\n4\n5\n>>> etc. etc.\n\n(2)  You can execute a block of lines at one time by visually selecting them \nand pressing <ctrl_enter>.  The block should be a clean block of code with no \nuser prompt chars (i.e, '>>>') at left margin.  Output will be returned below \nthe block of lines.  Note that this method uses <ctrl-enter> rather than the \nsimple <enter> of the single-line-prompt method.\n\n(3)  It's not part of the plugin, but an entire file of Python can be executed \nwith the Vim command:   pyfile <filename>.  The plugin does not capture any \noutput from this command, however functions defined in the file can may then be \naccessed in the Vim buffer using single-line-prompt Python commands or the \nblock-select Python processing.\n\nThe plugin has a couple of lines defining a syntax region for error messages \nand a highlight command that displays them in red.  This may be overwritten by \na syntax file that clears all syntax settings so if you want to use these you \nmay want to move the syntax and the highlight command to a syntax and color \nfile, respectively.\n\nThis is just a Sunday afternoon hack and there are lots of little tweaks and \nimprovements that could be added.   I'd be happy to hear comments or \nsuggestions. . . \n",
  "install_details": "Put the pyscratch.vim file in your .vim/plugin or vimfiles/plugin directory.  Functionality will then be available in any Vim buffer.",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=14329",
      "filename": "PyScratch-015.zip",
      "script_version": "0.15",
      "date": "2010-11-20",
      "vim_version": "7.0",
      "author": {
        "user_id": "23015",
        "user_name": "hsitz",
        "first_name": "Herbert",
        "last_name": "Sitz",
        "email": "hesitz at gmail.com",
        "homepage": ""
      },
      "release_notes": "Added support for Ruby, Perl, and Lua"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=14273",
      "filename": "PyScratch-0-11.zip",
      "script_version": "0.11",
      "date": "2010-11-16",
      "vim_version": "7.0",
      "author": {
        "user_id": "23015",
        "user_name": "hsitz",
        "first_name": "Herbert",
        "last_name": "Sitz",
        "email": "hesitz at gmail.com",
        "homepage": ""
      },
      "release_notes": "Fixed major bug that interfered with entering <CR> when in insert mode."
    }
  ]
}
