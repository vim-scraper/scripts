{
  "script_id": "2086",
  "display_name": "code-snippet",
  "summary": "Simple input assistance of code snippets",
  "name": "code-snippet",
  "script_type": "utility",
  "description": "FILE COMPOSITION:\n\nplugin/code-snippet.vim : a script file.\ndoc/code-snippet.txt : an English help file.\ndoc/code-snippet.jax : a Japanese help file.\n\nSUMMARY:\n\nThis plugin provides a simple input assistance of code snippets.  A code snippet is an idiom much used in source codes or markuped texts.  Here are the basic steps to use (and they are almost all).\n\n        1. Register snippets (generally in filetype plugins).\n        2. Type a trigger string in the insert mode.\n        3. Press <S-CR> or <C-CR> to expand a snippet, and jump to each next/previous placeholder.\n        4. Press <CR> to fill in a placeholder.\n\nSnippets are registered as abbreviations.  You can therefore expand them by pressing <Esc> like mere abbreviations.\n\nPlaceholders can contain default strings.\n\nThis plugin is well configurable.  You can configure these points.\n\n        * Map commands to other keys.\n        * Use the select mode instead of the visual mode.\n        * Change the format of placeholders in general or buffer-local.\n\nEXAMPLE:\n\nType like this in the commandline mode.\n\n        :StringAbbrLocal fputs() \"fputs([~str~], [~fp:stderr~])[~~]\"\n\nThen type like this in the insert mode.\n\n        fputs()\n\nAnd press <S-CR>.\n\n        fputs([~str~], [~fp:stderr~])[~~]\n\nThe line is expanded like above and \"[~str~]\" is selected in the visual mode.  \"[~ ... ~]\" is a placeholder.  Each time you press <S-CR>, the cursor jumps to the next placeholder.  Press <C-CR> to jump back to the previous placeholder.\n\nWhen you press <CR>, the placeholder under the cursor is cut and Vim switches to the insert mode.  So that you can fill in the place.  Pressing <CR> at the second placeholder \"[~fp:stderr~]\", the default string \"stderr\" is inserted.  If you want to insert another word, it can be deleted by pressing <C-U> (see :help i_Ctrl-U).\n\nThe last empty placeholder \"[~~]\" is not selected by <S-CR>, but simply deleted so that you can insert a semicolon and so on.",
  "install_details": "Extend the zip file to \"%HOME\\vimfiles\\\" (Windows) or \"$HOME/.vim/\" (*nix).  Then open \"code-snippet.txt\" with Vim under \"%HOME\\vimfiles\\doc\\\" or \"$HOME/.vim/doc/\", and type \":helptags .\" as an ex command to register help files.\n\nTo enable loading plugins and indent files for particular file types, it is recomended to add this line to your .vimrc file.\n\n        filetype plugin indent on\n\nIt is not required for running this plugin, but necessary for registering snippets for particular file types.  And the setting makes it easy to register multi-line snippets. See \":help filetype\".\n\nOn most terminal emulators, and some other systems, <S-CR> and <C-CR> of the default key mappings may not work.  In those conditions, You should therefore map the commands to other keys.  See \":help code-snippet-mappings\".\n\nIt is same as installing other plugins.  See \":help add-plugin\" and \":help add-local-help\" for more information.",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8026",
      "filename": "code-snippet-2007-12-04a.zip",
      "script_version": "071204a",
      "date": "2007-12-04",
      "vim_version": "7.0",
      "author": {
        "user_id": "13526",
        "user_name": "MIYAKAWA Taku",
        "first_name": "Taku",
        "last_name": "Miyakawa",
        "email": "miyakawa.taku@gmail.com",
        "homepage": "http://d.hatena.ne.jp/miyakawa_taku/"
      },
      "release_notes": "* Rewrote the Japanese help file."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8024",
      "filename": "code-snippet-2007-12-04.zip",
      "script_version": "071204",
      "date": "2007-12-04",
      "vim_version": "7.0",
      "author": {
        "user_id": "13526",
        "user_name": "MIYAKAWA Taku",
        "first_name": "Taku",
        "last_name": "Miyakawa",
        "email": "miyakawa.taku@gmail.com",
        "homepage": "http://d.hatena.ne.jp/miyakawa_taku/"
      },
      "release_notes": "* Corrected help files.  Placeholders were still written as \"(_ ... _)\".\n* Sorry, changed again the default format of placeholders from \"[| ... |]\" to \"[~ ... ~]\".  The format of \"[| ... |]\" causes a trouble in help files."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8017",
      "filename": "code-snippet-2007-12-03.zip",
      "script_version": "071203",
      "date": "2007-12-02",
      "vim_version": "7.0",
      "author": {
        "user_id": "13526",
        "user_name": "MIYAKAWA Taku",
        "first_name": "Taku",
        "last_name": "Miyakawa",
        "email": "miyakawa.taku@gmail.com",
        "homepage": "http://d.hatena.ne.jp/miyakawa_taku/"
      },
      "release_notes": "* Fixed a bug that \"|\" is not escaped to <Bar> in :StringAbbr...\n* Changed the default format of placeholders from \"(_ ... _)\" to \"[| ... |]\"."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8016",
      "filename": "code-snippet-2007-12-02.zip",
      "script_version": "071202",
      "date": "2007-12-02",
      "vim_version": "7.0",
      "author": {
        "user_id": "13526",
        "user_name": "MIYAKAWA Taku",
        "first_name": "Taku",
        "last_name": "Miyakawa",
        "email": "miyakawa.taku@gmail.com",
        "homepage": "http://d.hatena.ne.jp/miyakawa_taku/"
      },
      "release_notes": "Initial upload"
    }
  ]
}
