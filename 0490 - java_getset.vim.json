{
  "script_id": "490",
  "name": "java_getset.vim",
  "summary": "Automatically add getter/setters for Java properties (including array-based)",
  "script_type": "utility",
  "description": "This filetype plugin enables a user to automatically add getter/setter\nmethods for Java properties.  The script will insert a getter, setter,\nor both depending on the command/mapping invoked.  Users can select\nproperties one at a time, or in bulk (via a visual block or specifying a\nrange).  In either case, the selected block may include comments as they\nwill be ignored during the parsing.  For example, you could select all\nof these properties with a single visual block.\n\npublic class Test \n{ \n   // Start your selection here\n   private static int count;\n\n   /** The name */\n   private String name;\n\n   /** The array of addresses */\n   private String[] address;\n   // End your selection here\n\n   public static void main(String[] args)\n   {\n   }\n}\n\nThe script will also add the 'static' modifier to the method if the\nproperty was declared as 'static'.  Array-based properties will get\nadditional methods added to support indexing.  In addition, if a\nproperty is declared 'final', it will not generate a setter for it.\nIf a previous getter OR setter exists for a property, the script will\nnot add any methods (under the assumption that you've manually added\nyour own).\n\nThe getters/setters that are inserted can be configured by the user.\nFirst, the insertion point can be selected.  It can be one of the\nfollowing: before the current line / block, after the current line /\nblock, or at the end of the class (default).  Finally, the text that is\ninserted can be configured by defining your own templates.  This allows\nthe user to format for his/her coding style.  For example, the default\nvalue for s:javagetset_getterTemplate is:\n\n    /**\n     * Get %varname%.\n     * \n     * @return %varname% as %type%.\n     */\n    %modifiers% %type% %funcname%()\n    {   \n        return %varname%;\n    }\n\nWhere the items surrounded by % are parameters that are substituted when\nthe script is invoked on a particular property.  For more information on\nconfiguration, please see the section below on the INTERFACE.\n\nINTERFACE (commands, mappings, and variables) \nThe following section documents the commands, mappings, and variables\nused to customize the behavior of this script.\n\nCommands:\n  :InsertGetterSetter\n      Inserts a getter/setter for the property on the current line, or\n      the range of properties specified via a visual block or x,y range\n      notation.  The user is prompted to determine what type of method\n      to insert.\n  \n  :InsertGetterOnly\n      Inserts a getter for the property on the current line, or the\n      range of properties specified via a visual block or x,y range\n      notation.  The user is not prompted.\n  \n  :InsertSetterOnly\n      Inserts a setter for the property on the current line, or the\n      range of properties specified via a visual block or x,y range\n      notation.  The user is not prompted.\n  \n  :InsertBothGetterSetter\n      Inserts a getter and setter for the property on the current line,\n      or the range of properties specified via a visual block or x,y\n      range notation.  The user is not prompted.\n\nMappings:\n  The following mappings are pre-defined.  You can disable the mappings\n  by setting a variable (see the Variables section below).  The default\n  key mappings use the <LocalLeader> which is the backslash key by\n  default '&#039.  This can also be configured via a variable (see below).\n  \n  <LocalLeader>p   (or <Plug>JavagetsetInsertGetterSetter)\n      Inserts a getter/setter for the property on the current line, or\n      the range of properties specified via a visual block.  User is\n      prompted for choice.\n  \n  <LocalLeader>g   (or <Plug>JavagetsetInsertGetterOnly)\n      Inserts a getter for the property on the current line, or the\n      range of properties specified via a visual block.  User is not\n      prompted.\n  \n  <LocalLeader>s   (or <Plug>JavagetsetInsertSetterOnly)\n      Inserts a getter for the property on the current line, or the\n      range of properties specified via a visual block.  User is not\n      prompted.\n  \n  <LocalLeader>b   (or <Plug>JavagetsetInsertBothGetterSetter) \n      Inserts both a getter and setter for the property on the current\n      line, or the range of properties specified via a visual block.\n      User is not prompted.\n  \n  If you want to define your own mapping, you can map whatever you want\n  to <Plug>JavagetsetInsertGetterSetter (or any of the other <Plug>s\n  defined above).  For example,\n\n      map <buffer> <C-p> <Plug>JavagetsetInsertGetterSetter\n\n  When you define your own mapping, the default mapping does not get\n  set, only the mapping you specify.\n\nVariables:\n  The following variables allow you to customize the behavior of this\n  script so that you do not need to make changes directly to the script.\n  These variables can be set in your vimrc.\n  \n  no_plugin_maps \n    Setting this variable will disable all key mappings defined by any\n    of your plugins (if the plugin writer adhered to the standard\n    convention documented in the scripting section of the VIM manual)\n    including this one.\n  \n  no_java_maps\n    Setting this variable will disable all key mappings defined by any\n    java specific plugin including this one.\n  \n  maplocalleader\n    By default, the key mappings defined by this script use\n    <LocalLeader> which is the backslash character by default.  You can\n    change this by setting this variable to a different key.  For\n    example, if you want to use the comma-key, you can add this line to\n    your vimrc:\n        \n        let maplocalleader = ','\n  \n  b:javagetset_insertPosition\n    This variable determines the location where the getter and/or setter\n    will be inserted.  Currently, three positions have been defined:\n        \n        0 - insert at the end of the class (default)\n        1 - insert before the current line / block\n        2 - insert after the current line / block\n\n  b:javagetset_getterTemplate\n  b:javagetset_setterTemplate\n  b:javagetset_getterArrayTemplate\n  b:javagetset_setterArrayTemplate\n    These variables determine the text that will be inserted for a\n    getter, setter, array-based getter, and array-based setter\n    respectively.  The templates may contain the following placeholders\n    which will be substituted by their appropriate values at insertion\n    time:\n         \n        %type%          Java type of the property\n        %varname%       The name of the property\n        %funcname%      The method name (\"getXzy\" or \"setXzy\")\n        %modifiers%     \"public\" followed by \"static\" if the property is static\n    \n    For example, if you wanted to set the default getter template so\n    that it would produce the following block of code for a property\n    defined as \"public static String name\":\n        \n        /**\n         * Get name.\n         * @return name as String\n         */\n        public static String getName() { return name; }\n    \n    This block of code can be produced by adding the following variable\n    definition to your vimrc file.\n        \n        let b:javagetset_getterTemplate =\n          \\ \"\\n\" .\n          \\ \"/**\\n\" .\n          \\ \" * Get %varname%.\\n\" .\n          \\ \" * @return %varname% as %type%.\\n\" .\n          \\ \" */\\n\" .\n          \\ \"%modifiers% %type% %funcname%() { return %varname%; }\"\n\n    The defaults for these variables are defined in the script.  For\n    both the getterTemplate and setterTemplate, there is a corresponding\n    array-baded template that is invoked if a property is array-based.\n    This allows you to set indexed-based getters/setters if you desire.\n    This is the default behavior.\n",
  "install_details": "1. Copy the script to your ${HOME}/.vim/ftplugins directory and make\n   sure its named \"java_getset.vim\" or \"java_something.vim\" where\n   \"something\" can be anything you want.\n\n2. (Optional) Customize the mapping and/or templates.  You can create\n   your own filetype plugin (just make sure its loaded before this one)\n   and set the variables in there (i.e. ${HOME}/.vim/ftplugin/java.vim)\n\n",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=1523",
      "filename": "java_getset.vim",
      "script_version": "1.10",
      "date": "2002-12-02",
      "vim_version": "6.0",
      "author": {
        "user_id": "1258",
        "user_name": "pkazmier",
        "first_name": "Pete",
        "last_name": "Kazmier",
        "email": "pete-vim at kazmier.com",
        "homepage": "http://www.kazmier.com"
      },
      "release_notes": "Fixed another bug, didn't properly escape the carriage return when used in the normal command.  Sorry about the numerous uploads, I'm a VIM newbie."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=1518",
      "filename": "java_getset.vim",
      "script_version": "1.9",
      "date": "2002-11-30",
      "vim_version": "6.0",
      "author": {
        "user_id": "1258",
        "user_name": "pkazmier",
        "first_name": "Pete",
        "last_name": "Kazmier",
        "email": "pete-vim at kazmier.com",
        "homepage": "http://www.kazmier.com"
      },
      "release_notes": "Fixed a bug where the inserted methods were not positioned properly in some cases. "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=1497",
      "filename": "java_getset.vim",
      "script_version": "1.6",
      "date": "2002-11-27",
      "vim_version": "6.0",
      "author": {
        "user_id": "1258",
        "user_name": "pkazmier",
        "first_name": "Pete",
        "last_name": "Kazmier",
        "email": "pete-vim at kazmier.com",
        "homepage": "http://www.kazmier.com"
      },
      "release_notes": "Corrected the way the end of the current class was determined (previously, sometimes the inserted methods would be inserted outside of the class body).  Also, I changed the test to see if the script was previously loaded as it seems that the script was not loaded as the variable b:did_ftpplugin is set by lots of scripts."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=1486",
      "filename": "java_getset.vim",
      "script_version": "1.5",
      "date": "2002-11-26",
      "vim_version": "6.0",
      "author": {
        "user_id": "1258",
        "user_name": "pkazmier",
        "first_name": "Pete",
        "last_name": "Kazmier",
        "email": "pete-vim at kazmier.com",
        "homepage": "http://www.kazmier.com"
      },
      "release_notes": "User is now able to configure the position where getter/setters are inserted.  In addition, separate commands have been defined so users do not always have to be prompted (:InsertGetterOnly, :InsertSetterOnly, :InsertBothGetterSetter).  Key mappings have also be mapped for these commands by default.  Finally, more verbose documentation has been provided.  Thanks to Dan Sharp for his comments and suggestions."
    }
  ]
}