{
  "script_id": "3331",
  "display_name": "lua_omni",
  "summary": "omni completion for Lua plus few extras",
  "name": "lua_omni",
  "script_type": "ftplugin",
  "description": "This is my omni completion plugin for Lua. It works by scanning _G and parsing\nVim buffers. It's also possible to specify external text files with Lua names\npaths (delimited with new line). It's a very useful feature when a module can\nnot be loaded or doesn't have iterable table exposed.\n\nNested tables are supported so you can type:\n:lua foobar = {numbers = {one = 1, two = 2, three = 3}}\n\nThen typing CTRL-X CTRL-O list of possible matches will open:\n  foobar.numbers.one\n  foobar.numbers.two\n  foobar.numbers.three\n\nActually you can use globbing \"*\" and \"?\" characters to speed up typing like:\n  f*tw CTRL-X CTRL-O\nwill output immediately:\n  foobar.numbers.two\n\nSingle word can be used as well:\nthree CTRL-X CTRL-O\nwill give:\n  foobar.numbers.three\nOr even just \"thr\" will work too.\n\nAnother way use completion is without any asterisks like:\np.l.m CTRL-X CTRL-O\nto get:\n  package.loaded.math\n\n\nThat is the new way of doing omni from this version. I've found it to be quicker\nand more convenient than multiple hitting CTR-X CTRL-O.\nLocal variables completion works as before.\n\n\nSome other functions are supported like listing defined Lua functions in\ncurrent buffer.\nThere are common Lua abbreviation defined in lua_omni.vim too.\n\n                                                                       \nMappings:\n\nCTRL-X CTRL-O\n    Calling the omni completion function.\n\n<Leader>fl  or  <Plug>PrintFunctionList\n    Prints list of defined Lua functions in current buffer. They are listed in\n    ascending line numbers order. Luadoc titles (if defined) are showed too.\n                                                                       \n<Leader>lf  or  <Plug>WriteAndLuaFile\n    Just a shortcut to call:\n        :w\n:luafile %\n\n<Leader>sli or  <Plug>SetLuaIabbrevs\n    Sets few common and useful insert mode abbreviations.\n\n<Leader>cli or  <Plug>ClearLuaIabbrevs\n    Clear any insert mode abbreviations set by previous shortcut.\n\n                                                                       \n                        *lua_omni-settings*\n\nFrom 0.16 version there is support for external files with completion paths.\nThey can be specified via shell LUA_OMNI variable. Each file path should be\ndelimited by comma or semicolon. Additionally the same can done using Vim\nb:lua_omni and g:lua_omni variables. The b: if exists will override g: however\nshell LUA_OMNI will be read and used in all cases.\n\nFormat of completions files is very simple. Each line contains single Lua\npath like:\n\nfoomodule.barPart\nfoomodule.barPart.spam\nfoomodule.barPart.spam.not\nfoomodule.barPart.spam.twice\nfoomodule.barPart.spam.multiply\nfoomodule.__inner\nfoomodule.__inner.foo\nmath2mod\nmath2mod.exp\nmath2mod.div\n...\n(and so on)\n\nOrder of lines is meaningless as results are sorted anyway.\nYou may try lapg.lua script to generate such completion list automatically.\n\n\nFrom 0.17 version there is folding using foldexpr function. To enable it just\nset foldenable option. It has configurable variables: g:lua_inner_folds and\nb:lua_inner_folds. When set to 1 folding is nested. When not existent, or set\nto other value than 1, folds will have one level only.  Of course the b:\nversion will override the g:.\n\nTo regenerate folds use the zx or zX normal commands.\n\nThough folding function try not to fold malformed blocks it depends on correct\norder of opening/closing statements.",
  "install_details": "Just extract and copy files from lua_omni.zip into local .vim/ftplugin and\n.vim/doc directories. Then execute in Vim:\n\t:helptags ~/.vim/doc\n\nAlternatively you may download it from github at:\ngit@github.com:rkowal/Lua-Omni-Vim-Completion.git\n\nTo get a help type:\n\t:help lua_omni\n\nBeware! Vim 7.3 is needed with enabled Lua support.",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15686",
      "filename": "lua_omni_v0.17.zip",
      "script_version": "0.17",
      "date": "2011-05-20",
      "vim_version": "7.3",
      "author": {
        "user_id": "22992",
        "user_name": "Radek",
        "first_name": "Radek",
        "last_name": "Kowalski",
        "email": "rk@bixbite.pl",
        "homepage": ""
      },
      "release_notes": "+ added folding for Lua code by foldexpr function"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15565",
      "filename": "lua_omni_v0.165.zip",
      "script_version": "0.165",
      "date": "2011-05-01",
      "vim_version": "7.3",
      "author": {
        "user_id": "22992",
        "user_name": "Radek",
        "first_name": "Radek",
        "last_name": "Kowalski",
        "email": "rk@bixbite.pl",
        "homepage": ""
      },
      "release_notes": "+ variables defined in for loops should complete now\n+ changed find_assigments function\n+ added the lapg.lua script for auto generating Lua completion list names\n  from documentation (html or text files)\n+ changed licence to MIT"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15534",
      "filename": "lua_omni_v0.163.zip",
      "script_version": "0.163",
      "date": "2011-04-27",
      "vim_version": "7.3",
      "author": {
        "user_id": "22992",
        "user_name": "Radek",
        "first_name": "Radek",
        "last_name": "Kowalski",
        "email": "rk@bixbite.pl",
        "homepage": ""
      },
      "release_notes": "+ new variable completion now can see variables names in function\n  definitions too"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15533",
      "filename": "lua_omni_v0.162.zip",
      "script_version": "0.162",
      "date": "2011-04-26",
      "vim_version": "7.3",
      "author": {
        "user_id": "22992",
        "user_name": "Radek",
        "first_name": "Radek",
        "last_name": "Kowalski",
        "email": "rk@bixbite.pl",
        "homepage": ""
      },
      "release_notes": "+ fixed bug in print_function_list when a buffer doesn&#039t have any\n  functions\n+ added better variable assignments completion"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15527",
      "filename": "lua_omni_v0.16.zip",
      "script_version": "0.16",
      "date": "2011-04-26",
      "vim_version": "7.3",
      "author": {
        "user_id": "22992",
        "user_name": "Radek",
        "first_name": "Radek",
        "last_name": "Kowalski",
        "email": "rk@bixbite.pl",
        "homepage": ""
      },
      "release_notes": "+ user can specify files with Lua completions using shell LUA_OMNI and Vim\n  b:lua_omni, g:lua_omni variables\n  (useful when _G context can not have everything loaded)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15487",
      "filename": "lua_omni_v0.151.zip",
      "script_version": "0.151",
      "date": "2011-04-20",
      "vim_version": "7.3",
      "author": {
        "user_id": "22992",
        "user_name": "Radek",
        "first_name": "Radek",
        "last_name": "Kowalski",
        "email": "rk@bixbite.pl",
        "homepage": ""
      },
      "release_notes": "+ fixed small (thought irritating) bug in completion_findstart function\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15393",
      "filename": "lua_omni_rev0.15.zip",
      "script_version": "0.15",
      "date": "2011-04-05",
      "vim_version": "7.3",
      "author": {
        "user_id": "22992",
        "user_name": "Radek",
        "first_name": "Radek",
        "last_name": "Kowalski",
        "email": "rk@bixbite.pl",
        "homepage": ""
      },
      "release_notes": "+ More convenient completion where single words or asterisk less shortcuts\n  will work too."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15331",
      "filename": "lua_omni_rev0.141.zip",
      "script_version": "0.141",
      "date": "2011-03-29",
      "vim_version": "7.3",
      "author": {
        "user_id": "22992",
        "user_name": "Radek",
        "first_name": "Radek",
        "last_name": "Kowalski",
        "email": "rk@bixbite.pl",
        "homepage": ""
      },
      "release_notes": "+ Minor fix in completing function where was a chance to concat table with\n  string."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15318",
      "filename": "lua_omni_rev0.14.zip",
      "script_version": "0.14",
      "date": "2011-03-28",
      "vim_version": "7.3",
      "author": {
        "user_id": "22992",
        "user_name": "Radek",
        "first_name": "Radek",
        "last_name": "Kowalski",
        "email": "rk@bixbite.pl",
        "homepage": ""
      },
      "release_notes": "+ Fixed bug in new completing function so root level names in _G table are\n  actually showed.\n+ Fixed previously introduced bugs in Vim mappings."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15289",
      "filename": "lua_omni_rev0.13.zip",
      "script_version": "0.13",
      "date": "2011-03-25",
      "vim_version": "7.3",
      "author": {
        "user_id": "22992",
        "user_name": "Radek",
        "first_name": "Radek",
        "last_name": "Kowalski",
        "email": "rk@bixbite.pl",
        "homepage": ""
      },
      "release_notes": "    + Changed scanning of _G table to more elaborate way. Now a \"globbing\" \"*\"\n\t  and \"?\" characters may be used when typing.\n    + Few additions to abbreviations.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=14392",
      "filename": "lua_omni_012.zip",
      "script_version": "0.12",
      "date": "2010-11-29",
      "vim_version": "7.3",
      "author": {
        "user_id": "22992",
        "user_name": "Radek",
        "first_name": "Radek",
        "last_name": "Kowalski",
        "email": "rk@bixbite.pl",
        "homepage": ""
      },
      "release_notes": "+ improved Lua search_assignments1 function to search variable names in \"for in\" and function statements\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=14333",
      "filename": "lua_omni_011.zip",
      "script_version": "0.11",
      "date": "2010-11-20",
      "vim_version": "7.3",
      "author": {
        "user_id": "22992",
        "user_name": "Radek",
        "first_name": "Radek",
        "last_name": "Kowalski",
        "email": "rk@bixbite.pl",
        "homepage": ""
      },
      "release_notes": "---------------------------------------------------------------------------------------\n  RELEASE NOTES FOR VERSION 0.11\n---------------------------------------------------------------------------------------\n\t+ fixed error in abbreviations \n\t+ added abbreviation for string.len\n\t+ expanded omnifunc functionality to scan local function variables (works\n\t  for the most part)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=14285",
      "filename": "lua_omni.zip",
      "script_version": "0.1",
      "date": "2010-11-17",
      "vim_version": "7.3",
      "author": {
        "user_id": "22992",
        "user_name": "Radek",
        "first_name": "Radek",
        "last_name": "Kowalski",
        "email": "rk@bixbite.pl",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
