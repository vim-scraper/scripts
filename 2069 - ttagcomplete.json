{
  "script_id": "2069",
  "name": "ttagcomplete",
  "summary": "Context-sensitive tags-based completion and code skeletons",
  "script_type": "utility",
  "description": "In theory, this plugin provides a framework for context-sensitive \ntags-based completion and code skeletons (requires tSkeleton vimscript \n#1160). I.e. the completion function checks the context and filters the \navailable tags accordingly. You should thus get only those tags included \nin the list that are actually useful in a given context (eg because the \nare valid methods of a certain class).\n\nIn practice, the context sensitivity is currently only implemented for \nJava and requires a tags file for the JDK sources to be created (see the \nnotes on |tlib#tag#Retrieve()| for details). It also makes certain \nassumption about how variable declarations look like, e.g. the \nclass/type name should be in the same line as the variable name; class \nnames start with an upper-case letter etc.\n\nLimitation: you have to type g:ttagecho_min_chars = 1 chars before\ncompletion is allowed.\n\nIt shouldn't be too difficult to adapt this for other statically typed \nlanguages with formal variable declarations. As the source code isn't \nactually parsed or anything, there is little chance to use this \nefficiently with dynamically typed languages like ruby where the \ntype/class is only known at run-time.\n",
  "rating_total": "0",
  "rating_votes": "0",
  "downloads": "455",
  "install_details": "Edit the vba file and type: >\n\n    :so %\n\nSee :help vimball for details. If you have difficulties or use vim 7.0, \nplease make sure, you have the current version of vimball (vimscript \n#1502) installed.\n\nThis script requires tlib (vimscript #1863) to be installed.\n\nFor code skeletons, you also need tSkeletons (vimscript #1160).\n\nSuggested setup for java (best set in ~/vimfiles/after/ftplugin/java.vim): >\n\n    \" See notes on |tlib#tag#Retrieve()|.\n    let b:tlib_tags_extra = $JAVA_HOME .'/tags0'\n\n    let b:ttagcomplete_collect='ttagcomplete#Java'\n\n    \" Call |ttagcomplete#On()| and set 'omnifunc'.\n    TTagCompleteOn\n\n    \" For code skeletons, use this:\n    if exists('g:loaded_tskeleton') && g:loaded_tskeleton >= 402\n        noremap <buffer> <c-x><c-g> :call ttagcomplete#CompleteSkeletons('m')<cr>\n        inoremap <buffer> <c-x><c-g> <c-\\><c-o>:call ttagcomplete#CompleteSkeletons('m')<cr>\n    endif\n\n\nAlso available via git\nhttp://github.com/tomtom/vimtlib/tree/master\n",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7940",
      "filename": "ttagcomplete.vba.gz",
      "script_version": "0.1",
      "date": "2007-11-12",
      "vim_version": "7.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}