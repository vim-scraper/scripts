{
  "script_id": "1947",
  "display_name": "outline",
  "summary": "Create your own custom view of the file based on regex",
  "name": "outline",
  "script_type": "utility",
  "description": "Vim has many possibilites to let you find the code you want to have a look at.\nThis script shows all matches of a regular expression in another buffer together with line numbers. The cursor will be placed where you have been.\nSo you won't loose orientation.\n\nI think a small example will help you much to illustrate what this script can do for you\n\nThe script is called autoload/vl/ui/navigation/jump_to_code_by_regex.vim\n\nand looks like :\n==============================\n[...]\nfunction! vl#ui#navigation#jump_to_code_by_regex#Outline(regex, ...)\n  exec vl#lib#brief#args#GetOptionalArg('try_higlight', string(0))\n[...]\nendfunction\n[...]\nfunction ...\n==============================\n\nAfter using the mapping you'll get \n==============================\n   17  function! vl#ui#navigation#jump_to_code_by_regex#Outline(regex, ...)\n   66  function! vl#ui#navigation#jump_to_code_by_regex#JumpToPos()\n   75  function! vl#ui#navigation#jump_to_code_by_regex#AddOutlineMappings(regex)\n==============================\nPressing enter will take you to line 17 / 66 etc..\n\nOf course you can also find definitions this way (use let as regex and you'll get)\n====================\n   19    let ft = &filetype\n   20    let file = expand('%')\n   21    let window = winnr()\n[...]\n=====================\nPressing <c-o> will take you back\n\nI'v put some minor effort into higlighting the regular expression match. Thus you can use \\zs and \\ze to higlight special words.\nHow nice this works depends on the already existing syntax definitions. This can be improved much",
  "rating_total": "1",
  "rating_votes": "1",
  "downloads": "376",
  "install_details": "Use http://www.vim.org/scripts/script.php?script_id=2014 instead.\n\nJust source the file and follow the instructions.\nYou'll be asked before any action is taken.\n\nIf you don't feel comfortable installing to .vim insntall to another arbitrary directory and add it to your runtimepath\n(let runtimepath+= ..)\n\nDefault mappings are provided in the \nfunction! vl#ui#navigation#jump_to_code_by_regex#AddOutlineMappings(regex)\n\nftplugin/vim.vim:\ncall vl#ui#navigation#jump_to_code_by_regex#AddOutlineMappings('^\\s*fun.*')\n../c.vim:\n\"outline mappings and regex\nlet s:cpp_prefix='\\%(\\w\\+\\s\\+\\)\\='\nlet s:ret_type='[a-zA-Z0-9\\&* \\t]\\+\\s\\+'\nlet s:name='\\%(\\w\\+\\::\\)\\=\\w\\+\\s*'\nlet s:func_args='([ \\t,0-9a-zA-Z\\&*\\n\\[\\]_]*)\\ze\\s*{'\nlet s:func_pattern=substitute(s:cpp_prefix.s:ret_type.s:name.s:func_args,'\\\\s','[ \\\\t\\\\n]','g')\nlet g:func_pattern=s:func_pattern \nlet s:pattern = string('\\%('.s:func_pattern.'\\)\\\\|class')\nexec 'noremap <buffer> <m-o><m-s> :call vl#ui#navigation#jump_to_code_by_regex#Outline('.s:pattern.')<cr>/'\nexec 'noremap <buffer> <m-o><m-l> :call vl#ui#navigation#jump_to_code_by_regex#Outline('.s:pattern.')<cr>'\netc..\n\nIf you still have problems drop me a mail.\n\nPatches welcome.",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7334",
      "filename": "vimlib_outline_installer_sourceme.zip",
      "script_version": "0.0",
      "date": "2007-07-08",
      "vim_version": "7.0",
      "author": {
        "user_id": "10341",
        "user_name": "MarcWeber",
        "first_name": "Marc",
        "last_name": "Weber",
        "email": "marco-oweber at gmx.de",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
