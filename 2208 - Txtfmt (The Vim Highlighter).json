{
  "script_id": "2208",
  "name": "Txtfmt (The Vim Highlighter)",
  "summary": "\"Rich text\" highlighting in Vim! (colors, underline, bold, italic, etc...)",
  "script_type": "utility",
  "description": "USER FEEDBACK NEEDED: I would greatly appreciate feedback email: \nbrettstahlman AT comcast DOT net\n\n=== !!! IMPORTANT NOTE TO NEW USERS !!! ===\nThe Txtfmt help file is large; for a quick (and gentle) introduction, please see the \"QUICK-START TUTORIAL\" further down on this page...\n\n=== SCREENSHOTS ===\nCheck out the following link for screenshots showing Txtfmt used...\n    -as a standalone filetype for journal entries, notes, documents, etc...\n    -in conjunction with the .otl filetype used by Ned Konz' TVO (The Vim\n     Outliner) plugin\n    -to spruce up a circuit diagram created with the aid of Dr. Charles\n     Campbell's drawit plugin\n    -to spruce up comments in various programming languages\n\n    http://www.txtfmt.webs.com\n\n=== MOTIVATION ===\nVim's syntax highlighting is very useful for editing files in a particular programming language such as C or Perl. But what if you are simply using Vim to edit text that doesn't fall into any particular language category: e.g., personal journal entries, miscellaneous notes or generic documents? In such cases, Vim's statically defined syntax regions are not very useful. What is really needed is a word processor's ability to apply highlighting to an arbitrary selection of text. \n\n=== OVERVIEW ===\nTxtfmt (The Vim Highlighter) is a combination syntax/filetype plugin that allows you to highlight plain text in Vim. The highlighting mechanism uses invisible tokens that are inserted into a Txtfmt buffer with the aid of easy to use mappings provided by the filetype plugin. Each token affects either the color or formatting of subsequent text. The plugin supports up to 8 configurable foreground colors, up to 8 configurable background colors, and all combinations of the following formatting attributes: bold, underline, italic, standout, reverse and undercurl.\n\nNearly everything in this plugin is configurable, with defaults that should work for most users \"right out of the box\". The following is a *partial* list of things that can be configured:\n    mappings\n    colors\n    range of character codes used as highlighting tokens\n\nEverything is documented in an extensive Vim help file. Additionally, there is a \"Quick-Start Tutorial\" at the bottom of this page, designed to help you get up and running quickly with Txtfmt.\n\n=== USAGE EXAMPLE ===\nSuppose you wish to enter some green text...\nYou execute one of Txtfmt's \"insert-token\" mappings and enter the following at the prompt:\n    cg\n(mnemonic: color green)\nNow, the text you type is green.\n\nWhile typing green text, you wish to emphasize a phrase by making it bold-italic. You execute another mapping and enter \"fbi\" or \"fib\" at the prompt.\n(mnemonic: format bold italic)\nNow, the text you type is green bold-italic.\nNote: Inserting the bold-italic token did not affect the text color, because the color and format regions are completely \"orthogonal\".\n\nNow you wish to switch to a blue background. Execute another mapping and enter \"kb\" at the prompt.\n(mnemonic: bac_k_ground blue)\nNow, the text you type is green bold-italic on a blue background. Notice that, as before, the preceding highight regions are unaffected by the start of the new one.\n\nAt some point, you may wish to return to default (unhighlighted) text. You can terminate the 3 active regions by executing the insert-token mapping one last time and entering the following at the prompt:\n\tc-,f-,k-\n(mnemonic: remove color, remove format, remove bac_k_ground color)\nNow, the text you type should be plain, unhighlighted text. Notice how multiple format/color specifiers can be concatenated in a comma-separated list, thereby reducing the number of times you have to execute the mapping.\n\n=== FEEDBACK ===\nI would greatly appreciate your feedback on this plugin. Contact me either at...\n\nbrettstahlman AT comcast DOT net\n\n...or by posting to the Vim list with Txtfmt somewhere in the subject or body. \nAlso, please rate this plugin!\n\n=== SUGGESTED USES ===\nThe following applications represent a few of the many possible uses of the Txtfmt plugin:\n    -For taking notes\n     (e.g., notes taken while reviewing large programming projects)\n    -As part of a personal journaling system\n    -For highlighting .otl files created with Ned Konz' TVO (The Vim Outliner)\n     plugin\n    -For highlighting files created with 'Notes' (Hari Krishna Dara's\n     lightweight note management plugin)\n    -For highlighting text files created with Yongping Guo's TxtBrowser plugin\n    -For beautifying block diagrams created with Dr. Charles Campbell's drawit\n     plugin\n    -For sprucing up programming language comments\n     Don't laugh! You can embed Txtfmt formatting regions within other syntax\n     regions (e.g., C comments)\n     :help txtfmt-'nested'\n    -etc. etc...\nNote: If you wish to make your formatted documents available to non-Vim users, simply use the :TOhtml command distributed with Vim to output an HTML version of the Txtfmt buffer.\n\n\n====================\nQUICK-START TUTORIAL\n====================\nAfter you have installed the plugin, you may wish to generate a \"test page\", both to ensure that you have installed the plugin properly, and as a quick and easy way to create a Txtfmt buffer containing actual formatting regions that you can view and play around with. You may create a \"test page\" with default options by executing the MakeTestPage command at the command line:\n\n    :MakeTestPage<Enter>\n\nBe sure to scroll down and/or enlarge the window to view all sections. Although the primary purpose of the test page is to allow you to visualize the effects of a particular set of option values, the text of the page has been carefully chosen to give the new user an overview of some of the more important Txtfmt options. For information on how to use MakeTestPage to visualize different sets of options,\n\n    :help txtfmt-:MakeTestPage\n\nAfter you have viewed formatting regions in a test page, you will probably want to try creating your own formatting regions. The simplest way to begin is as follows:\n\n    :new<Enter>\n    :set ft=txtfmt<Enter>\n\nAssuming you have installed the plugin properly, you now have access to all the Txtfmt mappings for working with the special Txtfmt tokens discussed earlier. There are a large number of mappings provided for inserting and jumping to Txtfmt tokens. Note that while intuitive key-sequences are used by default, Txtfmt provides a way for you to customize the {lhs} of any or all mappings.\n\nFor a detailed description of mapping customization,\n    :help txtfmt-map-config\n\nFor a detailed description of the token insertion mappings,\n    :help txtfmt-ins-tok-maps\n\nFor a detailed description of the jump-to-token mappings,\n    :help txtfmt-jump-to-tok\n\nTo keep this \"quick-start tutorial\" quick, I'll demonstrate the use of only a few of the available mappings...\n\nIn your newly-created Txtfmt buffer, execute the following normal mode command:\n    \\i\n\nNote: The remainder of the tutorial assumes that your <LocalLeader> is at the default value (i.e., backslash). If you have set <LocalLeader> to something other than the default, replace the backslash in the examples with the appropriate character.\n    :help <LocalLeader>\n\nAt this point, you will be presented with the following prompt:\n    Enter a fmt / clr string. (Enter to cancel):\n\nAt the prompt, type the following string and hit <Enter>:\n    fbui\n\nNow, begin typing some text. The text should be highlighted with the bold, underline, and italic attributes. Note that the results would have been the same if you had typed fbiu, fibu, fubi, etc... As you have probably surmised, the letters 'b', 'u', and 'i' are flags indicating bold, underline, and italic, respectively. The leading 'f' indicates that the subsequent flags comprise a \"format specification\".\n    :help txtfmt-fmt-spec\n\nTo terminate the underline, bold, italic region, execute the following keystroke sequence while still in insert mode:\n    <CTRL-\\><CTRL-\\>\n\nHint: Hold the Control key down while hitting backslash twice in quick succession.\n\nOnce again, you should be presented with the prompt asking for a fmt / clr string. This time, enter the following:\n    f-\n\nThe dash character indicates \"no format\"; i.e., a return to the normal (unhighlighted) text. If you continue typing text, you will see that it no longer has any format attributes.\n\nNow let's see what happens when we bring color into the mix... If you're still in insert mode, hit <Esc> to return to normal mode. Now execute the following normal mode command to insert a token on the line below:\n    \\o\n\nAt the resulting prompt, enter the following:\n    cblue\n\nThe 'c' is analogous to the 'f' in the preceding \"format specifications\"; it\nindicates that the following text is a \"color specification\".\n    :help txtfmt-clr-spec\n\nSince in this case the color specified is \"blue\", the text you type after hitting <Enter> will be blue. Although I specified the color as \"blue\", I could just as well have abbreviated it to \"b\". As discussed in the Txtfmt help, color names are actually defined as regular expression patterns. The default patterns permit you to abbreviate color names to uniqueness. In practice, this means that for all colors but black, you needn't specify more than the first letter of the color name. (The single letter abbreviation for black is 'k', which permits it to be disambiguated with blue.) Txtfmt provides you with 8 distinct colors, each with its own default color name pattern and RGB value. You can view these definitions with the :ShowTokenMap command. Go ahead and try it now... After hitting <Esc> to return to normal mode, execute the following at the command line:\n\t:ShowTokenMap<Enter>\n\t\nYou may have to page down to see all of the output. The first section shows foreground color definitions, and the last section shows similar definitions for background colors. If you are not happy with either the color name or the RGB value of any of the 8 default colors, Txtfmt provides a very flexible mechanism for overriding the defaults with your own color preferences. The details may be found in the help, but if you're short on time, here's a quick example that shows how easy it is...\nNote: You don't need to try this now.\n\nSuppose the GUI's default red color (RGB: #FF0000) is too bright for your eyes. You wish to replace this color with a dark brown (RGB: #804000). You see from the output of :ShowTokenMap that red corresponds to index 5 in the default color array. Thus, you could make the desired change by overriding txtfmtColor{5} with the following line in your .vimrc:\n\t:let txtfmtColor5='^br\\\\%[own]$,c:DarkRed,g:#804000'\n\nWith this definition, you could specify the new color with the abbreviation \"br\". Of course, you would no longer be able to use the color red in the GUI, and any red highlighting in your existing file(s) would change to dark brown when viewed in the GUI. (Since the \"c:DarkRed\" is unchanged, color #5 will still be red in a color terminal.)\n    :help txtfmt-color-config\n\t:help txtfmt-:ShowTokenMap\n\nNow suppose you wish to continue typing blue text, but would like the text you are about to type to have the bold and italic attributes as well. Assuming you are in normal mode, hit \\a to bring up the familiar prompt. (Note that \\a differs from \\i in that the former will insert the Txtfmt token(s) *after* the cursor location instead of before it.) Now enter the following at the prompt:\n    fbi\n\nThe text you type after hitting <Enter> will be blue, bold-italic. Notice that it wasn't necessary to do anything special to ensure that the bold-italic text would also be blue. It is blue because the effects of the \"blue\" foreground color token you entered earlier are not affected in any way by the introduction of a format token. This behavior is a direct consequence of the orthogonality of Txtfmt's various token types. A format token supercedes the preceding format token, but has no effect upon any preceding color regions. Similarly, a foreground color token supercedes the preceding foreground color token, but has no effect upon any preceding format or background color regions.\n\nImportant Note: The fact that format/color tokens \"supercede\" preceding tokens of the same type means that the \"no format\"/\"no color\" tokens are required only when you wish to turn off format or colors completely for subsequent text. To change from one format to another format, or from one color to another color, simply insert the token for the new region.\n\nTo verify that we can supercede the blue foreground color token entered earlier, let's enter a red foreground color token by hitting <CTRL-\\><CTRL-\\> once more (still in insert mode) and entering the following at the prompt:\n    cr\n\nObserve that the text you type after hitting <Enter> still possesses the bold-italic attribute, though its color is red.\nNote: You may have noticed that I used the convenient single letter abbreviation for \"red\". I will use such abbreviations exclusively for the remainder of the tutorial.\n\nUp until now, you have been applying colors only to text; i.e., you have been working exclusively with foreground colors. Txtfmt 2.0 introduced support for background colors as well. For performance reasons, the default configuration enables only 4 background colors: red, green, blue and yellow. It is quite easy, however, to tailor the set of colors enabled via independent foreground and background color mask options.\n\t:help txtfmt-'fgcolormask'\n\t:help txtfmt-'bgcolormask'\n\nYou insert a background color token just as you would a foreground color token, except that the character introducing the color spec is 'k' instead of 'c' (since 'c' was already taken, and the word \"background\" contains a 'k'). You can try it out by hitting <CTRL-\\><CTRL-\\> (still in insert mode) and entering the following at the prompt:\n\tkb\n\nHit <Enter> and type some text. As you might expect, the text you type now is red bold-italic on a blue background.\n\nTo revert to default format and color, hit <CTRL-\\><CTRL-\\> and enter the following at the prompt:\n    f-,c-,k-\n\nYou may recognize the \"f-\" as the special \"no format\" token we inserted earlier to end the first format region we created. Similarly, the \"c-\" and \"k-\" are the special \"no fg color\" and \"no bg color\" tokens, respectively . Note that it was not necessary to enter these three tokens with separate mappings and separate prompts. We simply concatenated the token specs together, separating them with a comma. This is an example of a format/color specification list.\n    :help txtfmt-fmt-clr-spec-list\n\nNote that such lists may contain any number of format/color specifications. Ordinarily, the cursor will be left at the end of the sequence of tokens inserted via such a list. You can, however, specify a different cursor position by replacing one of the commas in the list with a single dot ('.'). This is actually a very useful feature. Recall that in our previous example, we inserted the \"no format\" and \"no color\" tokens used to terminate our format/color regions only after we had finished typing all the text within them. In the common case, however, you know when you begin a region that you will eventually want to end it. Thus, you can save yourself a mapping invocation by entering both the start and end tokens at the same prompt.\n\nTo see how it works, hit <Esc> to return to normal mode, then hit \\o and enter the following at the prompt:\n    cr,fi.c-,f-\n\nThis format/color specification list comprises both the start and end tokens for a red, italic region. The advantage of using a dot to separate the \"italic\" format spec from the \"no color\" spec is that it allows you to begin typing red, italic text immediately after hitting <Enter>. (Go ahead and type a bit of text...) If a comma had been used instead, the cursor would have ended up after the \"no format\" token, which means you would have had to move the cursor back 2 character positions to get it inside the region before beginning to type the formatted text.\n\nNow suppose after typing some red, italic text, you decide that green, underline would have been a better choice. The change is accomplished fairly easily, and will give us an opportunity to introduce the \"jump-to-token\" mappings...\n\nAfter hitting <Esc> to return to normal mode, Execute the following \"jump-to-token\" command:\n    [c\n\nThis command positions the cursor on the previous color token (i.e., the red color token beginning the region). Note that there are many variations of the jump-to-token commands: the one to use depends upon desired search direction, the type of token sought, whether you wish to land \"on\" or \"next to\" the sought token, etc...\n    :help txtfmt-jump-to-tok\n\nNow type the following (still in normal mode):\n    2\\s\n\nThis is the \"substitute\" variant of the insert-token command. The numeric argument indicates that we wish to replace 2 characters at the cursor (i.e., the red color and italic format tokens) with the tokens we are about to specify at the prompt:\n    fu,cg\n\nUpon hitting <Enter>, you should observe that the red, italic text has changed to green, underline.\n\nYou may have noticed a similarity between several of the normal mode insert-token mappings used above and the native Vim normal mode commands for entering insert mode. This similarity was not by chance, but by design. In addition to the \\i, \\a, \\o, and \\s commands that were demonstrated above, Txtfmt also provides the following:\n    \\I, \\O, \\A\n\nAlthough all these commands are described in the help, a regular Vim user can easily intuit where they will insert the Txtfmt tokens relative to the cursor, by analogy with the corresponding enter insert mode commands.\n\nAlso note that if you insert a 'v' between the backslash and the subsequent character (e.g., \\vI), Txtfmt will exit insert mode after inserting the Txtfmt tokens. This is useful when you are simply highlighting existing text.\n\nThis concludes the tutorial. No attempt was made to discuss all of the many Txtfmt options. Detailed information on all options may be found in the Txtfmt help file.\n\t:help txtfmt\n\n\n__END__\n\nmarkup\nsomewordthatIknowisnotinanyscript\nrtf\nword processor\nrich text highlighting\nrich text format\nrich text formatting\nhighlighter IDE buffer explorer Ruby rails latex coloration\n\n",
  "install_details": "=== DISTRIBUTED FILES ===\n\nThe Txtfmt distribution comprises the following 4 files:\n\ndoc/txtfmt.txt          Txtfmt help file\nftplugin/txtfmt.vim     Txtfmt filetype plugin (contains mappings for working\n                        with Txtfmt tokens)\nsyntax/txtfmt.vim       Txtfmt syntax file (defines the Txtfmt syntax\n                        highlighting)\nplugin/txtfmt.vim       Txtfmt common configuration code (contains\n                        configuration script needed by both the filetype and\n                        syntax plugins)\nindent_patch.txt        Bram Moolenaar's patch to fix indent.vim's handling of\n                        dot-separated lists in 'filetype' option values\n                        (required only if your version of Vim is older than\n                        7.2 and you plan to \"nest\" Txtfmt within other\n                        filetypes)\n                        For details, :help txtfmt-combining.\n\nAll of the txtfmt.vim files should be placed in their respective parent directories, somewhere in your 'runtimepath'. If you need the patch file, you may place it wherever you like.\n\nImportant Note: To make Txtfmt help topics visible to Vim's :help command, you must run :helptags, passing the path to the doc folder where you unpacked txtfmt.txt as an argument.\ne.g.,\n    :helptags $VIM/vimfiles/doc\n\n=== DETECTING OR SETTING TXTFMT FILETYPE ===\n\nOnce you have copied the Txtfmt files to the appropriate directories in 'runtimepath', you can always use the Txtfmt syntax and mappings by manually setting the 'filetype' option. (I am assuming, of course, that you have enabled syntax at some point, most likely in your .vimrc. If you are not sure about this, :help syntax-enable.) The 'filetype' option may be set on the command line: e.g.,\n    :set ft=txtfmt\n\nA better approach for a file designed to be viewed with Txtfmt highlighting would be to set the filetype in a Vim modeline: e.g.\n    vim:ft=txtfmt\n\nWhile the manual approach may be appropriate for some uses, if you find yourself always using Txtfmt with certain types of files, it probably makes sense to set up automatic detection via one of the methods discussed in the section \"new-filetype\" in the Vim help. The simplest approach is to create your own filetype.vim (assuming you haven't done so already) in a directory that comes before $VIMRUNTIME in 'runtimepath'. Within this script, you should define an autocommand that will :setfiletype to Txtfmt for any file with an appropriate extension.\n\nExample:\n    \" Set up detection for Txtfmt files\n    au! filetypedetect BufRead,BufNewFile *.txt    setfiletype txtfmt\n\nIMPORTANT NOTE: More information on this topic, such as how to use Txtfmt in combination with other filetypes (e.g. to format C comments), may be found in the Txtfmt help file. \n",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13144",
      "filename": "txtfmt_v2.3.tar.gz",
      "script_version": "2.3",
      "date": "2010-06-08",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "Prevents E21 in several scenarios: e.g.,\n\t-Txtfmt used within a Vim help buffer (e.g., ft=help.txtfmt)\n\t-Txtfmt loaded when 'nomodifiable' is set globally.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=12389",
      "filename": "txtfmt_v2.2.tar.gz",
      "script_version": "2.2",
      "date": "2010-02-16",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "-Loading Txtfmt no longer makes all windows the same size when 'equalalways' is set\n-Fixed several anomalies caused by Txtfmt load when 'winfixheight' is set:\n\t-\"test page\" displayed in 2 windows\n\t-chain of errors when initial window contains changes\n\t-Txtfmt buffer loaded in 2 windows\n-Added logic that attempts to make \"test page\" at least 20 lines high\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11802",
      "filename": "txtfmt_v2.1.tar.gz",
      "script_version": "2.1",
      "date": "2009-11-26",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "Minor fix in Define_syntax to ensure that 'containedin' clause does not refer to nonexistent \"inner escape\" region when there are no active foreground colors."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11451",
      "filename": "txtfmt_v2.0.tar.gz",
      "script_version": "2.0",
      "date": "2009-09-29",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "!!!!! Formal Release of Version 2.0 (bg color and 'conceal' patch support) !!!!!\nIncorporated perl script used to generate large portion of Define_syntax into syntax/txtfmt.vim, and provided Vim command line used to update the auto-generated script block.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11387",
      "filename": "txtfmt_v2.0b.tar.gz",
      "script_version": "2.0b",
      "date": "2009-09-16",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "!!!!! Version 2.0 beta release (background colors and 'conceal' patch) !!!!!\nCode cleanup (removed unused functions, streamlined color name lookup)\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11250",
      "filename": "txtfmt_v2.0a.tar.gz",
      "script_version": "2.0a",
      "date": "2009-08-25",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "!!!!! MAJOR RELEASE !!!!!\n-Added support for background colors!!!\n-Added support for Vince Negri's 'conceal' patch, which can make Txtfmt tokens consume zero screen width\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=10118",
      "filename": "txtfmt_v1.5.tar.gz",
      "script_version": "1.5",
      "date": "2009-03-05",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "-Removed (obsolete) multibyte syntax patch from distribution\n-Updated help to reflect fact that several issues affecting Txtfmt have been eliminated in Vim 7.2"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=10013",
      "filename": "txtfmt_v1.4.tar.gz",
      "script_version": "1.4",
      "date": "2009-02-23",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "-Fixed several of the operator-pending \"jump to token\" maps\n-Added more robust mechanism for hiding tokens, eliminating dependence upon \"Ignore\" group whenever possible\n-Added help section \"Color terminal pitfalls\" containing...\n    -Description of \"Ignore\" group issue and recommended workarounds\n    -Description of gnome-terminal issue and recommended workarounds\n-Fixed broken link in helpfile\n-Minor cosmetic fix on test page\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=9681",
      "filename": "txtfmt_v1.3.tar.gz",
      "script_version": "1.3",
      "date": "2008-12-16",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "Fixed \"bold\" attribute display in color terminals. Prior to this fix, the default Txtfmt colors were unaffected by the bold attribute. With this fix, the bold attribute will cause dark colors to appear brighter (lighter) in a color terminal.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=9139",
      "filename": "txtfmt_v1.2.tar.gz",
      "script_version": "1.2",
      "date": "2008-08-17",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "Added missing help tags for a number of options."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8751",
      "filename": "txtfmt_v1.1.tar.gz",
      "script_version": "1.1",
      "date": "2008-06-04",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "NOW WORKS WITH MULTIBYTE ENCODINGS!!! (no patch required)\n-Added logic to determine whether the running Vim treats syntax match offsets as byte or character offsets. (This logic renders the multi-byte syntax patch obsolete.)\n-Help file additions: added instructions for using Txtfmt with TVO (:help txtfmt-nesting-tvo-example), and outlined a strategy for achieving \"colorscheme independence\" by defining colors according to default highlighting groups (:help txtfmt-colorschemes)\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8670",
      "filename": "txtfmt_v1.0e.tar.gz",
      "script_version": "1.0e",
      "date": "2008-05-11",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "-Fixed bug that prevented buf-local color definitions from being used.\n-Added to the help file a description of a possible strategy for making txtfmt\n color definitions dependent upon current colorscheme.\n-Fixed bug that sometimes prevented txtfmt option changes from taking effect\n when a txtfmt buffer was re-edited.\n-Fixed bug that prevented insert-token mappings from working in Replace mode."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8611",
      "filename": "txtfmt_v1.0d.tar.gz",
      "script_version": "1.0d",
      "date": "2008-04-28",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "Applied the <silent> attribute to prevent the jump-to-token\nmappings from echoing to the command line"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8580",
      "filename": "txtfmt_v1.0c.tar.gz",
      "script_version": "1.0c",
      "date": "2008-04-19",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "-Added buffer-local mapping (\\ga) and command (:GetTokInfo) for obtaining\ninformation about a specific character/token in a txtfmt buffer.\n(Functionality is analogous to that of Vim's ga normal mode command.)\n-Fixed documentation and reporting bug that caused a 0-based color index to be\ndisplayed instead of the 1-based index specified in the help file. (Affected\n:MakeTestPage, \\ga, :GetTokInfo and documentation)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8544",
      "filename": "txtfmt_v1.0b.tar.gz",
      "script_version": "1.0b",
      "date": "2008-04-10",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "Fixed bug in ftplugin that caused sample \"user-maps\" (defined for testing) to override any user-defined ones."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8526",
      "filename": "txtfmt_v1.0a.tar.gz",
      "script_version": "1.0a",
      "date": "2008-04-06",
      "vim_version": "6.0",
      "author": {
        "user_id": "1084",
        "user_name": "stahlman",
        "first_name": "Brett",
        "last_name": "Stahlman",
        "email": "brettstahlman at comcast.net",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}