{
  "script_id": "356",
  "display_name": "dbext.vim",
  "summary": "Provides database access to many dbms (Oracle, Sybase, Microsoft, MySQL, DBI,..)",
  "name": "dbext.vim",
  "script_type": "utility",
  "description": "This plugin contains functions/mappings/commands to enable Vim to access several databases. Current databases supported are: Mysql, PostgreSQL, Ingres, Oracle, Oracle Rdb (VMS), Sybase Adaptive Server Anywhere, Sybase Adaptive Server Enterprise, Microsoft SQL Server, DB2, Interbase and SQLite and ODBC are supported.  New to version 5.x of dbext introduces the support for Perl's DBI layer.  If the database you are using is not *natively* supported by dbext, but has a DBI interface, dbext's standard feature set is available.  For those already using dbext, the DBI interface should provide a performance boost when running statements against your database.  DBI also provides an ODBC bridge, therefore any ODBC compliant database is also accessible.\n\nNOTE: As of version 4.0 this plugin requires Vim 7.\nVersion 5.0 supports Vim 7's autoload feature.\n\ndbext provides a common interface between your editor and a database.  If your company/project moves onto a new database platform, there is no need to learn the new databases tools.  While editing your SQL (and without leaving Vim) you can execute database commands, run queries, display results, and view database objects.  dbext understands various programming languages, and can parse and prompt the user for [host] variables and execute the resulting statement.  See below for more details.\n\nAdds a menu for the common commands for gvim users.\n\nSome of the features that are supported:\n\nTutorial\n-----------\nA tutorial has been added to help you become familiar with the features of the plugin, :h dbext-tutorial.\nIf you dislike reading docs, then at a minimum follow the tutorial.  It will give you the basics of the features and introduce some \"best\" practices, like creating connection profiles.\n\nConnection Profiles\n-----------------------------\nYou can create as many profiles as you like in your vimrc.  Each profile specifies various connection information.  Each buffer can be connected to a different database.   The plugin will automatically prompt the user for connection information.  If you have defined profiles in your vimrc, for ease of use,  you can choose from a numbered list.\n\nSQL History\n-----------\nAs of version 3.0, dbext maintains a history file which is shared between multiple instances of Vim.  A statement added in one instance of Vim will be immediately available in a different instance of Vim on the same computer.  To re-run a statement you can either press <enter> on the line, or if you prefer the mouse you can double click on the statement.\n\nModeline Support\n---------------------------\nSimilar to Vim modelines, you can specify connection information as comments within your buffers.  To prevent sensitive information (i.e. passwords) from being visible, you can specify a connection profile as part of your modeline.  \n\nObject Completion\n----------------------------\ndbext ties into Vim dictionary feature.  You can complete table names, procedure names and view names using the i_CTRL-X_CTRL-K feature.\n\nViewing Lists of Objects\n------------------------------------\nYou can browse through the various objects in the database you are connected to and specify wildcard information.  For example you can say, \"Show me all tables beginning with 'ml_' \".  These objects are currently supported: Tables, Procedures, Views,  Columns (for a table).\n\nResult Buffer\n-------------------\nThe output from any of the commands is placed into a new buffer called Result.  In the event of an error, both the error and the command line is included for inspection.\n\nMappings\n----------------\nThere are many maps created for convenience.  They exist for most modes (command, visual and insert).\n\nPlace the cursor on a word, and invoke the default mapping (or menu) and a Result buffer will open with the contents of the table displayed (i.e. select * from <word>.  Optionally you can be prompted for the table name, and a WHERE clause.\n\nDescribe a table (see column names and datatypes).\n\nDescribe a stored procedure (see input and output datatypes).\n\nVisually highlight statements and execute them against the database.\n\nParsing Statements\n-----------------------------\nBy default any statement will be parsed looking for input parameters (host variables), if any are found you are prompted to enter a suitable value for the parameter.  This option can be turned off either globally or on a per\nbuffer basis.\n        SELECT first_name, city\n          FROM customer\n         WHERE last_name    = @name\nIn the case you will be asked for a value for @name.  The rules for defining input parameters are customizable either globally or on a per buffer basis. See help file for more details.\n\nFileType Support\n--------------------------\nSQL can be used from a variety of languages.  Each development language (PHP, Perl, Java, ...) language has different syntax for creating SQL statements that are sent to the database.  dbext has support for several\ndifferent filetypes, so that it can understand and correctly parse a SQL statement.\n\nThe current supported languages are:\n        PHP, Java, JSP, JavaScript, JProperties, Perl, SQL, Vim\n\nFor example assume you had the following Java code:\nString mySQL = \n    \"SELECT s.script, ts.event, t.name                  \" +\n    \"     , s.script_language, sv.name                  \" +\n    \"  FROM ml_script s, ml_table_script ts, ml_table t \" +\n                \"     , ml_script_version sv                        \" +\n    \" WHERE s.script_id   = \" + script_version +\n    \"   AND ts.version_id = \"+obj.method() +\n    \"   AND ts.table_id   = t.table_id                  \";\n\nIf you visually select from the \"SELECT ... to the \"; and ran \n :'<,'>DBExecSQL    (or used the default map <Leader>se)\n\nThe Java filetype support would concatenate each individual string into one\nsingle string.  In this case it removed the \" + \" and concatenated  the\nlines to result in the following (assuming this is on one line): \n       SELECT s.script, ts.event, t.name , s.script_language, sv.name\n       FROM ml_script s, ml_table_script ts, ml_table t \n                  , ml_script_version sv\n      WHERE s.script_id   = \" + script_version + \"\n        AND ts.version_id = \"+obj.method() +\"\n        AND ts.table_id   = t.table_id \n\nNext, it will prompt you for replacement values for the various variables or  objects you used in the string.\nAssuming you had the default behaviour turned on, you would be prompted  to supply a value for: \n                \" + script_version + \"\n                \"+obj.method() +\"\n\nSo assuming you entered: \n                100\n                'Project_Yahoo'\n\nThen the resulting string sent to your database would be (again, this would technically be on one line): \n       SELECT s.script, ts.event, t.name , s.script_language, sv.name\n       FROM ml_script s, ml_table_script ts, ml_table t \n                  , ml_script_version sv\n      WHERE s.script_id   = 100\n        AND ts.version_id = 'Project_Yahoo'\n        AND ts.table_id   = t.table_id \n\nBenefit:  \nYou did not have to test your SQL by cutting and pasting it into a separate tool and replacing all the object and host variables yourself.  Just by visually selecting the string and running the command DBExecSQL (or the default mapping <Leader>se) the SQL statement was executed against the database and allowed to you enter host variables.\n\nAdditional Commands\n---------------------------------\nDBExecSQL - Enter any command you want sent to the database\nDBExecRangeSQL - Enter any range of statements you want executed\nSelect  - Enter the remainder of a select (ie :Select * from customer)\nCall  - Call a stored procedure\nUpdate  - Enter the remainder of an update\nInsert  - Enter the remainder of an insert\nDelete  - Enter the remainder of an delete\nDrop    - Enter the remainder of a drop\nAlter   - Enter the remainder of an alter\nCreate  - Enter the remainder of a create",
  "rating_total": "753",
  "rating_votes": "220",
  "downloads": "17254",
  "install_details": "The zip file contains the necessary path structure.\n\nOn *nix, unzip into:\n$HOME/.vim/\n\nOn Windows unzip into:\nvim/vimfiles/\n\nFiles:\nplugin/dbext.vim \nautoload/dbext.vim\nautoload/dbext_dbi.vim\ndoc/dbext.txt\n\nTo update the Vim Help, run:\n:helptags $HOME/.vim/doc  (Unix)\n:helptags $VIM/vimfiles/doc  (Windows)\n\nDependencies\n----------------------\nThe autoload/SQLComplete.vim file uses dbext.vim for dynamic code completion.  This file has been included with dbext.vim but it is normally included with the standard Vim runtime.  David Fishburn is also the author of this plugin.  It was enhanced to support SQL objects with spaces.  It can also be downloaded separately from here: http://www.vim.org/scripts/script.php?script_id=1572\n\nMaintainer\n--------------\nDavid Fishburn, for issues please post to the Vim mailing list, or to David directly.  \n:h dbext.txt has contact details.\n",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13339",
      "filename": "dbext_1200.zip",
      "script_version": "12.00",
      "date": "2010-07-15",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn\n\nNew Features \n--------- \n- A number of changes around the Oracle formating instructions.  Support for packages when describing certain objects.  These changes were provided by Sergey Khorev. \n- Improved the parsing of Perl strings when prompting for variables. \n- Made some additional changes to the variable_def_regex for how you can specify it from Vim modelines and DBSetOption.  This makes it much more flexible. \n                                                                             \nBug Fixes \n--------- \n- If the word \"profile\" was used in a dbext profile name dbext would report the error: \"dbext: Profiles cannot be nested\" (Chris Cierpisz). \n- Corrected the regex used to find object owner names (Sergey Khorev). "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11341",
      "filename": "dbext_1101.zip",
      "script_version": "11.01",
      "date": "2009-09-08",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Post by David Fishburn\nBug Fixes\n---------\n- If a large result set is retrieved, there is a significant performance delay which was introduced in 11.00.  This was related to the new g:dbext_rows_affected feature (Tocer).\n- Error E15: Invalid expression: b:dbext_sqlvar_mv[var] is reported if you are using saved variables and then modified the query with a new variable.  Now the saved variables are used for the known variables and you are prompted for the unknown.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11239",
      "filename": "dbext_1100.zip",
      "script_version": "11.00",
      "date": "2009-08-23",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn\n\nNew Features\n------------\n- When autoclose is enabled, a message is displayed indicating autoclose is enabled.  This message will now also include the number of rows affected by the last statement (if applicable).  This is available for all database interfaces which can provide this information.  Vim scripts or mappings have access to this value by referencing the g:dbext_rows_affected variable (Philippe Moravie).\n- The Select, Update, Delete, Alter and Drop commands will now complete table names.\n- Revamped the saved variables (see |dbext-tutorial-variables|).  dbext checks your queries and will prompt for variables (see |dbext-prompting|).  dbext uses regular expressions to determine which variables should be prompted.  To see how you can easily extend the regular expressions follow the tutorial.  This replaces the previous method which was too limiting.  The new technique uses Vim's standard regular expressions.  This introduces the variable_def_regex dbext option and deprecates the variable_def dbext option.\n- With the introduction of saved variables, you are now prompted during SQL execution to determine whether the previously saved variables should be substituted.\n                                                                              \nBug Fixes\n---------\n- If you re-sourced plugin/dbext.vim you would receive the following error: E227: mapping already exists for <Leader>sas\n- Errors were reported about undefined variable, dbext_sqlvar_temp_mv,  if executing a SQL statement directly from a filetype which was not SQL (i.e. PHP, Java, csharp, ...).\n- If saved variables were in use, it was possible for dbext to used the replaced variables without the user knowing.  For example stored procedures could be created with the replaced strings instead of the variables.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=10209",
      "filename": "dbext_1000.zip",
      "script_version": "10.00",
      "date": "2009-03-14",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn\n\nNew Features\n------------\n- Added new database support for SQL Anywhere UltraLite (11.x).\n- Added new database support for Firebird (2.x).\n- Added \"@@variable\" style to the list of bypassed variable names along with IN, OUT, INOUT and DECLARE.\n- When listing stored variables, you can now remove multiple lines using visual mode.\n- When closing the result window (using \"q\" or DBResultsClose) you are intentionally returned to the buffer which opened the window instead of allowing Vim to choose which window.\n                                                                            \nBug Fixes\n---------\n- The version 9.00 release of dbext broke modeline support.\n- When listing variables the following error could be reported: E121: Undefined variable\n- It was not possible to retrieve more than 500 characters from a character or binary column in the database when using DBI or ODBC.  Adding driver_parms=LongReadLen=4096 now works correctly.  You can also change this after you are connected to the database using DBSetOption LongReadLen=4096.  Running DBListConnections will display the current setting for each database connection currently open.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=9794",
      "filename": "dbext_900.zip",
      "script_version": "9.0",
      "date": "2009-01-10",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn\nNew Features\n------------\n- Added the ability to set and store SQL variables for each buffer.  This will reduce prompting for statements which are often re-used.  Added support for listing and deleting SQL variables.   Initial prototype by Garrison Yu.\n- Added option, g:dbext_default_variable_remember, to control whether SQL variables should be stored when prompted.\n- Improved the parsing of SQL statements to account for procedural language.  If a IN, OUT, INOUT or DECLARE statement is found prior to the use of the variable, it is stored for later use.  When the variable is encountered, if the declaration was found we skip prompting for it's value.  This should reduce the number of prompts you receive when executing SQL (i.e. Functions, Procedures, Events, Packages and so on depending on the naming convention you use for your variables.\n- Updated the tutorial and added more links to different sections see |dbext-tutorial-variable|\n- Added VB filetype support (Garrison Yu).\n- Added escaping to allow specifying an new Oracle URL syntax for server connection parameters (Anton Sharonov).\n- Renamed DBCloseResults, DBOpenResults, DBRefreshResult, DBToggleResultsResize to DBResultsClose, DBResultsOpen, DBResultsRefresh, DBResultsToggleResize to be more consistent.\n                                                                          \nBug Fixes\n---------\n- You are often repeatedly prompted for connection information.  This change reduces the number and allows you to cancel out of the prompt dialogs.\n- Added an unconditional quit command to exit out of Oracle's SQLPlus (Anton Sharonov).\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=9416",
      "filename": "dbext_800.zip",
      "script_version": "8.00",
      "date": "2008-10-30",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn\nNew Features\n------------\n- When defining a profile or running DBPromptForBufferParameters, you can now optionally specify a file containing commands you want to execute against the database when you first connect (James Horine).\n- A new global variable, g:dbext_default_login_script_dir allows you to override the 2 default directories which are searched for these files.\n- The dbext tutorial has been updated to demonstrate the login_script.\n- Doc update demonstrating the use of integrated logins (Daren Thomas).\n- Added a new user defined autocommand dbextPreConnection which is triggered prior to dbext connecting to the database.  This allows you to customize settings based on your buffer and environment (Tim Pope).\n                                                                         \nBug Fixes\n---------\n- Setting LongReadLen for DBI and ODBC connections did not work.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=9261",
      "filename": "dbext_700.zip",
      "script_version": "7.00",
      "date": "2008-09-21",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn.\nNew Features\n------------\n- Large change between how the error handling between DBI and ODBC  connections were reported and displayed.\n- Non-printable characters are now dealt with for DBI and ODBC connections.\n                                                                      \nBug Fixes\n---------\n- Using ODBC to connect to SQL Server, dbext did not handle informational messages appropriately leading to \"not connected\" messages (Albie Janse van Rensburg).\n- When executing SQL if you were prompted for a variable replacement and cancelled the query the dbext history window was displayed instead of returning to the buffer.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=9099",
      "filename": "dbext_620.zip",
      "script_version": "6.20",
      "date": "2008-08-09",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn\nBug Fixes\n---------\n- Changed the DB2 TOP X syntax (DBExecSQLTopX).\n- Changed the query used to retrieve the current line for DBExecSQLUnderCursor when no text is selected (Sergey Alekhin).\n- When parsing a SQL statement for host variables it was possible to miss excluding the INTO clause correctly (Sergey Alekhin).\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8782",
      "filename": "dbext_610.zip",
      "script_version": "6.10",
      "date": "2008-06-10",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn\nNew Features\n------------\n- The result window inherits the connection parameters of the buffer which last executed SQL (Antony Scriven).  For example, if you retrieve a list of tables, you may want to describe a table or generate a list of columns for one of the tables.  Using the usual maps will generate the result you need without prompting for connection parameters.  This is especially useful if you have more than 1 buffer and each buffer connects to different databases.\n- Added the ability to choose where to put the Result window.  When the window is split you can choose vertical or horizontal, bottom or top, and choose the the width of the window for horizontal switches (Clinton Jones).\n- Modified DBExecSQLUnderCursor to select all text until end of line if no valid command terminator is found rather than just one letter (David Venus).\n- DBGetOption displays the output from :ver for debugging.\n                                                                 \nBug Fixes\n---------\n- Tutorial update (Nico Coetzee).\n- Tutorial update (Clinton Jones).\n- DBGetOption reported an exception E730: using List as a String.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8621",
      "filename": "dbext_601.zip",
      "script_version": "6.01",
      "date": "2008-04-29",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn\nBug Fixes\n---------\n- On dbext startup an error was reported indicating mapleader was not defined (Matt).\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8615",
      "filename": "dbext_600.zip",
      "script_version": "6.00",
      "date": "2008-04-28",
      "vim_version": "6.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn\n\nNew Features\n------------\n- dbext now supports table and column names which can contain spaces (Antony Scriven).  There is a corresponding change to sqlcomplete.vim to support this.\n- Added an autoclose option.  If you execute SQL which does not return a result set you can choose to have the dbext results window automatically close (unless of course there was an error).  See the autoclose option for more details.\n- Added the map shortcuts to each of menu items under the dbext menu so that users can learn them more easily (Alexander Langer).\n- Using the menu_mode option you can control if and where the dbext menu is created (Marty Grenfell).  See the menu_mode option for more details.\n- For MySQL, added -t as part of the default command line parameters setting.  This will properly format the data into tabs or spaces to make it more readable (Luke Cordingley).\n- A message is displayed indicating the time a SQL command began executing.  The result window also contains the time the SQL finished executing.\n- DBI or ODBC can now fetch BLOB columns from the database.  By default these are truncated at 500 characters, but that can be changed by issuing: DBSetOption driver_parms=LongReadLen=4096\n\nBug Fixes\n---------\n- If a database column had an emdedded double quote this would be displayed as \\\" in the dbext result window (Jean-Christophe Clavier).\n- When loading the plugin, it will now check to ensure the map does not already exist before attempting to create it.  This will prevent errors when mappings clash (Antony Scriven).\n- If you prompt for connection parameters using the DBI or ODBC types we need to disconnect any existing connections or the existing connection will continue to be used.\n- In some cases when using DBI or ODBC an error was not reported and only a blank result set was returned.  Now the database error is reported back to the user.\n- Data retrieved via DBI or ODBC which contained a backslash were not escaped properly and could disappear.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7678",
      "filename": "dbext_520.zip",
      "script_version": "5.20",
      "date": "2007-09-15",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn.\nNew Features\n------------\n- When using DBI or DBI::ODBC null fields are now displayed as NULL instead of empty spaces (now you can distinguish between them).\n- When using DBI or DBI::ODBC you can specify the column separator \n:let g:dbext_default_dbi_column_delimiter=\"\\t\" (Jean-Christophe Clavier)\n- When using DBI or DBI::ODBC and you use a vertical orientation for the result set, if there are any embedded newline characters in your data this will be displayed and shifted to align with the column above.  Prior to this all newlines were stripped from the output when printing to preserve standard horizontal output (Jean-Christophe Clavier).\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7643",
      "filename": "dbext_511.zip",
      "script_version": "5.11",
      "date": "2007-09-10",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn. \nNew Features ------------ \n- Added support for Oracle Rdb on an Open VMS Node.  \nFor vim on Open VMS look at http://www.polarhome.com/vim/.\nFor Open VMS http://h71000.www7.hp.com/openvms/. \nDevelopment of Rdb support by Andi Stern\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7615",
      "filename": "dbext_506.zip",
      "script_version": "5.06",
      "date": "2007-09-03",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn. \nNew Features\n------------\n- Added Perl's DBI and DBI::ODBC support.  This opens additional database support without having to adjust scripts.  You must have a Perl enabled Vim (:echo has('perl')).  Using the DBI layer offers some advantages over using the native binary tools:\n       - Transaction support which allows you to maintain a transaction during your editing session and either commit or rollback and changes.  This is not possible without using the DBI layer.\n       - Speed improvements, since the database connection is maintained, the there is less overhead per command.\nHuge thanks to Jean-Christophe Clavier and Albie Janse van Rensburg for their beta testing and suggestions.\n\n- New commands are available to select only a few rows instead of an entire result set.  In most databases this is referred to as TOP X.  DBExecSQLTopX, DBExecVisualSQLTopX, DBExecSQLUnderCursorTopX have been added plus associated mappings (Albie Janse van Rensburg).\n- Made Cygwin detection a bit easier using the shellslash option (Steve Gibson)\n                                                                                \nBug Fixes\n------------\n- SQL Server support had issues with the queries when running DBCompleteTable, DBCompleteProcedure, DBCompleteView which also affected the sqlcomplete.vim plugin included with Vim7 (Albie Janse van Rensburg).\n- Oracle reported \"rows will be truncated\", added \"set linesize 10000\" to the Oracle headers (Stuart Brock)\n- When prompting for connection parameters if you choose a profile of \"0\" which is no profile, you had to re-run the wizard to prompt for the rest of the parameters, now the wizard continues as expected.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=6527",
      "filename": "dbext_420.zip",
      "script_version": "4.20",
      "date": "2006-12-19",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn.\nNew Features\n- Improved support for Cygwin.  If you are using a Cygwin compiled Vim (on   Windows) and are accessing Windows compiled binaries (i.e. sqlplus.exe) the binary will complain since it does not understand Unix path names.  Added the option g:dbext_default_use_win32_filenames which allows you to indicate the binaries must use translated Windows paths instead. (Richard)\n- DBGetOption displays more information.\n                                                                               \nBug Fixes\n- SQL Server support had issues with the queries when running DBCompleteTable, DBCompleteProcedure, DBCompleteView which also affected the sqlcomplete.vim plugin included with Vim7 (Albie Janse van Rensburg).\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=6499",
      "filename": "dbext_410.zip",
      "script_version": "4.10",
      "date": "2006-12-05",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn.\nNew Features\n------------\n- Updated DBGetOption to additionally display a list of all database profiles and their types.  All dbext options that have been overriden via the vimrc are also displayed.\n                                                                          \nBug Fixes\n------------\n- db2 support had issues with the queries when running DBCompleteTable, DBCompleteProcedure, DBCompleteView which also affected the sqlcomplete.vim plugin included with Vim7 (Peter Princz).\n- The documentation was still indicating there was a plugin dependency which has been removed with Vim7.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=6221",
      "filename": "dbext_400.zip",
      "script_version": "4.03",
      "date": "2006-09-23",
      "vim_version": "7.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Posted by David Fishburn.\nNew Features\n------------\n- dbext.vim now requires Vim7.\n- dbext.vim no longer has dependencies on other plugins by utilizing the new Vim7 features (Lists and Dictionaries).\n- When using the DBCompleteTable, DBCompleteProcedure, DBCompleteView commands errors are displayed instead of silently ignored.  This makes them more useful with the sqlComplete plugin (see |sql.txt|).\n- Added new option, dbext_default_MYSQL_version, for MySQL to indicate the version you using.\n- You can optionally define a function, DBextPostResult, in your .vimrc, this function will be called each time the result window is updated.  This function can be used to do anything, for example, syntax highlighting the result set in the result window.\n\nBug Fixes\n------------\n- Added version support with MySQL to control what SQL is sent for version 4 and 5 servers.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=5843",
      "filename": "dbext_350.zip",
      "script_version": "3.50",
      "date": "2006-06-20",
      "vim_version": "6.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "New Features\n------------\n - g:dbext_default_inputdialog_cancel_support = 0 will prevent inputdialog from providing a cancel option.  This works around a Vim7 bug.  dbext will automatically detect this and set the option the first time it is encountered.\n - Changed the order of some of the text in the dialog boxes to make them more readable when using the console version of Vim.\n - dbext can parse SQL statements and prompt the user to replace variables with values prior to sending the statement to the database to be executed.  This is useful for testing SQL which is embedded in your code without having to manually replace variables and string concatentation.  A new identifier (the until flag) allows you to specify the beginning of a string and what to prompt for until a finishing string.  This makes it more flexible for you to configure what you would like prompting for when looking for variables.\n\nBug Fixes\n------------\n - DBPromptForBufferParameters can report \"E180: Invalid complete value: -1\" if running the console version of Vim.  dbext will detect this problem and automatically set g:dbext_default_inputdialog_cancel_support = 0 to work around this Vim7 bug.\n\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=5702",
      "filename": "dbext_300.zip",
      "script_version": "3.00",
      "date": "2006-05-15",
      "vim_version": "6.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "New Features\n------------\n- dbext supports a history of previous commands.  The DBHistory command will display a numbered list of previous SQL statements.  Pressing <enter> or double clicking on one of the items will execute the statement.  The number of items in the list is configurable via your vimrc.  The history items are stored in a file, dbext_sql_history.txt.  The location of the file can also be controlled.\n- The 'refresh' feature added in version 2.30 has been updated to take advantage of the history feature.\n- The PHP parser has improved and can handle single or double quoted strings, string concatenation and host variables.  It will correctly strip the quotes, join the concatenated strings and prompt the user for host variables before executing the SQL statement.\n- Updated documentation for Vim 7 SQL code completion.\n- Table, procedure and view dictionaries include the owner name of the object.  This is on by default, but can be controlled via a new global option, dbext_default_dict_show_owner.  This has not been enabled for all databases it depends on whether the database supports this feature.  The autoload\\sqlcomplete.vim plugin takes advantage of this feature.\n- Added support for stored procedures / functions in MySQL 5.\n                                                                            \nBug Fixes\n------------\n- Updated the PHP parser to work with a more varied string quotes and string concatenation.\n- The \"extra\" feature did not add a leading space for MySQL.  Using the tabbed output required updates to the parsing of the output generated by MySQL.\n- Miscellaneous documentation updates."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=4576",
      "filename": "dbext_230.zip",
      "script_version": "2.30",
      "date": "2005-09-13",
      "vim_version": "6.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "New Features\n ------------\n - The result window has a local buffer mapping 'R', which will 'refresh' the window.  This means it will re-run the previous statement which is useful if you are repeatedly checking something in the database.\n - SQL Anywhere (ASA) no longer relies on the jcatalogue tables to be installed in the database.  System views are used instead.\n - Support for MySQL 5.0 has been added, which includes stored procedures and views (as much as the beta allowed).\n - For Postgress SQL you can now optionally enter an owner name to filter by when showing list of objects (tables, procedures, views).\n\n Bug Fixes\n ------------\n - The alternate-file is no longer changed the first time the result buffer is opened.\n - Using DB2 with db2cmd incorrectly specified the command terminator with td, instead of -t.\n - On win32 platforms, if the bin_path has been specified for DB2, then add this to the system path since db2cmd relies on other batch files to operate correctly.\n - The connection string is displayed by both the Result buffer (first line) and the titlestring to the buffer (if enabled).  This was not correctly appending the user used to connect to the database.\n - When parsing Vim scripts we did not correctly remove a leading line continuation slash from the from of a query."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3999",
      "filename": "dbext_220.zip",
      "script_version": "2.20",
      "date": "2005-03-10",
      "vim_version": "6.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": " New Features\n ------------\n - Added new connection parameter called \"extra\", you can place any\nadditional command line parameters in this option.\n - DBGetOption displays all options including the dbext version.\n - Better support for command terminators that have newline or special\ncharacters in them.  For example ASE/SQLSRV use \"\\ngo\\n\", now the command\nDBExecSQLUnderCursor will correctly find the statement.\n - Use_tbl_alias defaults to \"ask\", instead of \"default on\".\n - For most supported databases, when displaying the Table / Procedure /\nView List, you can now enter a partial string \"DBA.\", and if a . is included\nit will only display objects created / owned by that userid.\n - DBExecSQLUnderCursor would sometimes stop in the middle of a query if the\ncommand terminator was included (inside a quoted string), now it ensures\nthere is no text following the terminator.\n - The result window also includes the error code returned by the binary\nused to execute the command.  This can be useful for debugging.\n - The first line of the result window includes a line showing the\nconnection information, if you have many buffers open, it can be difficult\nto determine which database you are executing commands against.  A glance at\nthis line will tell you immediately.\n - g:dbext_default_always_prompt_for_variables = 0 will prevent you from\nbeing prompted for substitution parameters.  Setting this value to 1 will\nalways prompt the user.\n - You can now abort the execution of a statement if you are prompted for\nsubstitution parameters.\n - If you are prompted for parameters, if you choose \"Stop Prompting\" the\ncommand will be executed immediate.  If \"Never Prompt\" is chosen, no further\nprompting will occur for this buffer.\n\n Bug Fixes\n ---------\n - SQLSRV did not have a default command terminator, now it is \"\\ngo\\n\".\n - Changed the Oracle command terminator to \";\", and the routine that\nexecutes the statements automatically adds the \"\\nquit;\\n\" so that   sqlplus\nwill complete.\n - Spaces were not correctly removed from column lists in all cases, this\nshowed up as an issue with the SQL Intellisense plugin.\n - When executing SELECT statements the INTO clause (if present) is removed\nso the results are displayed in the result window.  Refined the removal of\nthe INTO clause to ensure it does not interfer with an INSERT or MERGE\nstatement."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3483",
      "filename": "dbext_211.zip",
      "script_version": "2.11",
      "date": "2004-09-24",
      "vim_version": "6.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "Bug fix: On some platforms the temporary file created to execute SQL\nstatements must end in \".sql\".  Corrected this for all databases."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3454",
      "filename": "dbext_210.zip",
      "script_version": "2.10",
      "date": "2004-09-15",
      "vim_version": "6.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "New Features\n- Support for the SQLite database has been added (thanks to Ron Aaron)."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3259",
      "filename": "dbext-2.01.zip",
      "script_version": "2.01",
      "date": "2004-07-22",
      "vim_version": "6.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "New Features\n- Tutorial - Based on feedback from users, created a step by step tutorial.\nAll users should try the tutorial to learn how to use the various features\nof the plugin.\n- DBGetOption - without parameters populates the Result window with all\noptions.\n- DBGetOption and DBSetOption support command line completion for the\nvarious options (DBGetOption d<tab>, will cycle through all options\nbeginning with \"d\").\n- New option, replace_title, changes the title of the buffer to show\nconnection information which is useful if you are using  a scratch buffer to\ntest SQL.\n- IntegratedLogin support for Windows users.\n- DBExecRangeSQL - useful for custom mappings, and executing commands\nwithout visual mode.\n- New maps <Leader>sea - sql - execute - all (lines in the file),\n<Leader>sel - sql - execute - line (the current line)\n- New filetype support - jproperties\n\n\nBug Fixes\n- dbname was not defaulting correctly.\n- bin_path did not work correctly on windows platforms.\n- Updated the connection text in the Result buffer.\n- Overhauled the DB2 support.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3220",
      "filename": "dbext-2.0.zip",
      "script_version": "2.00",
      "date": "2004-07-11",
      "vim_version": "6.0",
      "author": {
        "user_id": "843",
        "user_name": "petike",
        "first_name": "Peter",
        "last_name": "Bagyinszki",
        "email": "petike1 at gmail.com",
        "homepage": ""
      },
      "release_notes": "dbext.vim has been greatly enhanced for version 2.00.\n\nAdditional features include:\n\nConnection Profiles\nYou can create as many profiles as you like in your vimrc.  Each profile specifies various connection information.  When you are prompted for connection information, for ease of use,  you can choose from a numbered list.\n\nModeline Support\nSimilar to Vim modelines, you can specify connection information as comments within your buffers.  To prevent sensitive information (ie passwords) from being visible, you can specify a connection profile as part of your modeline.  \n\nObject Completion\ndbext ties into Vim dictionary feature.  You can complete table names, procedure names and view names.\n\nViewing Lists of Objects\nYou can browse through the various objects in the database you are connected\nto and specify wildcard information.  For example you can say, \"Show me all\ntables beginning with 'ml_' \".  These objects are currently supported:\nTables, Procedures, Views,  Columns (for a table).\n\nFileType Support Added\ndbext has support for various filetypes.  For example, assume you dynamically build a SQL statement by joining strings together, using calls to functions, host parameters.  By visually selecting the code and executing it dbext will parse the statement, strip out the various string joining commands (+, ||,  .) and prompt you for host values before sending the string to be executed against the database.  This way it is very easy to test your SQL statements without having to cut and paste the commands into a SQL tool.  Currently supported filetypes are: PHP, Java, JSP, JavaScript, Perl, SQL, Vim.\n\nIntellisense Addin Support\nThe Intellisense  plugin now has SQL supported.  To enable greater functionality (table, procedure, view lists), it uses dbext.vim to retrieve this information."
    }
  ]
}
