{
  "script_id": "2720",
  "display_name": "arc.vim",
  "summary": "A syntax highlighter & filetype plugin for Paul Graham's Arc Lisp dialect.",
  "name": "arc.vim",
  "script_type": "syntax",
  "description": "(Scroll down to see the install details.)\n\nNote: if you have a bug to report, please do so with the issue tracker at http://bitbucket.org/fallintothis/arc-vim/issues/ since I probably won't respond to emails.\n\nI've only tested this on Vim 7.2.  I have no idea (one way or the other) how backwards-compatible it is.\n\nSYNTAX:\n\nThe following options are available for customizing the Arc highlighter.  They work well in conjunction with the accompanying Arc ftplugin options (see below).\n\n- g:arc_rainbow\n\nIf this variable is nonzero, then matching pairs of parentheses will highlight in 10 different rainbow colors.  If this variable is 0, then rainbow colors are gone; it's just normal parentheses and quasiquoted parentheses.\n\n- g:arc_always_atstrings\n\nIn Arc 3, there is an option to enable string interpolation of arbitrary expressions using at-signs by saying\n  \n  (declare 'atstrings t)\n\nThen, for instance, \"1 + 2 = @(+ 1 2)\" is the same as \"1 + 2 = 3\".  If g:arc_always_atstrings is nonzero, then expressions after the @-symbol inside of strings will be highlighted like normal code, as though you had (declare 'atstrings t).  If this variable is 0, then atstrings will not highlight.\n\nIf you want more intelligent control over atstring highlighting, check out the accompanying ftplugin options below.\n\nEXAMPLE:\n\nYou could put\n\n  let g:arc_always_atstrings=1\n\nin your .vimrc, and whenever you were highlighting an Arc file, atstrings would highlight, but parentheses would be colored normally (non-rainbow), since you don't have to explicitly set either variable to 0.  If they don't exist, they'll do nothing anyways.\n\nFTPLUGIN:\n\nThe following options are available for customizing the Arc ftplugin.  They are meant to work in conjunction with the accompanying Arc syntax highlighter (see above).\n\n- g:arc_detect_atstrings\n\nIn Arc 3, there is an option to enable string interpolation of arbitrary expressions using at-signs by saying\n  \n  (declare 'atstrings t)\n\nThen, for instance, \"1 + 2 = @(+ 1 2)\" is the same as \"1 + 2 = 3\".  If g:arc_detect_atstrings is nonzero, then expressions after the @-symbol inside of strings will be highlighted like normal code according to the following cases:\n\n  - if a form that will enable atstrings, like\n      (declare 'atstrings t)\n    is in the source code, highlight expressions after @-symbols\n\n  - if a form that will disable atstrings, like\n      (declare 'atstrings nil)\n    is in the source code, do not highlight expressions after @-symbols\n\n  - if there are multiple forms that contradict each other (enabling\n    atstrings in one place while disabling them in another), then be safe and\n    do not highlight expressions after @-symbols.\n\nThis option can be used as an alternative to g:arc_always_atstrings, which is found in the Arc syntax highlighter (see above).  If, however, g:arc_always_atstrings is nonzero, it will take precedence over g:arc_detect_atstrings and always highlight atstrings.  When g:arc_always_atstrings is 0, behavior is dictated by g:arc_detect_atstrings.\n\nChanges in highlighting are triggered whenever you write to the file.  If you change, say\n\n  (declare 'atstrings t)\n\nto\n\n  (declare 'atstrings nil)\n\nthen :w, the atstring highlighting will be turned off.\n\n- g:arc_bodops\n\nIMPORTANT: This feature is currently available only if your Vim installation has +python support.  See :h python\n\nIf this variable is nonzero, then on every file write your source code is inspected in an attempt to find top-level macro definitions that have body parameters.  That is, \n\n  (mac foo (vars vals . body)\n    something)\n\nwill be detected, because it is a macro that takes a rest parameter named \"body\".  Whereas\n\n  (def foo (a b . body)\n    something)\n\nwill not, because it's not a macro definition, and\n\n  (def make-macro (name)\n    `(mac ,name body (pr \"stuff\")))\n\nwill not recognize the quasiquoted macro definition, even though it takes a body parameter.\n\nThe name of each macro found in this way will be added to the &lispwords variable.  Then, with auto-indentation, the macro\n\n  (mac foo body\n    bar)\n\nwill indent like\n\n  (foo a\n    b\n    c)\n\ninstead of\n\n  (foo a\n       b\n       c)\n\n(Sorry; that probably doesn't look right in a non-fixed-width font.)  This can be useful for macros that you define to be syntactic forms, much like how, say, looping constructs are defined in Arc itself.\n\n- g:arc_highlight_lispwords\n\nIf nonzero, every word in the &lispwords variable will highlight as though it were syntax.  The highlighting is updated every time you write to the file.  This can be useful in conjunction with g:arc_bodops, so that after you write the macro\n\n  (mac my-each (x xs . body)\n    ...do stuff...)\n\neach occurrence of \"my-each\" will be highlighted & indented just like the \"each\" macro.  You can even add words you want to be highlighted & indented by going\n\n  :setl lispwords+=foo\n\nThis lispword will then persist across file-writes, even if you've not defined a \"foo\" macro.\n\nMost of these extra features are useless without the accompanying Arc syntax highlighter, so you probably want to use it if you use these features.\n\nEXAMPLE:\n\nYou could put\n\n  let g:arc_detect_atstrings=1\n  let g:arc_bodops=1\n  let g:arc_highlight_lispwords=1\n\nin your .vimrc, and when using the Arc syntax highlighter you can test, say, news.arc and see that:\n\n  - atstrings are highlighted, as there is a positive declaration at the top of the source\n  \n  - macros like \"adop\" and \"edop\" are highlighted & auto-indented as lispwords\n\n  - but the macro \"newsop\" isn't highlighted or auto-indented, because its rest parameter is named \"args\".  So, you can :setl lw+=newsop and :w to see \"newsop\" become highlighted.",
  "install_details": "1.  If you haven't already, create your user runtime directory.  You typically use the first item of the runtimepath option (see :h runtimepath).  For example, using Vim's default runtimepath option on Unix:\n\n  mkdir ~/.vim\n\n2.  If you haven't already, create directories inside of this called \"syntax\" and \"ftplugin\".  Continuing the last example:\n\n  mkdir ~/.vim/syntax\n  mkdir ~/.vim/ftplugin\n\n3.  Download and extract the contents of this package (arc-vim.tar.gz).  Inside, there will be two directories: \"syntax\" and \"ftplugin\".  Inside each of these are their own respective \"arc.vim\" files.  Place each in their respective directories that you have from step 2 (i.e., place the package's \"syntax/arc.vim\" into \"~/.vim/syntax/arc.vim\" and \"ftplugin/arc.vim\" into \"~/.vim/ftplugin/arc.vim\").\n\n4.  Now you can start Vim and enable the syntax highlighter.  Make sure to first do\n  \n  :syntax enable\n\nor\n  \n  :syntax on\n\nif you don't already have this in your .vimrc or such.  Then, you can do things like\n\n  :setf arc\n\nto start highlighting the current buffer.\n\n5.  You can also start Vim and enable the filetype-plugin.  Make sure to first do\n  \n  :filetype plugin on\n\nif you don't already have this in your .vimrc or such.  Then you can use commands like\n\n  :setf arc\n\nto start using the Arc filetype-plugin.  For more info, see :h ftplugins\n\n6.  If you want Vim to automatically turn on Arc syntax highlighting / use the Arc ftplugin, you can add\n\n  au BufRead,BufNewFile *.arc setf arc\n\nto your .vimrc (or ftdetect/arc.vim or what-have-you; see :h new-filetype).\n\nNote that if, like me, you have any existing sessions/views for a particular Arc file, Vim might be setting the filetype to whatever it was in the view (see :h views-sessions), which means that the above won't seem to have an effect!  You can delete the view or manually :setf arc on such files, then all should be fine.",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11135",
      "filename": "arc-vim.tar.gz",
      "script_version": "1.1",
      "date": "2009-08-06",
      "vim_version": "7.0",
      "author": {
        "user_id": "17705",
        "user_name": "fallintothis",
        "first_name": "AJ",
        "last_name": "V",
        "email": "fall.into.this at gmail.com",
        "homepage": ""
      },
      "release_notes": "Changes for the Arc 3.1 release ( see http://arclanguage.org/item?id=10254 ):\n  - Use & as ssyntax instead of +\n  - Updated the changed/new Arc identifiers\n  - Removed the o from formatoptions (I found it annoying; if you set it in\n    your .vimrc or such, you can still use it)\n  - Updated the regexp for g:arc_bodops; now it will only match definitions\n    found at the beginning of a line, to avoid macro-defining-macro mismatches\n    (not a perfect solution, but catches the common cases)"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11060",
      "filename": "arc-vim.tar.gz",
      "script_version": "1.0",
      "date": "2009-07-24",
      "vim_version": "7.2",
      "author": {
        "user_id": "17705",
        "user_name": "fallintothis",
        "first_name": "AJ",
        "last_name": "V",
        "email": "fall.into.this at gmail.com",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
