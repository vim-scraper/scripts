{
  "script_id": "353",
  "display_name": "getVar.vim",
  "summary": "Convenient retrieval of buffer or global script options.",
  "name": "getVar.vim",
  "script_type": "utility",
  "description": "These are just a few convenience functions that are useful for retrieval of plugin options that can be set globally as well as having buffer-specific over-rides.\n\nExample:  I have a global variable called \"g:sortOrder\" which is set to \"a\".  In the test.java buffer, I create a buffer variable called \"b:sortOrder\" which is set to \"d\".  Now, GetVar#GetVar( \"sortOrder\" ) will return \"d\" when I'm in test.java and \"a\" everywhere else.  My plugin code doesn't need to actually check for buffer or global variables; I can just call GetVar#GetVar and be done with it.\n\nWhy is this useful?  It mimics the behaviour of options.  For example, :set grepprg? will return the value of 'grepprg'; if a local version has been set (:setlocal grepprg=<something>), it will quietly return that.  Otherwise, it will return the global value.  GetVar#GetVar allows the same behaviour for variables.\n\nGetVar#GetVar will take an optional second parameter which will be the default value to return if neither a buffer nor a global variable by the specified name is found (the default default :) is -1).\n\nExample:  GetVar#GetVar( \"userID\", \"NONE\" ) will take either a userID or the string \"NONE\" if there isn't one.  This can be useful where a script should just use an assumed default if the user hasn't specified an override (global or otherwise).\n\nGetVar#VarExists simply returns true if any of the scopes used by GetVar#GetVar exist (in the same order of checking as GetVar#GetVar).\n",
  "install_details": "Pop it into the autload directory and use in your plugins -- just make sure to add this as a dependence when you submit your plugin to this site.",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=15512",
      "filename": "GetVar.vim",
      "script_version": "2.0",
      "date": "2011-04-23",
      "vim_version": "7.0",
      "author": {
        "user_id": "64",
        "user_name": "hemlock8",
        "first_name": "Salman",
        "last_name": "Halim",
        "email": "salmanhalim@gmail.com",
        "homepage": ""
      },
      "release_notes": "Made the whole thing into an autoload script, prefixing the names of all the functions with GetVar (the name of the script); so, the new function names are:\n\nGetVar#GetVar\nGetVar#VarExists\nGetVar#GetSafe\nGetVar#Allocate\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=12655",
      "filename": "GetVar.vim",
      "script_version": "1.4",
      "date": "2010-03-18",
      "vim_version": "6.0",
      "author": {
        "user_id": "64",
        "user_name": "hemlock8",
        "first_name": "Salman",
        "last_name": "Halim",
        "email": "salmanhalim@gmail.com",
        "homepage": ""
      },
      "release_notes": "Added two new functions: GetSafe and Allocate."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=10132",
      "filename": "GetVar.vim",
      "script_version": "1.3",
      "date": "2009-03-06",
      "vim_version": "6.0",
      "author": {
        "user_id": "64",
        "user_name": "hemlock8",
        "first_name": "Salman",
        "last_name": "Halim",
        "email": "salmanhalim@gmail.com",
        "homepage": ""
      },
      "release_notes": "Changed the plugin slightly to allow for a default value to continue working if the regular return value is a list (or dictionary; basically, not a simple\nscalar value). Then change, while bringing the plugin up to scratch with Vim 7.x, doesn't break Vim 6.x compatibility.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=5504",
      "filename": "getVar.vim",
      "script_version": "1.2",
      "date": "2006-03-31",
      "vim_version": "7.0",
      "author": {
        "user_id": "64",
        "user_name": "hemlock8",
        "first_name": "Salman",
        "last_name": "Halim",
        "email": "salmanhalim@gmail.com",
        "homepage": ""
      },
      "release_notes": "Updated to use Vim 7's t: (tab-specific) variables once buffer-specific variables aren't found.\nThe new sequence is window -> buffer -> tab -> global.  (Just stick with 1.1 if not using Vim 7.)\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2345",
      "filename": "getVar.vim",
      "script_version": "1.1",
      "date": "2003-09-22",
      "vim_version": "6.0",
      "author": {
        "user_id": "64",
        "user_name": "hemlock8",
        "first_name": "Salman",
        "last_name": "Halim",
        "email": "salmanhalim@gmail.com",
        "homepage": ""
      },
      "release_notes": "Updated to return window-specific variables, THEN buffer and then global variables."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=1049",
      "filename": "getVar.vim",
      "script_version": "1.0",
      "date": "2002-07-26",
      "vim_version": "6.0",
      "author": {
        "user_id": "64",
        "user_name": "hemlock8",
        "first_name": "Salman",
        "last_name": "Halim",
        "email": "salmanhalim@gmail.com",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
