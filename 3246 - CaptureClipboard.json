{
  "script_id": "3246",
  "display_name": "CaptureClipboard",
  "summary": "Append system clipboard changes to current buffer. ",
  "name": "CaptureClipboard",
  "script_type": "utility",
  "description": "DESCRIPTION\nQuotes or text fragments can be collected from various sources outside Vim\ninto a single text document through the clipboard. This plugin makes\nconsecutive copy-and-pastes into Vim much more comfortable by monitoring the\nsystem clipboard for changes and appending them into the current Vim buffer\nautomatically. Feedback about the number of captures is given in Vim's window\ntitle, so one does not have to switch back and forth between applications any\nmore, and can completely focus on text collection via CTRL-C, CTRL-C, ...\n\nUSAGE\n:[count]CaptureClipboard[!] [{delimiter}]\n:[count]CaptureClipboardReverse[!] [{delimiter}]\n\t\t\tMonitors the clipboard for changes and inserts any\n\t\t\tchange of clipboard contents into the current buffer\n\t\t\t(in new lines, or delimited by {delimiter} if given).\n\t\t\tTo stop, press <CTRL-C> or copy a literal dot (\".\") to\n\t\t\tthe clipboard. If [count] is given, the capture stops\n\t\t\tafter [count] captures. \n\n\t\t\tIf [!] is given, whitespace (including new lines) is\n\t\t\ttrimmed from the beginning and end of each capture.\n\n\t\t\tWith :CaptureClipboardReverse, changes are prepended,\n\t\t\treverting the insertion order. Normally, changes are\n\t\t\tappended to the current or given [line].\n\t\t\tUse :$|CaptureClipboard to append to the end of the\n\t\t\tcurrent buffer. \n\n\t\t\t{delimiter} is evaluated as an expression if it is\n\t\t\t(single- or double-)quoted, or contains backslashes. \n\t\t\tThe default {delimiter} is \"\\n\"; each capture is\n\t\t\tplaced on a new line. Use '' to place everything next\n\t\t\tto each other, ' ' to put a space character in\n\t\t\tbetween, \"\\n--\\n\" to insert a -- separator line\n\t\t\tbetween captures. When {delimiter} contains a newline\n\t\t\tcharacter, the first capture will already start on a\n\t\t\tnew line. ",
  "rating_total": "6",
  "rating_votes": "3",
  "downloads": "41",
  "install_details": "INSTALLATION\nThis script is packaged as a vimball. If you have the \"gunzip\" decompressor\nin your PATH, simply edit the *.vba.gz package in Vim; otherwise, decompress\nthe archive first, e.g. using WinZip. Inside Vim, install by sourcing the\nvimball or via the :UseVimball command. \n    vim CaptureClipboard.vba.gz\n    :so %\nTo uninstall, use the :RmVimball command. \n\nDEPENDENCIES\n- Requires Vim 7.0 or higher. \n\nCONFIGURATION\nFor a permanent configuration, put the following commands into your |vimrc|: \n\nBy default, each capture will be placed on a new line in the capture buffer;\ni.e. the delimiter between captures is a newline character: \n    let g:CaptureClipboard_DefaultDelimiter = \"\\n\"\n\nThe marker text that will stop capturing can be changed via: \n    let g:CaptureClipboard_EndOfCaptureMarker = '.'\n\nIf you capture a lot of text or the captured information is very valuable, you\ncan automatically persist the capture buffer after each capture. Enable via: \n    let g:CaptureClipboard_IsAutoSave = 1\n\nIn X, changes to the current selection (\"*) are captured. If you want\nto only capture changes to the X clipboard (\"+), not every change in\nselection, use: \n    let g:CaptureClipboard_Register = '+'",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13873",
      "filename": "CaptureClipboard.vba.gz",
      "script_version": "1.00",
      "date": "2010-09-20",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "Initial upload"
    }
  ]
}
