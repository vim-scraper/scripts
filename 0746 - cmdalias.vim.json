{
  "script_id": "746",
  "display_name": "cmdalias.vim",
  "summary": "Create aliases for Vim commands.",
  "name": "cmdalias.vim",
  "script_type": "utility",
  "description": "Sometimes we want to to change the behavior of a built-in command so end up creating a custom command, and we wish to reuse the built-in command name for it. E.g., :Runtime to replace :runtime, :Find to replace :find. I myself wanted to replace :qa with :QA (see http://vim.wikia.com/wiki/Tabclose_instead_of_quit-all), but it is hard to remember to type :QA instead of :qa everytime, that is why I created this plugin.\n\nThis plugin is just a wrapper on top of command-line abbreviations (:cabbr), to work around the big disadvantages of :cabbr. With plain :cabbr, the expansion happens anywhere the abbreviation appears while typing command-line. E.g., if you create abbreviation from runtime->Runtime, then the following will not work as you expect:\n\n:cnoreabbr runtime Runtime\n:%s/runtime/runduration/g\n\nWhat would actually execute is:\n\n:%s/Runtime/runduration/g\n\nWhich is not the same. The other problem is cabbr's trigger not only at the command-line, but also at search prompt, at the input prompt and any other prompts (see :help getcmdtype()). To avoid those unexpected expansions, cmdalias utilizes a light-weight wrapper function that expands the abbreviation only when it is typed as the first word of the ex command (\":\" prompt). So, instead of the below:\n\n:cnoreabbr runtime Runtime\n\nYou would use this:\n\n:call CmdAlias('runtime', 'Runtime')\n\nor simply,\n\n:Alias runtime Runtime\n\nThese aliases pretty much work like the bash aliases. If you don't want the expansion to temporarily happen even at the beginning of a command, you have two options:\n- After entering the command and before typing the next command press <C-V> (e.g., <C-V><Space>)\n- Start the command-line with a space and then enter the command.\n\nThe CmdAlias() function takes a 3rd optional argument called \"flags\" for which you can pass options such as \"<buffer>\" to make the alias local to the current buffer.\n\nHere is the description from file header for more details:\nUsage:\n    :call CmdAlias('<lhs>', '<rhs>', [flags])\n    or\n    :Alias <lhs> <rhs> [flags]\n                                                                             \n    :UnAlias <lhs> ...\n    :Aliases [<lhs> ...]\n                                                                             \nEx:\n    :Alias runtime Runtime\n    :Alias find Find\n    :Aliases\n    :UnAlias find\n                                                                             \nDescription:\n  - Vim doesn't allow us to create user-defined commands unless they start\n    with an uppercase letter. I find this annoying and constrained when it\n    comes to overriding built-in commands with my own. To override built-in\n    commands, we often have to create a new command that has the same name\n    as the built-in but starting with an uppercase letter (e.g., \"Cd\"\n    instead of \"cd\"), and remember to use that everytime (besides the\n    fact that typing uppercase letters take more effort). An alternative is\n    to use the :cabbr to create an abbreviation for the built-in command\n    (:cmap is not good) to the user-defined command (e.g., \"cabbr cd Cd\").\n    But this would generally cause more inconvenience because the\n    abbreviation gets expanded no matter where in the command-line you use\n    it. This is where the plugin comes to your rescue by arranging the cabbr\n    to expand only if typed as the first word in the command-line, in a\n    sense working like the aliases in csh or bash.\n  - The plugin provides a function to define command-line abbreviations such\n    a way that they are expanded only if they are typed as the first word of\n    a command (at \":\" prompt). The same rules that apply to creating a\n    :cabbr apply to the second argument of CmdAlias() function too. You can\n    pass in optional flags (such as <buffer>) to the :cabbr command through\n    the third argument.\n  - The :cabbr's created this way, work like the bash aliases, except that\n    in this case, the alias is substituted in-place followed by the rules\n    mentioned in the |abbreviations|, and no arguments can be defined.\nDrawbacks:\n  - If the <rhs> is not of the same size as <lhs>, the in-place expansion\n    feels odd.\n  - Since the expansion is in-place, Vim command-line history saves the\n    <rhs>, not the <lhs>. This means, you can't retrieve a command from\n    history by partially typing the <lhs> (you have to instead type the\n    <rhs> for this purpose).\n\n\n\nSearch_key_words: cmdalias Hari Krishna Dara cmap alias cmdalias.vim",
  "install_details": "Source it from your vimrc or just drop it in your plugin directory.\n\nFor versions prior to 2.0:\nRequires curcmdmode.vim(1.0) (vimscript #745). ",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11356",
      "filename": "cmdalias.vim",
      "script_version": "3.0",
      "date": "2009-09-10",
      "vim_version": "7.0",
      "author": {
        "user_id": "292",
        "user_name": "haridsv",
        "first_name": "Hari Krishna",
        "last_name": "Dara",
        "email": "hari.vim@gmail.com",
        "homepage": ""
      },
      "release_notes": "Improvements due to renewed interest in the plugin.\n- Added Alias command that is easier to use than calling CmdAlias()\n  function.\n- Added UnAlias and Aliases commands to give a more authentic \"alias\"\n  like feel to the plugin.\n- Detect aliases after certain configurable commands. The default\n  commands are: verbose, debug, silent, redir.\n- Better usage error detection."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=5662",
      "filename": "cmdalias.vim",
      "script_version": "2.0",
      "date": "2006-05-08",
      "vim_version": "7.0",
      "author": {
        "user_id": "292",
        "user_name": "haridsv",
        "first_name": "Hari Krishna",
        "last_name": "Dara",
        "email": "hari.vim@gmail.com",
        "homepage": ""
      },
      "release_notes": "Release 2.0 for Vim 7.0. Essentially have rewritten the plugin for Vim\n7.0. Now the plugin is very simple safe and reliable and doesn't even\ndepend on any other plugins (thanks to the new getcmdtype() function).\nAlso added support for passing additional flags to the CmdAlias()\nfunction.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2267",
      "filename": "cmdalias.vim",
      "script_version": "1.0",
      "date": "2003-08-25",
      "vim_version": "6.0",
      "author": {
        "user_id": "292",
        "user_name": "haridsv",
        "first_name": "Hari Krishna",
        "last_name": "Dara",
        "email": "hari.vim@gmail.com",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
