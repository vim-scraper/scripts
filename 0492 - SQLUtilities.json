{
  "script_id": "492",
  "display_name": "SQLUtilities",
  "summary": "SQL utilities - Formatting, generate - columns lists, procedures for databases",
  "name": "SQLUtilities",
  "script_type": "utility",
  "description": "Various SQL Utilities.\n\nVersion 2.0 requires Vim 7.\n\n1. A SQL formatter, to make SQL statements (select, insert, update, delete...) more readable.   \n2. Based on create table statements, will generate select lists for a table, as long as the definition exists in some open buffer.\n3. Creates a generic procedure that will perform an insert, update, delete and select based on the definition of a table (if already open in some buffer).  The format is ANSI.\n4.  Returns the column datatype definition for a specified column name (or supplied) based on the definition of a table (if already open in some buffer).\n\nFunctions:\n[range]SQLUFormatter(..list..)\n                                                                            \n     Formats SQL statements into a easily readable form.\n     Breaks keywords onto new lines.\n     Forces column lists to be split over as many lines as\n     necessary to fit the current textwidth of the buffer,\n     so that lines do not wrap.\n     If parentheses are unbalanced (ie a subselect) it will\n     indent everything within the unbalanced paranthesis.\n     Works for SELECT, INSERT, UPDATE, DELETE statements.\n\n     Global variables to customization some aspects of the formatting:\n     sqlutil_align_where - aligns the =, >=, <=, ...\n     sqlutil_align_comma - places the column lists in select statement on new lines\n     sqlutil_align_first_word - see examples\n\n     You can change the case of the keywords while formatting.\n\n                                                                            \nExamples (these would look much better when using a fixed font):\n                                                                            \n  Original:\n  SELECT m.MSG_ID, m.PRIORITY_ID, CUST.CUST_NBR, CUST.CUST_NM, \n  CUST.CUST_LEGAL_NM, CUST.STORE_ADDR_1, CUST.STORE_ADDR_2, \n  CUST.CROSS_STREET, XMLELEMENT( 'Alerts', XMLELEMENT( 'Alert_alert_id', \n  alert_id ), XMLELEMENT( 'Alert_agent_id', agent_id ), XMLELEMENT( \n  'Alert_alert_type_id', alert_type_desc), XMLELEMENT( \n  'Alert_alert_date', alert_date), XMLELEMENT( \n  'Alert_url_reference', url_reference), XMLELEMENT( \n  'Alert_read_status', read_status )) CUST.STORE_CITY, \n  CUST.STORE_ST, CUST.POST_CODE, CUST.STORE_MGR_NM, FROM MESSAGES m JOIN \n  PRIORITY_CD P WHERE m.to_person_id = ?  AND p.NAME = 'PRI_EMERGENCY' AND \n  p.JOB = 'Plumber' AND m.status_id < ( SELECT s.STATUS_ID FROM \n  MSG_STATUS_CD s WHERE s.NAME = 'MSG_READ') ORDER BY m.msg_id desc\n  \n                                                                            \n  Formatted:\n  SELECT m.MSG_ID, m.PRIORITY_ID, CUST.CUST_NBR, CUST.CUST_NM,\n         CUST.CUST_LEGAL_NM, CUST.STORE_ADDR_1, CUST.STORE_ADDR_2,\n         CUST.CROSS_STREET,\n         XMLELEMENT(\n             'Alerts', XMLELEMENT( 'Alert_alert_id', alert_id ),\n             XMLELEMENT( 'Alert_agent_id', agent_id ),\n             XMLELEMENT( 'Alert_alert_type_id', alert_type_desc),\n             XMLELEMENT( 'Alert_alert_date', alert_date),\n             XMLELEMENT(\n                 'Alert_url_reference', url_reference\n              ), XMLELEMENT( 'Alert_read_status', read_status )\n         ) CUST.STORE_CITY, CUST.STORE_ST, CUST.POST_CODE, \n         CUST.STORE_MGR_NM\n    FROM MESSAGES m\n    JOIN PRIORITY_CD P\n   WHERE m.to_person_id = ?\n     AND p.NAME = 'PRI_EMERGENCY'\n     AND p.JOB = 'Plumber'\n     AND m.status_id < (\n          SELECT s.STATUS_ID\n            FROM MSG_STATUS_CD s\n           WHERE s.NAME = 'MSG_READ'\n         )\n   ORDER BY m.msg_id desc\n  \n  \n                                                                            \n  Original:\n  UPDATE \"SERVICE_REQUEST\" SET \"BUILDING_ID\" = ?, \"UNIT_ID\" = ?, \n  \"REASON_ID\" = ?, \"PERSON_ID\" = ?, \"PRIORITY_ID\" = ?, \"STATUS_ID\" = ?, \n  \"CREATED\" = ?, \"REQUESTED\" = ?, \"ARRIVED\" = ?  WHERE \"REQUEST_ID\" = ?\n                                                                            \n                                                                            \n  Formatted:\n  UPDATE \"SERVICE_REQUEST\"\n     SET \"BUILDING_ID\" = ?,\n         \"UNIT_ID\" = ?,\n         \"REASON_ID\" = ?,\n         \"PERSON_ID\" = ?,\n         \"PRIORITY_ID\" = ?,\n         \"STATUS_ID\" = ?,\n         \"CREATED\" = ?,\n         \"REQUESTED\" = ?,\n         \"ARRIVED\" = ?,\n   WHERE \"REQUEST_ID\"  = ?\n                                                                            \n                                                                            \n                                                                            \n  Original:\n  INSERT INTO \"MESSAGES\" ( \"MSG_ID\", \"TO_PERSON_ID\", \n  \"FROM_PERSON_ID\", \"REQUEST_ID\", \"CREATED\", \"PRIORITY_ID\", \n  \"MSG_TYPE_ID\", \"STATUS_ID\", \"READ_WHEN\", \"TIMEOUT\", \n  \"MSG_TXT\", \"RESEND_COUNT\" ) VALUES ( ?, ?, ?, \n  ?, ?, ?, ?, ?, ?, ?, ?, ? )\n                                                                            \n                                                                            \n  Formatted:\n  INSERT INTO \"MESSAGES\" ( \"MSG_ID\", \"TO_PERSON_ID\",\n         \"FROM_PERSON_ID\", \"REQUEST_ID\", \"CREATED\",\n         \"PRIORITY_ID\", \"MSG_TYPE_ID\", \"STATUS_ID\",\n         \"READ_WHEN\", \"TIMEOUT\", \"MSG_TXT\", \"RESEND_COUNT\" )\n  VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )\n                                                                            \n                                                                            \nFunctions:\nSQLUCreateColumnList( optional parameter )\n                                                                            \n     Assumes either the current file, or any other open buffer, \n     has a CREATE TABLE statement in a format similar to this:\n     CREATE TABLE customer (\n     \tid\tINT DEFAULT AUTOINCREMENT,\n     \tlast_modified TIMESTAMP NULL,\n     \tfirst_name     \tVARCHAR(30) NOT NULL,\n     \tlast_name\tVARCHAR(60) NOT NULL,\n     \tbalance\t        NUMERIC(10,2),\n     \tPRIMARY KEY( id )\n     );\n     If you place the cursor on the word customer, then the \n     unnamed buffer (also displayed by an echo statement) will \n     contain:\n     id, last_modified, first_name, last_name, balance\n                                                                            \n     Optionally, it will replace the word with the above and place\n     the word in the unnamed buffer.  Calling the function with\n     a parameter enables this feature.\n                                                                            \n     This also uses the g:sqlutil_cmd_terminator to determine when\n     the create table statement ends if none of the following terms\n     are found before the final );\n            primary,reference,unique,check,foreign\n     sqlutil_cmd defaults to \";\"\n                                                                            \n                                                                            \nFunctions:\nSQLUGetColumnDef( optional parameter )\nSQLUGetColumnDataType( expand(\"<cword>\"), 1 )\n                                                                            \n     Assumes either the current file, or any other open buffer, \n     has a CREATE TABLE statement in a format similar to this:\n     CREATE TABLE customer (\n     \tid\tINT DEFAULT AUTOINCREMENT,\n     \tlast_modified TIMESTAMP NULL,\n     \tfirst_name     \tVARCHAR(30) NOT NULL,\n     \tlast_name\tVARCHAR(60) NOT NULL,\n     \tbalance\t        NUMERIC(10,2),\n     \tPRIMARY KEY( id )\n     );\n     If you place the cursor on the word first_name, then the \n     column definition will be placed in the unnamed buffer (and also\n     displayed by an echo statement).\n     VARCHAR(30) NOT NULL        \n                                                                            \n     If the command is called as SQLUGetColumnDef( expand(\"<cword>\"), 1 )\n     or using the default mapping \\scdt, just the datatype (instead\n     of the column definition) will be returned.  A separate command \n     SQLUGetColumnDataType has been created for this.\n     VARCHAR(30) \n                                                                            \n                                                                            \nFunctions:\nSQLUCreateProcedure()\n                                                                            \n     Assumes either the current file, or any other open buffer, \n     has a CREATE TABLE statement in a format similar to this:\n     CREATE TABLE customer (\n     \tid\t        INT DEFAULT AUTOINCREMENT,\n     \tlast_modified   TIMESTAMP NULL,\n     \tfirst_name     \tVARCHAR(30) NOT NULL,\n     \tlast_name\tVARCHAR(60) NOT NULL,\n     \tbalance\t        NUMERIC(10,2),\n     \tPRIMARY KEY( id )\n     );\n     By calling SQLUCreateProcedure while on the name of a table\n     the unnamed buffer will contain the create procedure statement\n     for insert, update, delete and select statements.\n     Once pasted into the buffer, unneeded functionality can be \n     removed.\n                                                                            \n                                                                            \n                                                                            \nCommands:\n[range]SQLUFormatter ..list..    \n                     : Reformats the SQL statements over the specified \n                       range.  Statement will lined up given the \n                       existing indent of the first word.\nSQLUCreateColumnList:  Creates a comma separated list of column names\n                       for the table name under the cursor, assuming\n                       the table definition exists in any open \n                       buffer.  The column list is placed in the unnamed\n                       buffer.\n                       This also uses the g:sqlutil_cmd_terminator.\n                       By default a table alias will be added to each of the columns, this is \n                       configurable, see documentation (new 1.3.7).\n                       This routine can optionally take 2 parameters\n                       SQLUCreateColumnList T1 \n                           Creates a column list for T1\n                       SQLUCreateColumnList T1 1\n                           Creates a column list for T1 but only for\n                           the primary keys for that table.\nSQLUGetColumnDef     : Displays the column definition of the column name\n                       under the cursor.  It assumes the CREATE TABLE\n                       statement is in an open buffer.\nSQLUGetColumnDataType\n                     : Displays the column datatype of the column name\n                       under the cursor.  It assumes the CREATE TABLE\n                       statement is in an open buffer.\nSQLUCreateProcedure  : Creates a stored procedure to perform standard\n                       operations against the table that the cursor\n                       is currently under.\n                       \n                                                                            \n\nSuggested Mappings:\n    vmap <silent>sf        <Plug>SQLU_Formatter<CR>\n    nmap <silent>scl       <Plug>SQLU_CreateColumnList<CR>\n    nmap <silent>scd       <Plug>SQLU_GetColumnDef<CR>\n    nmap <silent>scdt      <Plug>SQLU_GetColumnDataType<CR>\n    nmap <silent>scp       <Plug>SQLU_CreateProcedure<CR>\n                                                                            \n    mnemonic explanation\n    s - sql\n      f   - format\n      cl  - column list\n      cd  - column definition\n      cdt - column datatype\n      cp  - create procedure\n                                                                            \n    To prevent the default mappings from being created, place the \n    following in your _vimrc:\n        let g:sqlutil_load_default_maps = 0\n                                                                            \nCustomization:\n    By default this script assumes a command is terminated by a ;\n    If you are using Microsoft SQL Server a command terminator \n    would be \"go\", or perhaps \"\\ngo\".\n    To permenantly override the terminator in your _vimrc file you can add\n          let g:sqlutil_cmd_terminator = \"\\ngo\"\n                                                                            \n                                                                            \n    When building a column list from a script file (ie CREATE TABLE \n    statements), you can customize the script to detect when the \n    column list finishes by creating the following in your _vimrc:\n          let g:sqlutil_col_list_terminators = \n                       \\ 'primary,reference,unique,check,foreign'\n                                                                            \n    This can be necessary in the following example:\n          CREATE TABLE customer (\n             id         INT DEFAULT AUTOINCREMENT,\n             first_name VARCHAR(30) NOT NULL,\n             last_name  VARCHAR(60) NOT NULL,\n             PRIMARY KEY( id )\n          ); \n\nDependencies:\n       Align.vim - Version 15\n                        - Author: Charles E. Campbell, Jr.\n                        - http://www.vim.org/script.php?script_id=294\n\nSuggested (Complementary) Plugins:\n     dbext.vim - Author: Peter Bagyinszki and David Fishburn\n                - http://www.vim.org/script.php?script_id=356\n",
  "rating_total": "200",
  "rating_votes": "71",
  "downloads": "6108",
  "install_details": "Put <SQLUtilities.vim> into your .vim/plugin or vimfiles/plugin directory.\nPut <SQLUtilities.vim> into your .vim/autoload or vimfiles/autoload directory.\nPut <SQLUtilities.txt> into your .vim/doc or vimfiles/doc directory, run :helptags $VIM/vimfiles/doc.\n\n",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=13576",
      "filename": "sqlutil_400.zip",
      "script_version": "4.00",
      "date": "2010-08-15",
      "vim_version": "7.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "NF: Added a tutorial to take users through the common features of the plugin.\n\nNF: Added an option, g:sqlutil_align_keyword_right, to left or right (default) align the keywords (Per Winkvist).\n\nNF: Documented and added new global variables (g:sqlutil_menu_root, g:sqlutil_menu_priority) to customize the location of the SQLUtil menu.\n\nBF: SQLite used slightly different syntax specifying UNIQUE values and would not correctly generate a column list from the CREATE TABLE statement (Oliver Peters).\n\nBF: Ensured all normal commands used ! to ensure no mappings interfered with the commands (Benoit Mortgat).\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=9825",
      "filename": "sqlutil_300.zip",
      "script_version": "3.00",
      "date": "2009-01-15",
      "vim_version": "7.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "NF: Added new menu links so that commonly used options can be quickly and easily toggled without having to remember the global variable names or values.  For example, if you cut the menu so that it floats beside your buffer you can easily hit \"Toggle Align Where\" or \"Uppercase Keywords\".  \nNF: Using the menu_mode option you can control if and where the SQLUtil menu is created.  See the menu_mode option for more details.\nNF: Added the default maps to the menus.  If you use a floating menu, or simply view the menu you can more easily memorize your most commonly used maps.\nBF: UPPER and lower case of keywords did not work for multi-word keywords (ORDER BY, LEFT OUTER JOIN, ...).\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7638",
      "filename": "sqlutil_200.zip",
      "script_version": "2.0.0",
      "date": "2007-09-09",
      "vim_version": "7.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "NF: Added support for Vim 7's autoload functionality"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=4655",
      "filename": "sqlutil_141.zip",
      "script_version": "1.4.1",
      "date": "2005-10-07",
      "vim_version": "6.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "NF: Added additional statements to g:sqlutil_col_list_terminators\nBF: Forgot to increment g:loaded_sqlutilities\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=4021",
      "filename": "sqlutil_140.zip",
      "script_version": "1.4.0",
      "date": "2005-03-14",
      "vim_version": "6.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "BF: If a statement has parenthesis inside of strings, the formatter was not ignoring them.  This could result in the formatter reporting there were mismatched parenthesis.\n    Example: select 'string' + '(' from dummy\nBF: If a keyword was not followed by a space, it was not placed on a newline.  \n    Example:  SELECT * FROM(T1)\nBF: Nested function calls could potentially lead to an endless loop.  \n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3847",
      "filename": "sqlutil_139.zip",
      "script_version": "1.3.9",
      "date": "2005-02-10",
      "vim_version": "6.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "BF:  When g:sqlutil_align_comma=1 and a select list spanned more than 1 line (via functions calls and so on), it was possible the remaining comma separated list was not aligned properly."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3678",
      "filename": "sqlutil_138.zip",
      "script_version": "1.3.8",
      "date": "2004-12-03",
      "vim_version": "6.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "NF: Enhanced the feature to change the case of keywords, to include the optional join words, left, right, full, inner, outer.  These words were missed prior to this change and only the JOIN word was capitalized.\nCH: Changed the default for sqlutil_use_tbl_alias = 'a' (ask) from being on at all times.  This can be overridden in your vimrc.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3257",
      "filename": "sqlutil_137.zip",
      "script_version": "1.3.7",
      "date": "2004-07-21",
      "vim_version": "6.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "NF: Added new option g:sqlutil_use_tbl_alias, which is on by default.\n    When creating a column list for a table, it will add a table\n    alias to each column.  The table alias is calculated based on \n    rules.  This feature has 3 settings:\n       n - no alias\n       d - default calculated alias\n       a - ask the user using default alias\nNF: Updated g:sqlutil_col_list_terminators to handle some additional\n    cases.\nBF: In some cases -@- could be left in the query.  This seems to be\n    a bug in Vim, where the marks could move.  Unsure why, but put\n    a workaround in.\nBF: When g:sqlutil_align_comma=1, and the lines did not begin with\n    commas, the formatting was incorrect.\nBF: When searching through buffers (SQLU_CreateColumnList), the \n    alternate buffer could be changed.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3167",
      "filename": "sqlutil_136.zip",
      "script_version": "1.3.6",
      "date": "2004-06-21",
      "vim_version": "6.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "NF: Added support for window functions (OVER, PARTITION BY, ROWS,     RANGE), and additional Oracle SELECT keywords (DIMENSION,     MEASURES, ITERATE, WITHIN GROUP, IGNORE, KEEP, RETURN, RULES)\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2812",
      "filename": "sqlutil_135.zip",
      "script_version": "1.3.5",
      "date": "2004-03-07",
      "vim_version": "6.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "New features added:\nNew global variables to customization some aspects of the formatting:\nsqlutil_align_where - aligns the =, >=, <=, ...\nsqlutil_align_comma - places the column lists in select statement on new lines\nsqlutil_align_first_word - see examples\n\nYou can change the case of the keywords while formatting.\n\nA help has been created to list all the various options and examples for each of them.\n\nThanks to Ronald Speelman, for suggestions and testing."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2306",
      "filename": "SQLUtilities.vim",
      "script_version": "1.3.3",
      "date": "2003-09-06",
      "vim_version": "6.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "NF: Added global variable sqlutil_col_list_terminators for  customization.\nNF: Changed all functions to be prefixed bySQLU_ for consistency.\nBF: Fixed SQLU_GetColumnDataType andSQLU_GetColumnDef to handle tabs.\nBF: -@- could be left after incorrect formatting.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2047",
      "filename": "SQLUtilities.vim",
      "script_version": "1.3",
      "date": "2003-06-06",
      "vim_version": "6.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "NF: Support the formatting of FUNCTIONS or\n    stored procedures used as derived tables.  This \n    will nest the function calls on new lines and \n    correctly split the paranthesis on new lines if \n    the function call is longer than one line.  You \n    would notice this mainly in the SELECT \n    column list.\nNF: Support the formatting of nested CASE\n    statements.\nNF: Added the GetColumnDataType command \nNF: Improved primary key determination, it no \n    longer requires the PRIMARY KEY statement to\n    be part of the CREATE TABLE statement, it can \n    be part of an ALTER TABLE statement.\nNF: Improved formatting of SQL keywords.  \n    INSERT INTO statement, the INTO will no longer\n    be split onto a new line.\n    Now correctly format the various JOIN keywords:\n    NATURAL RIGHT OUTER JOIN will be placed one\n    online instead of just the JOIN keyword as\n    before.\nBF: Did not properly handle the formatting of\n    nested open paranthesis in all cases.\nBF: Using new technique to determine how to change\n    the textwidth to utilitize more screen space\n    when wrapping long lines.\n    nested open paranthesis in all cases.\nNF: Create procedure uses shiftwidth for indent.\nBF: Save/restore previous search.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=1694",
      "filename": "SQLUtilities.vim",
      "script_version": "1.1",
      "date": "2003-02-04",
      "vim_version": "6.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "Improved a number of items.\n\n1.  If a PRIMARY KEY cannot be found for a given table the WHERE clause will contain all columns.\n\n2.  Made the lookup for primary keys smarter.  Now the script will also look for ALTER TABLE ... ADD PRIMARY KEY statements instead of just the PRIMARY KEY clause as part of the CREATE TABLE statement.\n\n3.  If hidden is set, the script will cycle through the buffers looking for the table.  Now, it will leave the cursor positioned in the same location when it leaves hidden buffers.\n\n4.  You can now define g:sqlutil_cmd_terminator.  It currently defaults to \";\".  This is used when looking gathering columns lists.  \n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=1457",
      "filename": "SQLUtilities.vim",
      "script_version": "1",
      "date": "2002-11-23",
      "vim_version": "6.0",
      "author": {
        "user_id": "837",
        "user_name": "fishburn",
        "first_name": "David",
        "last_name": "Fishburn",
        "email": "dfishburn dot vim at gmail dot com",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
