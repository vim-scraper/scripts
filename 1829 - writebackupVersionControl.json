{
  "script_id": "1829",
  "display_name": "writebackupVersionControl",
  "summary": "Version control functions (diff, restore, history) for writebackup backups.",
  "name": "writebackupVersionControl",
  "script_type": "utility",
  "description": "Version control functions (diff, restore, history navigation) for backups made\nwith the writebackup plugin, which have a date file extension in the format\n'.YYYYMMDD[a-z]'. \n\nDESCRIPTION\nThis script enhances the primitive file backup mechanism provided by\nwritebackup.vim with some functions of real revision control systems like\nCVS, RCS or Subversion - without additional software. \nVia Vim commands, you can list and go to all backup versions that exist for\nthe current file, check whether you have a current backup, backup the saved\nversion of the buffer even after you've made unsaved changes in the buffer\n(which is useful for after-the-fact backups). \nWithin Vim, you can create a diff with the previous version, restore the\ncurrent file from its predecessor or any other backed-up version. \n\nUSAGE\n:WriteBackupListVersions\n\t\t\tList all backup versions that exist for the current\n\t\t\tfile. If the file isn't the original, it is marked in\n\t\t\tthe version list. If the file is the original, the\n\t\t\ttime that has passed since the last backup is printed,\n\t\t\ttoo. \n\n:[count]WriteBackupGoPrev[!]\n:[count]WriteBackupGoNext[!]\n\t\t\tOpen a backup file version relative to the current\n\t\t\tbackup or original file (with 'readonly' set to\n\t\t\tprevent accidental edits) . You can skip multiple\n\t\t\tbackups via the optional [count]; if the resulting\n\t\t\tindex is out of bounds, the first / last available\n\t\t\tbackup version is edited.\n\t\t\tThus, :999WriteBackupGoPrev edits the very first\n\t\t\texisting backup, and :999WriteBackupGoNext edits the\n\t\t\tlatest (i.e. most recent) backup.\n\t\t\tWith [!], any changes to the current version are\n\t\t\tdiscarded. \n\n:WriteBackupGoOriginal[!]\n\t\t\tEdit the original of the current backup file. If\n\t\t\tbackups are stored in a different directory, it may\n\t\t\tnot be possible to determine the original file. With\n\t\t\t[!], any changes to the current version are discarded. \n\n:WriteBackupIsBackedUp\n\t\t\tCheck whether the latest backup is identical to the\n\t\t\t(saved version of the) current file (which must be the\n\t\t\toriginal file). \n\n:[count]WriteBackupDiffWithPred\n\t\t\tPerform a diff of the current file (which may be the\n\t\t\toriginal file or any backup) with the [count]'th\n\t\t\tprevious version. If the resulting index is out of\n\t\t\tbounds, the first available backup version is used.\n\t\t\tThe diff is done inside Vim, with a new diffsplit\n\t\t\tbeing opened. \n\n:[count]WriteBackupViewDiffWithPred [{diff-arguments}]\n\t\t\tShow the differences of the current file (which may be\n\t\t\tthe original file or any backup) with the [count]'th\n\t\t\tprevious version. If the resulting index is out of\n\t\t\tbounds, the first available backup version is used.\n\t\t\tThe diff output is opened in a split scratch buffer. \n\t\t\tAny {diff-arguments} are passed as-is to the diff\n\t\t\texecutable. The \"icase\" and \"iwhite\" settings of\n\t\t\t'diffopt' are used, too. \n\t  + [count]du\n\t\t\tBy repeating the command, an existing scratch buffer\n\t\t\tis updated; no new split is created. One can also\n\t\t\tupdate the differences by repeating\n\t\t\t:WriteBackupViewDiffWithPred in the diff scratch\n\t\t\tbuffer itself, or through the buffer-local [count]du\n\t\t\tmapping. \n\n:[count]WriteBackupRestoreFromPred[!]\n\t\t\tOverwrite the current file (which must be the\n\t\t\toriginal) with the [count]'th previous backup. With\n\t\t\t[!] skips confirmation dialog and allows to restore\n\t\t\tover readonly original file. \n\n:WriteBackupRestoreThisBackup[!]\n\t\t\tRestore the current file as the original file, which\n\t\t\twill be overwritten. With [!] skips confirmation\n\t\t\tdialog and allows to restore over readonly original\n\t\t\tfile. \n\n:WriteBackupOfSavedOriginal[!]\n\t\t\tInstead of backing up the current buffer, back up the\n\t\t\tsaved version of the buffer. This comes handy when you\n\t\t\trealize you need a backup only after you've made\n\t\t\tchanges to the buffer. \n\t\t\tWith [!], creation of a new backup file is forced: \n\t\t\t- even if the last backup is identical\n\t\t\t- even when no more backup versions (for this day) are\n\t\t\t  available (the last '.YYYYMMDDz' backup gets\n\t\t\t  overwritten, even if it is readonly)\n\n:WriteBackupDeleteLastBackup[!]\n\t\t\tDelete the last backup. With [!] skips confirmation\n\t\t\tdialog and allows to delete readonly backup file. ",
  "rating_total": "21",
  "rating_votes": "6",
  "downloads": "1381",
  "install_details": "INSTALLATION\nThis script is packaged as a vimball. If you have the \"gunzip\" decompressor\nin your PATH, simply edit the *.vba.gz package in Vim; otherwise, decompress\nthe archive first, e.g. using WinZip. Inside Vim, install by sourcing the\nvimball or via the :UseVimball command. \n    vim writebackupVersionControl.vba.gz\n    :so %\nTo uninstall, use the :RmVimball command. \n\nDEPENDENCIES\n- Requires Vim 7.0 or higher. \n- Requires the writebackup plugin (vimscript #1828). \n- External command \"cmp\" or \"diff\" (or equivalent) for comparison. \n- External command \"diff\" or equivalent for listing of differences. \n- External commands \"cp\" (Unix) / \"copy\" and \"xcopy\" (Windows) for restore\n  and backup original file functionality. \n\nCONFIGURATION\nFor a permanent configuration, put the following commands into your vimrc file\n(see :help vimrc). Note: With version 1.40, the variable was renamed from\ng:writebackup_DiffVertSplit. Please update your configuration! \n\nTo change the default diffsplit from vertical to horizontal, use: \n    let g:WriteBackup_DiffVertSplit = 0\n\nThe :WriteBackupIsBackedUp command uses an external compare command (either\n\"cmp -s\" or \"diff -q\") to determine whether the backup is identical with the\noriginal file. You can overwrite the auto-detected default via: \n    let g:WriteBackup_CompareShellCommand = '/path/to/mycomparecmd --myoption'\nThe command must take two filespec arguments, return 0 for identical files, 1\nfor different files and anything else for trouble. \n\nThe :WriteBackupViewDiffWithPred command invokes an external diff command to\nlist the differences between two files. Overwrite if \"diff\" cannot be found\nthrough $PATH: \n    let g:WriteBackup_DiffShellCommand = '/path/to/mydiff'\n\nCommand-line arguments for the external diff command can be specified\nseparately. Configure any arguments that should always be passed here: \n    let g:WriteBackup_DiffCreateAlwaysArguments = '-t -F \"^[_a-zA-Z0-9]+ *(\"'\n\nIf no {diff-arguments} are passed to the :WriteBackupViewDiffWithPred\ncommand, the default diff output format is set to the unified format. You can\nfor example change this to a context diff by setting: \n    let g:WriteBackup_DiffCreateDefaultArguments = '-c'\n\nThe :WriteBackupViewDiffWithPred command opens the diff scratch buffer via\nthe :new command. You can add window command modifiers like :vertical or\n:topleft to change the positioning of the window: \n    let g:WriteBackup_ScratchBufferCommandModifiers = 'topleft'",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=12368",
      "filename": "writebackupVersionControl.vba.gz",
      "script_version": "2.24",
      "date": "2010-02-12",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "- ENH: Define a local 'du' mapping to quickly update the diff (of the same version and with the same options as this time), unless [count] is given, which sets a different version). \n- :WriteBackupViewDiffWithPred not just checks for empty scratch buffer, but also considers the diff command exit code. \n- BUG: :WriteBackupViewDiffWithPred can cause E121: Undefined variable: l:predecessor. Similar issue with a:filespec showing scratch buffer name in place of the original file name. Now using l:oldFile and l:newFile instead. \n- BUG: WriteBackupViewDiffWithPred didn't always go back to the original window when no differences, but fell back to the next one."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11598",
      "filename": "writebackupVersionControl.vba.gz",
      "script_version": "2.23",
      "date": "2009-10-26",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "ENH: :WriteBackupRestoreFromPred now takes an optional [count] to restore an earlier predecessor. "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11216",
      "filename": "writebackupVersionControl.vba.gz",
      "script_version": "2.22",
      "date": "2009-08-19",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "BF: escapings#shellescape() caused E118 on Vim 7.1. Enhanced wrapper function. "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11039",
      "filename": "writebackupVersionControl.vba.gz",
      "script_version": "2.21",
      "date": "2009-07-19",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "- Replaced simple filespec quoting with built-in shellescape() function (or emulation for Vim 7.0 / 7.1) via escapings.vim wrapper. \n- Keeping cursor position when only refreshing the diff scratch buffer. \n- Window position of the diff scratch buffer can now be configured. \n- ENH: Now issuing a warning that there are no differences and closing the useless diff scratch buffer if it is empty. \n- BF: Forgot {special} in shellescape() call for writebackupVersionControl#ViewDiffWithPred(); the scratch buffer uses the ! command. "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=10985",
      "filename": "writebackupVersionControl.vba.gz",
      "script_version": "2.20",
      "date": "2009-07-10",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "ENH: Added :WriteBackupViewDiffWithPred command to show the diff output in a scratch buffer. With this, one can get a quick overview of what has changed since the last backup without performing a diffsplit within Vim. "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=10914",
      "filename": "writebackupVersionControl.vba.gz",
      "script_version": "2.11",
      "date": "2009-06-30",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "ENH: :WriteBackupDiffWithPred now takes an optional [count] to diff with an\nearlier predecessor. "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=10695",
      "filename": "writebackupVersionControl.vba.gz",
      "script_version": "2.10",
      "date": "2009-05-28",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "Replaced simple filespec escaping with built-in fnameescape() function (or\nemulation for Vim 7.0 / 7.1) via escapings.vim wrapper."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=10577",
      "filename": "writebackupVersionControl.vba.gz",
      "script_version": "2.01",
      "date": "2009-05-11",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "Backup versions are now opened read-only (through :WriteBackupGoPrev/Next and\n:WriteBackupDiffWithPred commands) to prevent the user from accidentally\nediting the backup instead of the original. "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=10046",
      "filename": "writebackupVersionControl.vba.gz",
      "script_version": "2.00",
      "date": "2009-02-26",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "- Using separate autoload script to help speed up VIM startup. This is an\n  incompatible change that also requires the corresponding writebackup plugin\n  version. *** PLEASE UPDATE writebackup (vimscript #1828), too ***\n- BF: :WriteBackupListVersions now handles (and reports) backup files with a\n  future date.\n- ENH: Allowing to configure compare shell command via\n  g:WriteBackup_CompareShellCommand. \n- ENH: Added :WriteBackupDeleteLastBackup command. \n- ENH: Added [!] to the following commands to disable confirmation dialog and\n  override readonly target files: :WriteBackupRestoreFromPred, \n  :WriteBackupRestoreThisBackup, :WriteBackupOfSavedOriginal, \n  :WriteBackupDeleteLastBackup"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=9982",
      "filename": "writebackupVersionControl.vba.gz",
      "script_version": "1.41.021",
      "date": "2009-02-16",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "Split off documentation into separate help file. Now packaging as VimBall. "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=9971",
      "filename": "writebackupVersionControl.vim",
      "script_version": "1.40.020",
      "date": "2009-02-14",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "Renamed configuration variable from g:writebackup_DiffVertSplit to g:WriteBackup_DiffVertSplit. *** PLEASE UPDATE YOUR CONFIGURATION *** \nENH: Added :WriteBackupGoPrev, :WriteBackupGoNext and :WriteBackupGoOriginal commands. \nENH: :WriteBackupListVersions now includes backup dirspec if backups aren't done in the original file's directory. \nBF: :WriteBackupDiffWithPred failed to open the predecessor with the ':set autochdir' setting if the CWD has been (temporarily) changed. Now using absolute path for the :split command. \n:WriteBackupDiffWithPred doesn't jump to the predecessor window; it now moves the cursor back to the originating window; this feels more natural. \n:WriteBackupDiffWithPred now avoids that a previous (open) fold status at the cursor position is remembered and obscures the actual differences. \nAdded Windows detection via has('win64'). "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8838",
      "filename": "writebackupVersionControl.vim",
      "script_version": "1.20.010",
      "date": "2008-06-23",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "Minor change: Added -bar to all commands that do not take any arguments, so that these can be chained together."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=8105",
      "filename": "writebackupVersionControl.vim",
      "script_version": "1.20.009",
      "date": "2007-12-31",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "Small Enhancement: :WriteBackupListVersions and :WriteBackupDiffWithPred claimed \"no backups exist\" if option 'wildignore' hides the backup files. Now temporarily resetting the option before glob().  "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7689",
      "filename": "writebackupVersionControl.vim",
      "script_version": "1.20.008",
      "date": "2007-09-18",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "ENH: Added support for writing backup files into a different directory (either one static backup dir or relative to the original file). Now requires writebackup.vim version 1.20 or later. \nCommand :WriteBackupOfSavedOriginal now checks that the file is an original one. \nBF: :WriteBackupIsBackedUp doesn't deal correctly with filenames that contain special ex characters [%#!]. "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=6884",
      "filename": "writebackupVersionControl.vim",
      "script_version": "1.00.006",
      "date": "2007-03-16",
      "vim_version": "7.0",
      "author": {
        "user_id": "9713",
        "user_name": "inkarkat",
        "first_name": "Ingo",
        "last_name": "Karkat",
        "email": "ingo at karkat.de",
        "homepage": "http://ingo-karkat.de/"
      },
      "release_notes": "Initial upload"
    }
  ]
}
