{
  "script_id": "850",
  "display_name": "Pydiction",
  "summary": "Tab-complete your Python code",
  "name": "Pydiction",
  "script_type": "utility",
  "description": "Pydiction allows you to Tab-complete Python code in Vim, including: standard, custom and third-party modules and packages. Plus keywords, built-ins, and string literals.\n\nIt consists of three main files:\n    \n        python_pydiction.vim -- The Vim plugin that creates the Tab-completion functionality for Python files.\n        complete-dict -- A Vim dictionary file that contains Python keywords and module structure. This is what the plugin looks at to know which things are completable.\n        pydiction.py -- (Optional) Python script used to generate the dictionary. You can optionally run this script to add more modules to complete.\n\n\nUsage\n=====\nType part of a Python keyword, module name, attribute or method in \"insert mode\" in Vim, then hit the Tab key and it will auto-complete.\n\nFor example, typing:\n\n        raw<Tab>\n\nwill bring up a menu of possibilities, such as:\n\n        raw_input(\n        raw_unicode_escape_decode(\n        raw_unicode_escape_encode(\n\nTyping:\n\n        os.p<Tab>\n\npops up:\n\n        os.pardir\n        os.path\n        os.pathconf(\n        os.pathconf_names\n        os.pathsep\n        os.pipe(\n        ...\n\nTyping:\n\n        co<Tab>\n\npops up:\n\n        continue\n        coerce(\n        compile(\n        ...\n\nTyping:\n\n        \"foo bar\".st<Tab>\n\npops up:\n\n        startswith(\n        strip(\n\nand so on.\n\nAs of Pydiction 1.2, there's support for completing modules that were imported via \"from module import submodule\". For example, you could do:\n\n        from xml.parsers import expat\n        expat.P<Tab>\n\nwhich expands to:\n\n        expat.ParserCreate(\n\nYou can also now Shift-Tab to Tab backwards through the popup menu.\n\nIf you feel you're getting different results in your completion menu, it's probably because you don't have Vim set to ignore case. You can remedy this with \":set noic\"\n        \n\nPydiction versus other forms of completion\n=================================\nPydiction can complete Python's keywords, built-in functions, and string literals, as well as standard, custom and third-party package and module names and their attributes and methods. It can also complete fully-qualified names such as \"module.submodule.method\", as well as non-fully qualified names such as simply \"method\".\n\nPydiction uses the Tab key to do completion, rather than inefficient Ctrl key combinations and the like.\n\nUnlike omni-completion, Pydiction works with more than just imported modules. For example you can complete Python built-in functions and keywords, such as \"print\", \"raw_input\", and so on.\n\nPydiction doesn't require Python support to be compiled into your version of Vim, nor do you need to have Python installed on the machine you use it from (unless you want to use pydiction.py)\n\nUsing a special dictionary file to complete from, Pydiction doesn't pollute any other menus that you you may be using for other types of completion, such as omni-completion or ins-completion.\n\nSince Pydiction uses a dictionary of possible completion items, it can complete 3rd-party modules much more accurately, and quickly, than other ways. And you have full control over what can and cannot complete. If it's unable to complete anything, you can either use pydiction.py--to automatically add a new module's contents to the dictionary-- or you can manually add them using a text editor. The dictionary is just a plain text file, which also makes it portable across all platforms.  For example, if you're a Django user, you can add all the django related modules to the dictionary by using pydiction.py.  The latest default complete-dict already contains most of the standard library, all Python 2.x keywords, Pygame, OpenGL, wxPython, Twisted, PyQT4, ZSI, LDAP, Numarray, PyGTK, MySQLdb, PyGreSQL, pyPgSQL, PythonCard, pyvorbis, Bcrypt, OpenID, GnuPGInterface, OpenSSl, Pygments and more.\n\nAlso because Pydiction uses a dictionary file, you don't have to import a module before you can complete it, nor do you even have to have the module installed on your machine. This makes completion faster than omni-completion since it doesn't need to do any type deducing.\n\nPydiction only attempts to complete while editing Python files.\n\nYou can still use omni-completion, and other forms of completion, with Pydiction. In fact, they can all make a great team.\n\nPydiction knows when you're completing a callable method or not and, if you are, it will automatically insert an opening parentheses.\n\nThe Tab key will work as normal for everything else. Pydiction will only try to use the Tab key to complete Python code if you're editing a Python file and you first type part of some Python module or keyword.\n\n\n\nScreenshots\n==========\nhttp://rkulla.com/images/screenshots/pydiction1.jpg\nhttp://rkulla.com/images/screenshots/pydiction2.jpg\n\n\npython_pydiction.vim (filetype plugin)\n============================\nPydiction will make it so the Tab key on your keyboard is able to complete python code.\n\nVersion 1.0 and greater of Pydiction uses a new file called python_pydiction.vim, which is an ftplugin that only activates when you're editing a python file (e.g., you're editing a file with a \".py\" extension or you've manually typed \":set filetype=python\").  Past versions of Pydiction didn't use a plugin and instead just required you to change the value of \"isk\" in your vimrc, which was not desirable. Version 1.0 and greater do not require you to manually change the value of isk. It now safely changes isk for you temporarily by only setting it while you're doing Tab-completion of Python code, and it automatically changes it back to its original value whenever Tab-completion isn't being activated.  Again, only Tab-completion causes Pydiction to activate; not even other forms of completion, such as <Ctrl-x> or <Ctrl-n> completion will activate Pydiction, so you're still free to use those other types of completion whenever you want to.\n\nPydiction works by using Vim's ins-completion functionality by temporarily remapping the Tab key to do the same thing as I_CTRL-X_CTRL_K (dictionary only completion). This means that whenever you're editing a Python file, and you start typing the name of a python keyword or module, you can press the Tab key to complete it. For example, if you type \"os.pa\" and then press Tab, Pydiction will pop up a completion menu in Vim that will look something like:\n\n        os.pardir\n        os.path\n        os.pathconf(\n        os.pathconf_names\n        os.path.\n        os.path.__all__\n        os.path.__builtins__\n        os.path.__doc__\n        ...\n\nPressing Tab again while the menu is open will scroll down the menu so you can choose whatever item you want to go with, using the popup-menu keys:\n\n        CTRL-Y        Accept the currently selected match and stop completion.\n        <Space>      Accept the currently selected match and insert a space.\n        CTRL-E       Close the menu and not accept any match.\n        ....\n\nhitting Enter will accept the currently selected match, stop completion, and insert a newline, which is usually not what you want. Use CTRL-Y or <Space>, instead. See \":help popupmenu-keys\" for more options.\n\nAs of Pydiction 1.2, you can press Shift-Tab to Tab backwards as well.\n\nPydiction temporarily sets completeopt to \"menu,menuone\", so that you can complete items that have one or more matches. It will set it back to whatever the original value you have completeopt set to when Tab-completion isn't being activated.\n\nBy default, Pydiction ignores case while doing Tab-completion. If you want it to do case-sensitive searches, then set noignorecase (:set noic).\n\n\npydiction.py\n=========\nNote: You can skip this section if you don't plan to add more modules to complete-dict yourself.  Check if complete-dict already has the modules you intend to use.\n\nThis is the Python script used to create the \"complete-dict\" Vim dictionary file. It works by analyzing a module's structure and modelling that structure as a static file. Bundled with Pydiction is a default complete-dict; created using Python on Linux, so there won't be any real win32 specific support in it. You're free to run pydiction.py to add or upgrade modules as you see fit. The dictionary will still work if you're using windows, but it won't complete win32 related modules unless you tell it to.      \n\nUsage: In a command prompt, run: \n\n        $ python pydiction.py <module> ... [-v]\n\n(You need to have python 2.x installed.)\n\nSay you wanted to add a module called \"mymodule\" to complete-dict, do the following:\n\n        $ python pydiction.py mymodule\n\nYou can input more than one module name on the command-line, just separate them by spaces:\n\n        $ python pydiction.py mymodule1 mymodule2 mymodule3\n\nThe -v option will just write the results to stdout (standard output) instead of the complete-dict file.\n\nIf the backfup file \"complete-dict.last\" doesn't exist in the current directory, pydiction.py will create it for you. You should always keep a backup of your last working dictionary in case anything goes wrong, as it can get tedious having to recreate the file from scratch.\n\nIf complete-dict.last already exists, pydiction.py will ask you if you want to overwrite your old backup with the new backup.\n\nIf you try to add a module that already exists in complete-dict, pydiction.py will tell you it already exists, so don't worry about adding duplicates. In fact, you can't add duplicates, every time you run pydiction.py it looks for, and removes, any duplicates in the file.\n\nWhen pydiction.py adds new modules to complete-dict, it does so in two phases. First, it adds the fully-qualified name of the module. For example:\n\n        module.attribute\n        module.method(\n\nthen it adds the non-fully qualified name:\n\n        attribute\n        method(\n\nthis allows you to complete your python code in the way that you imported it. E.g.:\n\n        import module\n\nor:\n\n        from module import method\n\nSay you want to complete \"pygame.display.set_mode\". If you imported Pygame using \"import pygame\", then you can Tab-complete using:\n\n        pygame.di<Tab>\n\nto expand to \"pygame.display.\". Then type:\n\n        se<Tab> \n\nto expand to \"pygame.display.set_mode(\"\n\nNow say you imported using \"from pygame import display\". To expand to \"display.set_mode(\" just type:\n\n        display.se<Tab>\n\nAnd if you imported using \"from pygame.display import set_mode\" just type:\n\n        se<Tab>\n\nKeep in mind that if you don't use fully-qualified module names then you might get a lot of possible menu options popping up, so you may want to use more than just two letters before you hit Tab, to try to narrow down the list.\n\nAs of Pydictoin 1.1, there is also support for string literal method completion. For example:\n\n        \"\".jo<Tab>\" \n\nwill expand to:\n\n        \"\".join(\n\nmake sure you type at least two letters of the method name if this doesn't seem to work.\n\nThis only works for quoted strings, ie: \n\n        'foo bar'.st<Tab>\n    \nto get \n\n        'foo bar'.startswith(\n\nto be able to do:\n\n        s = 'foo bar'\n        s.st<Tab>\n\nyou can use Vim 7's omni-completion:\n\n        s.st<Ctrl-x><Ctrl-o>\n\nwhich will also give you a preview window describing the methods as well as the argument list the methods take, e,g:\n\n        startswith(prefix[, start[, end]])\n        strip([chars])\n\nTo Tab-complete your own personal modules, you put your functions in a separate file to be reused, as you normally would. For example, say you put the following function in a file called \"myFoo.py\":\n\n        def myBar():\n            print \"hi\"\n\nyou would then need to add myFoo to complete-dict by doing:\n\n        ./pydiction.py myFoo\n\nnow you can complete myFoo.myBar() by doing:  \n\n        myFoo.my<Tab>\n\nAs of Pydiction 1.2, there's support for completing modules that were imported via \"from module import submodule\". For example, you could do:\n\n        from xml.parsers import expat\n        expat.P<Tab>\n\nwhich expands to:\n\n        expat.ParserCreate( \n\nKeep in mind that you don't have to restart Vim after you update complete-dict.\n\n\ncomplete-dict\n===========\nThis is the Vim dictionary file that python_pydiction.vim reads from and pydiction.py writes to. Without this file, Pydiction wouldn't know which Python keywords and modules it can Tab-complete.\n\ncomplete-dict is only an optional file in the sense that you can create your own complete-dict if you don't want to use the default one that is bundled with Pydiction.  The default complete-dict gives you a major head start, as far as what you can Tab-complete, because I did my best to put all of the Python keywords, standard library and even some popular third party modules in it for you. \n\nThe default complete-dict currently contains:\n\n        Python keywords:\n\n                and, del, for, is, raise, assert, elif, from, lambda, return, break, else, global, not, try, class, except, if, or, while, continue, exec, import, pass, yield, def, finally, in, print    \n\n        Most of the standard library and built-ins:  \n        \n                __builtin__, __future__, os, sys, time, re, sets, string, math, Tkinter, hashlib, urllib, pydoc, etc... \n\n        It also contains some popular third-party libraries: \n\n                Pygame, wxPython, Twisted, ZSI, LDAP, OpenGL, PyGTK, PyQT4, MySQLdb, PyGreSQL, pyPgSQL, SQLite, PythonCard, Numarray, pyvorbis, Bcrypt, OpenID, GnuPGInterface, OpenSSL and Pygments.\n\nMake sure you download the latest version of Pydiction to get the most up-to-date version of complete-dict. New modules are usually added to it every release.\n\nIf you open complete-dict in your text editor you'll see sections in it for each module, such as:\n \n        --- import os ---\n        os.EX_CANTCREAT\n        os.EX_CONFIG\n        os.EX_DATAERR\n        ...\n\n        --- from os import * ---\n        EX_CANTCREAT\n        EX_CONFIG\n        EX_DATAERR\n        ...\n\nIf certain attributes seem to be missing, it's probably because pydiction.py removed them because they were duplicates. This mainly happens with the non-fully qualified module sections. So first try searching the entire file for whatever string you assume is missing before you try adding it. For example, if you don't see:\n\n        __doc__\n\nunder:\n\n        --- import sys ---\n\nit's probably because a previous module, such as \"os\", already has it.\n    \nIf you try to recreate complete-dict from scratch, you'll need to manually add the Python keywords back to it, as those aren't generated with pydiction.py.\n\nIf you don't want certain things to Tab-complete, such as Python keywords or certain modules, simply delete them by hand from complete-dict.\n\nPydiction doesn't ignore \"private\" attributes or methods. I.e., those starting (but not ending) with one or two underscores, e.g., \"_foo\" or \"__foo\".  I have manually deleted things starting with a single underscore from the included complete-dict just to keep it a little more sane--since there were so many.  In sticking with the Python tradition of not forcing things to be private, I have left it up to the user to decide how they want to treat their own things.  If you want to delete them from your custom complete-dict's, you can use a regex to try to delete them, such as doing:\n\n        :g/\\._[a-zA-Z]/d\n        :g/^_[a-zA-Z]/d\n        :g/^\\%(_\\=[^_]\\)*\\zs__\\%(.\\{-}__\\)\\@!/d\n        etc...\n\n\nOptions\n======\nYou can optionally set the height of the completion menu by setting \"g:pydiction_menu_height\" in your vimrc. For example:\n    \n        let g:pydiction_menu_height = 20\n\nThe default menu height is 15.\n\n\nTips\n====\nSay you create a custom object, called \"S\" by doing something like:\n    \n        S = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nyou can complete dynamic object methods, such as \"S.send()\", by using Vim 7's omni-completion ftplugin (a.k.a \"pythoncomplete.vim\") by doing:\n\n        S.s<Ctrl-x><Ctrl-o>\n\nYou may get unexpected results if you use autocomplpop.vim, supertab.vim or other completion or python plugins. Try disabling them individually to find out the culprit and please don't hesitate to e-mail me any workarounds or suggestions. Thanks.\n\n\nFurther reading\n============\n:help ftplugin\n:help 'complete\n:help compl-dictionary\n:help popupmenu-completion\n:help popupmenu-keys\n:help iskeyword\n\n",
  "rating_total": "596",
  "rating_votes": "204",
  "downloads": "18223",
  "install_details": "UNIX/LINUX: Place python_pydiction.vim in:  ~/.vim/after/ftplugin/\n\nIf this directory doesn't already exist, create it. Vim looks there automatically.\n\nWINDOWS: Assuming you installed Vim to C:\\vim\\, put python_pydiction.vim in C:\\vim\\vimfiles\\ftplugin\n\nYou may install the other files (complete-dict and pydiction.py) anywhere you want. For this example, we'll assume you put them in C:\\vim\\vimfiles\\ftplugin\\pydiction\\ \n\nDon't put any files but python_pydiction.vim in the ftplugin directory, only .vim files should go there.\n\nIn your vimrc file, first add the following line to enable ftplugins:\n  \n        filetype plugin on\n\nthen make sure you set \"g:pydiction_location\" to the full path of where you installed complete-dict, i.e.:\n    \n        let g:pydiction_location = 'C:/vim/vimfiles/ftplugin/pydiction/complete-dict'\n\nNote: If you were using a version of Pydiction less than 1.0, make sure you delete the old way of doing things from your vimrc. You shouldn't have this in your vimrc anymore:\n\n        if has(\"autocmd\")\n                autocmd FileType python set complete+=k/path/to/pydiction iskeyword+=.,(\n        endif \" has(\"autocmd\")\n",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11062",
      "filename": "pydiction-1.2.zip",
      "script_version": "1.2",
      "date": "2009-07-25",
      "vim_version": "7.0",
      "author": {
        "user_id": "3923",
        "user_name": "gt3",
        "first_name": "ryan",
        "last_name": "kulla",
        "email": "rkulla at gmail.com",
        "homepage": "http://www.rkulla.com"
      },
      "release_notes": "Added \"from module\" completion, Tab backwards support, and more third party libs. "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11040",
      "filename": "pydiction-1.1.zip",
      "script_version": "1.1",
      "date": "2009-07-20",
      "vim_version": "7.0",
      "author": {
        "user_id": "3923",
        "user_name": "gt3",
        "first_name": "ryan",
        "last_name": "kulla",
        "email": "rkulla at gmail.com",
        "homepage": "http://www.rkulla.com"
      },
      "release_notes": "Added quoted string method completion, ZSI Web Services module completion and fixed a bug with the -v option."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=11028",
      "filename": "pydiction-1.0.zip",
      "script_version": "1.0",
      "date": "2009-07-18",
      "vim_version": "7.0",
      "author": {
        "user_id": "3923",
        "user_name": "gt3",
        "first_name": "ryan",
        "last_name": "kulla",
        "email": "rkulla at gmail.com",
        "homepage": "http://www.rkulla.com"
      },
      "release_notes": "I Rewrote everything. It's now an ftplugin and uses the Tab key for completion. The dictionary generator works much better and you have more options. "
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2668",
      "filename": "pydiction-0.5.tar.gz",
      "script_version": "0.5",
      "date": "2004-01-19",
      "vim_version": "6.0",
      "author": {
        "user_id": "3923",
        "user_name": "gt3",
        "first_name": "ryan",
        "last_name": "kulla",
        "email": "rkulla at gmail.com",
        "homepage": "http://www.rkulla.com"
      },
      "release_notes": "Added support for ldap, cleaned up some code and included a gnu license."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2605",
      "filename": "pydiction-0.4.tar.gz",
      "script_version": "0.4",
      "date": "2003-12-16",
      "vim_version": "6.0",
      "author": {
        "user_id": "3923",
        "user_name": "gt3",
        "first_name": "ryan",
        "last_name": "kulla",
        "email": "rkulla at gmail.com",
        "homepage": "http://www.rkulla.com"
      },
      "release_notes": "support for Numeric and numarray"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2600",
      "filename": "pydiction-0.3.tar.gz",
      "script_version": "0.3",
      "date": "2003-12-15",
      "vim_version": "6.0",
      "author": {
        "user_id": "3923",
        "user_name": "gt3",
        "first_name": "ryan",
        "last_name": "kulla",
        "email": "rkulla at gmail.com",
        "homepage": "http://www.rkulla.com"
      },
      "release_notes": "This version allows you to supply multiple module names to pydiction.py and it will auto-append them to the pydiction file. The included pydiction file now contains support for wxPython and Twisted."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2559",
      "filename": "pydiction-0.2.tar.gz",
      "script_version": "0.2",
      "date": "2003-12-06",
      "vim_version": "6.0",
      "author": {
        "user_id": "3923",
        "user_name": "gt3",
        "first_name": "ryan",
        "last_name": "kulla",
        "email": "rkulla at gmail.com",
        "homepage": "http://www.rkulla.com"
      },
      "release_notes": "Added support for Pygame to pydiction. And im supplying the source code to the pydiction generator so people can extend pydiction so that they can have auto-completion for their own modules/functions/etc"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=2555",
      "filename": "pydiction",
      "script_version": "0.1",
      "date": "2003-12-06",
      "vim_version": "6.0",
      "author": {
        "user_id": "3923",
        "user_name": "gt3",
        "first_name": "ryan",
        "last_name": "kulla",
        "email": "rkulla at gmail.com",
        "homepage": "http://www.rkulla.com"
      },
      "release_notes": "Initial upload"
    }
  ]
}
