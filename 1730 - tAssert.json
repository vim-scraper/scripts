{
  "script_id": "1730",
  "display_name": "tAssert",
  "summary": "Simple assertions, poor man's contracts for vim script",
  "name": "tAssert",
  "script_type": "utility",
  "description": "This plugin defines a command |:TAssert| that takes an expression as \nargument and throws an exception if this expression evaluates to \n|empty()|. You can insert these comments throughout your code whenever \nsomething could potentially go wrong. The exception is then thrown right \nwhere the problem occurs. You could think of it as a poor man's \ndesign-by-contract substitute.\n\nOne goal of this plugin is to allow users to quickly switch on or off \nassertions depending on the context. This can be done either by:\n\n    1. Turning assertions off so that they are not evaluated. This can \n       be achieved by setting g:TASSERT to 0 or by calling the command \n       |:TAssertOff|.\n\n    2. Commenting out assertions in the current buffer by calling the \n       commmand |:TAssertComment|.\n\n\nExample:\n\n    fun! Test(a, b)\n        TAssertType a:a, 'string'\n        TAssertType a:b, 'number'\n        TAssert !empty(a:a)\n        return repeat(a:a, a:b)\n    endf\n\n\nLogging:\n\nTAssert also includes a few convenience commands for logging. The \nvariable g:TLOG controls where messages are written to:\n\n    echom ... Print messages in the echo area.\n    file  ... Print messages to a file; syntax \"file:FILENAME\"\n    Decho ... Print messages via Decho (vimscript#642)\n",
  "install_details": "Extract the archive to ~/.vim or ~/vimfiles. If g:TASSERT is 0, the impact of \nthis script on startup time should be minimal.\n\nCompatibility:\nInsert the following code in files using assertions. This defines a utility function \nand makes sure that end users can still use your files without having this \nplugin installed: >\n\n    if !exists(':TAssert')\n        command! -nargs=* -bar -bang TAssert :\n        command! -nargs=* -bar -bang TAssertType :\n    endif\n\n\nAlso available via git\nhttp://github.com/tomtom/tassert_vim",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=10172",
      "filename": "tAssert.vba.gz",
      "script_version": "1.0",
      "date": "2009-03-11",
      "vim_version": "7.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "- Incompatible changes galore\n- Removed :TAssertToggle, :TAssertBegin & :TAssertEnd etc. that doesn't really belong here.\n- :TAssertType command (requires macros/tassert.vim)\n- Moved Is*() functions to macros/tassert.vim.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=7036",
      "filename": "tAssert.vba.gz",
      "script_version": "0.3",
      "date": "2007-04-29",
      "vim_version": "7.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "- IsA(): Can take a list of types as arguments and it provides a way to \ncheck dictionaries againt prototypes or interface definitions.\n- IsExistent()\n- New log-related commands: TLogOn, TLogOff, TLogBufferOn, TLogBufferOff\n- Use TAssertVal(script, expr) to evaluate an expression (as \nargument to a command) in the script context.\n- TAssertOn implies TLogOn\n- *Comment & *Uncomment commands now take a range as argument (default: \nwhole file).\n- TAssertComment! & TAssertUncomment! (with [!]) also call \nTLog(Un)Comment.\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=6526",
      "filename": "tAssert.zip",
      "script_version": "0.2",
      "date": "2006-12-19",
      "vim_version": "7.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "- More convenience functions\n- The convenience functions now display an explanation for a failure\n- Convenience commands weren't loaded when g:TASSERT was off.\n- Logging to a file & via Decho()\n- TAssert! (the one with the bang) doesn't throw an error but simply \ndisplays the failure in the log\n- s:ResolveSIDs() didn't return a string if s:assertFile wasn't set.\n- s:ResolveSIDs() caches scriptnames\n- Moved logging code to 00tLog.vim\n"
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=6514",
      "filename": "tAssert.zip",
      "script_version": "0.1",
      "date": "2006-12-13",
      "vim_version": "6.0",
      "author": {
        "user_id": "4037",
        "user_name": "t.link",
        "first_name": "Tom",
        "last_name": "Link",
        "email": "micathom at gmail.com",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
