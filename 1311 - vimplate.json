{
  "script_id": "1311",
  "name": "vimplate",
  "summary": "template system for vim  (example for C++, Perl, LaTeX and make)",
  "script_type": "utility",
  "description": " 1. Description\n 2. Usage\n 3. Subroutines\n 4. Example\n 5. Documentation\n 6. Depends\n 7. Installation\n\n\n1. Description                                        *vimplate-description*\n \nVimplate provides an extensible and powerful template processing system.\nIt is based on Perl and Template-Toolkit.\nYou can create templates for program code, makefiles, letters, html pages,\nlatex etc. As example vimplate contains templates for C++, LaTeX, Perl\nand Makefile.\nWith vimplate you can write templates which interact with the user.\nFor themes are the functions choice() and input().\nYou can choose different locale for the function date() and locale().\nYou can write your own perl code directly in the templates.\n\nIn case you find my template useful,\nor have suggestions for improvements, please let me know.\n\nIf you write a new template,\nand  would like me to add it to the vimplate package\nplease send it to: stotz@gmx.ch\n\n\n2. Usage                                                    *vimplate-usage*\n\nUsage:\n  :Vimplate <template> [options]\n    choice <template> whit <TAB> (command line completion is supported).\n    With <TAB> all templates are listed.\n    [options]\n      -user|u=<username>\n        Use the information form user <username> while parsing templates.\n      -dir|d=<templatedir>\n        Search templatefiles in <templatedir>.\n\n\n3. Subroutines                                         *vimplate-subroutines*\n\n  locale()                  for locale please see: man locale\n  [% loc=locale() %]        get the current locale\n                              and write it to the variable loc\n  [% locale('C') %]         set global the current locale to C\n  [% locale('de_DE') %]     set global the current locale to de_DE\n  date()                    for date please see: man date\n  [% date('%c') %]          print the current date\n                              with the current locale setting\n  [% date('de_DE', '%c') %] print the current date with the locale de_DE\n  input()\n  [% var=input() %]         read input from user\n                              and write it to the variable var\n  choice()\n  [% day=choice('day:', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa') %]\n                            let the user choice between different values\n                            and write it to the variable day\n\n  please try :Vimplate Test\n\n\n4. Example                                                *vimplate-example*\n\na LaTeX Template:\n  http://typedef.ch/vimplate/example/LaTeX.tt.html\nthe generated LaTeX File:\n  http://typedef.ch/vimplate/example/Example.tex.html\na Makefile Template for LaTeX:\n  http://typedef.ch/vimplate/example/Makefile-LaTeX.tt.html\nthe generated Makefile:\n  http://typedef.ch/vimplate/example/Makefile.html\nc++ Templates:\n  http://typedef.ch/vimplate/example/hpp-default.tt.html\n  http://typedef.ch/vimplate/example/cpp-default.tt.html\nthe generated class:\n  http://typedef.ch/vimplate/example/Example.hpp.html\n  http://typedef.ch/vimplate/example/Example.cpp.html\nthe generated class with doxygen:\n  http://typedef.ch/vimplate/example/ExampleDoxy.hpp.html\n  http://typedef.ch/vimplate/example/ExampleDoxy.cpp.html\na perl Template:\n  http://typedef.ch/vimplate/example/perl.tt.html\nthe genereated program:\n  http://typedef.ch/vimplate/example/Example.pl.html\nthe genereated program with Log4Perl:\n  http://typedef.ch/vimplate/example/ExampleLog.pl.html\n\nExample:\n  the template letter.tt:\n    ________________________________________________________\n    [%\n       sex=choice('sex: ', 'female', 'male')\n       name=input('name: ')\n       location=input('your location: ')\n    -%]\n                       [% ucfirst(location) %], [% date('C', '%b %d, %Y') %]\n\n    Dear [% IF sex=='female'; 'Ms'; ELSE; 'Mr'; END %] [% ucfirst(name) %]\n\n    ...\n\n    Sincerely\n\n    [% user.firstname %] [% user.lastname %]\n    ________________________________________________________\n\n  run vim:\n    :Vimplate letter\n    sex:\n      0) female\n      1) male\n    0\n    name: Meier\n    your location: Olten\n\n  your input was:\n    :Vimplate letter<CR>0<CR>Meier<CR>Olten<CR>\n\n  this will produce this letter:\n    ________________________________________________________\n                                      Olten, Jul 11, 2005\n\n    Dear Ms Meier\n\n    ...\n\n    Sincerely\n\n    Urs Stotz\n    ________________________________________________________\n\nExample:\n  the template hpp-default.tt:\n    ________________________________________________________\n    [% classname=input('Class name: ')\n       doxygen=choice('with Doxygen comments: ', 'no', 'yes')\n    -%]\n    #ifndef [% uc(classname) %]_HPP\n    #define [% uc(classname) %]_HPP\n\n    [% IF doxygen=='yes' -%]\n    /**\n     * @brief [% classname %] ... short description ...\n     * @author [% user.firstname %] [% user.lastname %] <[% user.mail %]>\n     * @date [% date('%Y-%m-%d') %]\n     * ... description ...\n     */\n\n    [% END -%]\n    class [% classname %]\n    {\n      public:\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Default constructor\n         */\n    [% END -%]\n        [% classname %]();\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Copy constructor\n         * @param other reference on object to copy\n         */\n    [% END -%]\n        [% classname %](const [% classname %]& other);\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Assignment operator\n         * @param other reference on object to copy\n         * @return reference on initialisated object\n         */\n    [% END -%]\n        [% classname %]& operator=(const [% classname %]& other);\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Destructor\n         */\n    [% END -%]\n        virtual ~[% classname %]();\n\n      private:\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Base initialisation should be called\n         * at beginning of each constructor\n         */\n    [% END -%]\n        void init();\n    [% IF doxygen=='yes' -%]\n\n    /**\n     * Method to copy each member (deep copy)\n     * @param other reference on object to copy\n     */\n    [% END -%]\n        void init(const [% classname %]& other);\n    };\n\n    #endif /* #ifndef [% uc(classname) %]_HPP */\n    ________________________________________________________\n\n  run vim:\n    :Vimplate hpp-default\n    Class name: Parent\n    with Doxygen comments:\n      0) no\n      1) yes\n    1\n\n  your input was:\n    :Vimplate hpp-default<CR>Parent<CR>1<CR>\n\n  this will produce this c++ include file:\n    ________________________________________________________\n    #ifndef PARENT_HPP\n    #define PARENT_HPP\n\n    /**\n     * @brief Parent ... short description ...\n     * @author Urs Stotz <stotz@gmx.ch>\n     * @date 2005-07-18\n     * ... description ...\n     */\n\n    class Parent\n    {\n      public:\n\n        /**\n         * Default constructor\n         */\n        Parent();\n\n        /**\n         * Copy constructor\n         * @param other reference on object to copy\n         */\n        Parent(const Parent& other);\n\n        /**\n         * Assignment operator\n         * @param other reference on object to copy\n         * @return reference on initialisated object\n         */\n        Parent& operator=(const Parent& other);\n\n        /**\n         * Destructor\n         */\n        virtual ~Parent();\n\n      private:\n\n        /**\n         * Base initialisation should be called\n         * at beginning of each constructor\n         */\n        void init();\n\n        /**\n         * Method to copy each member (deep copy)\n         * @param other reference on object to copy\n         */\n        void init(const Parent& other);\n    };\n\n    #endif /* #ifndef PARENT_HPP */\n    ________________________________________________________\n\n\n5. Documentation                                    *vimplate-documentation*\n\nDocumentation:\n  - http://typedef.ch/vimplate\n  - http://www.template-toolkit.org/docs.html\n  - http://perldoc.perl.org/perl.html\n\nTodo:\n  - better exception handling\n  - write more templates\n\nLicense:\n  This program is free software; you can redistribute it and/or modify it\n  under the terms of the GNU General Public License, version 2, as published\n  by the Free Software Foundation.\n\n  This program is distributed in the hope that it will be useful, but\n  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n  for more details.\n\n  A copy of the GNU GPL is available as /usr/share/common-licenses/GPL-2\n  on Debian systems, or on the World Wide Web at\n  http://www.gnu.org/copyleft/gpl.html\n  You can also obtain it by writing to the Free Software Foundation, Inc.,\n  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA\n\nCopyright:\n  Copyright (c) 2005, Urs Stotz <stotz@gmx.ch>\n\nVersion:\n  vimplate 0.2.3",
  "install_details": "6. Depends:                                               *vimplate-depends*\n\nDebian Users:\nVimplate is part of vim-scripts >= 7.0.5  thanks: Stefano Zacchiroli and Michael Piefel\n  apt-get install vim-scripts\n\n  Perl\n    http://www.perl.org\n    Windows users:\n      http://www.activestate.com/Products/ActivePerl\n  Template-Toolkit\n    http://search.cpan.org/~abw/Template-Toolkit-2.14\n    or apt-get install libtemplate-perl\n    or perl -MCPAN -e\"install Template\"\n    Windows users:\n      ppm install\n        http://openinteract.sourceforge.net/ppmpackages/AppConfig.ppd\n      ppm install\n        http://openinteract.sourceforge.net/ppmpackages/Template-Toolkit.ppd\n\nSuggests:\n  TT2 syntax:\n    http://www.vim.org/scripts/script.php?script_id=830\n\n\n7. Installation                                      *vimplate-installation*\n\nInstallation steps:\n  1. change to your $HOME/.vim directory\n       (on windows: set the variable HOME\n         set HOME=c:\\vim)\n  2. untar vimplate.tar.gz: gzip -dc vimplate.tar.gz |tar xpvf -\n  3. move the vimplate into your preferred directory\n      for example in $HOME/bin or /usr/local/bin\n  4. move the directory Template with the example templates\n      to the place that you prefer\n  5. edit your $HOME/.vimrc and set the variable Vimplate to\n      to the place where vimplate is located\n      for example let Vimplate = \"$HOME/bin/vimplate\"\n        (on windows: let Vimplate = \"%HOME%/bin/vimplate.cmd\" )\n  6. run vimplate to create your configuration file $HOME/.vimplaterc\n      for example $HOME/bin/vimplate -createconfig\n        (on windows: %HOME%/bin/vimplate.cmd -createconfig\" )\n  7. edit your $HOME/.vimplaterc\n       (on windows: %HOME%/_vimplaterc)\n  8. change to the $HOME/.vim/doc directory,\n      start Vim and run the \":helptags .\" command to process the\n      taglist help file. (see: |helptags| )\n  9. happy vimplating",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=4504",
      "filename": "vimplate-0.2.3.tar.gz",
      "script_version": "0.2.3",
      "date": "2005-08-20",
      "vim_version": "6.0",
      "author": {
        "user_id": "5415",
        "user_name": "stotz",
        "first_name": "Urs",
        "last_name": "Stotz",
        "email": "stotz at gmx.ch",
        "homepage": "http://www.typedef.ch"
      },
      "release_notes": "The perl vimplate script is running now also on Windows.\nA vim help added.\nDokumentation written for Windows ActiveState Perl User.\nTemplates for C++, Perl, LaTeX and make revised."
    },
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=4438",
      "filename": "vimplate-0.2.2.tar.gz",
      "script_version": "0.2.2",
      "date": "2005-07-18",
      "vim_version": "6.0",
      "author": {
        "user_id": "5415",
        "user_name": "stotz",
        "first_name": "Urs",
        "last_name": "Stotz",
        "email": "stotz at gmx.ch",
        "homepage": "http://www.typedef.ch"
      },
      "release_notes": "Better templates for C++. Now with choose between Doxygen comments or non comments.\nVimplate should be running on Windows when there Template-Toolkit is installed."
    }
  ]
}