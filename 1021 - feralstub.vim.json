{
  "script_id": "1021",
  "display_name": "feralstub.vim",
  "summary": "Flexible stubs. (inspired by Dr.Chip's C-Stubs)",
  "name": "feralstub.vim",
  "script_type": "utility",
  "description": "The idea of this plugin (collection) is to allow you to easily setup and manage ex commands that happen when you (in insert mode) type a keyword (of your choice) and pretty a special char(easily configurable). For instance:\nfts`\nfts is the keyword (Feral Time Stamp)\n'`' is the special char that is used to invoke the main script.\n\nThis will result in:\n[Feral:176/04@06:50]\nI.e. results in replacing fts with the string '[Feral:176/04@06:50]'\n\nYou can add your own keywords via script functions and each keyword is dependant on a given file type.\n\nSo to define a global 'if' keyword you would do something like:\ncall FeralStub_AddNewExecute('', '\\<i\\%[f]\\>', \"norm! ciwif\\<CR>endif\\<ESC>kA \\<ESC>\")\n\nAn to define a 'if' keyword only for say .vim files:\ncall FeralStub_AddNewExecute('vim', '\\<i\\%[f]\\>', \"norm! ciwif\\<CR>endif\\<ESC>kA \\<ESC>\")\n\nOr to define an 'if' keyword for the current file type:\ncall FeralStub_AddNewExecute(&ft, '\\<i\\%[f]\\>', \"norm! ciwif\\<CR>endif\\<ESC>kA \\<ESC>\")\n\nSee the documentation in feralstub.vim for more specifics.\n\nIn brief:\ncall FeralStub_AddNewExecute(<filetype>, <match_pattern>, <ex_command_to_execute_when_keyword_matches_match_pattern>)\nOr\ncall FeralStub_AddNewFunction(<filetype>, <match_pattern>, <Global_Function_To_call_when_keyword_mattches_match_pattern>)\n\n\nThe end result is an easy way to add a new entry into this stub system, and to easily allow such entries to be added from various locations such as plugin, ftplugin or a script that is sourced on a per project basis (via autocommands for instance).\n\nThe match_pattern is fed directly to match() so what you can match is very flexable\nThe ex_command_to_execute_when_keyword_matches_match_pattern is fed directly to :execute\nThe Global_Function_To_call_when_keyword_mattches_match_pattern is fed directly to :call\n\n\nThe only downside I can foresee with this is:\n1. exit and restart vim to get a new pattern into the system.\n2. the 'ex' pattern is a pain but generally just i_CTRL-R_CTRL-R a recorded macro and the hard part is done.\n3. This makes extensive use of curly-braces-names and lots of vars.\n\n\n\n\nYou can easily change the default '`. special char to something else via two lines in your .vimrc (or the like)\nExamples: (in .vimrc)\nTo Specify A Different Typable Char:\nimap\t<unique>\t~\t<Plug>FeralStub_DO\nlet g:FeralStub_CharToInsertOnFailure = '~'\n\nTo Specify A Non Typable Char:\nimap\t<unique>\t<F12>\t<Plug>FeralStub_DO\nlet g:FeralStub_CharToInsertOnFailure = ''",
  "rating_total": "1",
  "rating_votes": "1",
  "downloads": "391",
  "install_details": "To install unzip and place the files in their corresponding directories (each file lists where it should go and each file is in the directory it should go in)\n\n./vim/plugin\\feralstub.vim\n./vim/plugin\\feralstub_global.vim\n./vim/ftplugin\\vim\\feralstubs_vim.vim\n\nHowever, './vim/ftplugin\\vim\\feralstubs_vim.vim' is an optional example",
  "versions": [
    {
      "url": "http://www.vim.org/scripts/download_script.php?src_id=3178",
      "filename": "feralstub.zip",
      "script_version": "0.1",
      "date": "2004-06-24",
      "vim_version": "6.0",
      "author": {
        "user_id": "818",
        "user_name": "FeralOfFireTop",
        "first_name": "Robert",
        "last_name": "KellyIV",
        "email": "feral at eclecticwizard.com",
        "homepage": ""
      },
      "release_notes": "Initial upload"
    }
  ]
}
